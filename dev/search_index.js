var documenterSearchIndex = {"docs":
[{"location":"PolylineMap/#PolylineMap","page":"PolylineMap","title":"PolylineMap","text":"","category":"section"},{"location":"PolylineMap/#Properties","page":"PolylineMap","title":"Properties","text":"","category":"section"},{"location":"PolylineMap/","page":"PolylineMap","title":"PolylineMap","text":"Name Type Description Notes\nid String The identifier of the map [optional] [default to nothing]\npolyline String The polyline of the map, only returned on detailed representation of an object [optional] [default to nothing]\nsummary_polyline String The summary polyline of the map [optional] [default to nothing]","category":"page"},{"location":"PolylineMap/","page":"PolylineMap","title":"PolylineMap","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"Comment/#Comment","page":"Comment","title":"Comment","text":"","category":"section"},{"location":"Comment/#Properties","page":"Comment","title":"Properties","text":"","category":"section"},{"location":"Comment/","page":"Comment","title":"Comment","text":"Name Type Description Notes\nid Int64 The unique identifier of this comment [optional] [default to nothing]\nactivity_id Int64 The identifier of the activity this comment is related to [optional] [default to nothing]\ntext String The content of the comment [optional] [default to nothing]\nathlete ***SummaryAthlete**  [optional] [default to nothing]\ncreated_at ZonedDateTime The time at which this comment was created. [optional] [default to nothing]","category":"page"},{"location":"Comment/","page":"Comment","title":"Comment","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"SummaryPRSegmentEffort/#SummaryPRSegmentEffort","page":"SummaryPRSegmentEffort","title":"SummaryPRSegmentEffort","text":"","category":"section"},{"location":"SummaryPRSegmentEffort/#Properties","page":"SummaryPRSegmentEffort","title":"Properties","text":"","category":"section"},{"location":"SummaryPRSegmentEffort/","page":"SummaryPRSegmentEffort","title":"SummaryPRSegmentEffort","text":"Name Type Description Notes\npractivityid Int64 The unique identifier of the activity related to the PR effort. [optional] [default to nothing]\nprelapsedtime Int64 The elapsed time ot the PR effort. [optional] [default to nothing]\npr_date ZonedDateTime The time at which the PR effort was started. [optional] [default to nothing]\neffort_count Int64 Number of efforts by the authenticated athlete on this segment. [optional] [default to nothing]","category":"page"},{"location":"SummaryPRSegmentEffort/","page":"SummaryPRSegmentEffort","title":"SummaryPRSegmentEffort","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"DetailedGear/#DetailedGear","page":"DetailedGear","title":"DetailedGear","text":"","category":"section"},{"location":"DetailedGear/#Properties","page":"DetailedGear","title":"Properties","text":"","category":"section"},{"location":"DetailedGear/","page":"DetailedGear","title":"DetailedGear","text":"Name Type Description Notes\nid String The gear&#39;s unique identifier. [optional] [default to nothing]\nresource_state Int64 Resource state, indicates level of detail. Possible values: 2 -&gt; \\&quot;summary\\&quot;, 3 -&gt; \\&quot;detail\\&quot; [optional] [default to nothing]\nprimary Bool Whether this gear&#39;s is the owner&#39;s default one. [optional] [default to nothing]\nname String The gear&#39;s name. [optional] [default to nothing]\ndistance Float32 The distance logged with this gear. [optional] [default to nothing]\nbrand_name String The gear&#39;s brand name. [optional] [default to nothing]\nmodel_name String The gear&#39;s model name. [optional] [default to nothing]\nframe_type Int64 The gear&#39;s frame type (bike only). [optional] [default to nothing]\ndescription String The gear&#39;s description. [optional] [default to nothing]","category":"page"},{"location":"DetailedGear/","page":"DetailedGear","title":"DetailedGear","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"DetailedSegment/#DetailedSegment","page":"DetailedSegment","title":"DetailedSegment","text":"","category":"section"},{"location":"DetailedSegment/#Properties","page":"DetailedSegment","title":"Properties","text":"","category":"section"},{"location":"DetailedSegment/","page":"DetailedSegment","title":"DetailedSegment","text":"Name Type Description Notes\nid Int64 The unique identifier of this segment [optional] [default to nothing]\nname String The name of this segment [optional] [default to nothing]\nactivity_type String  [optional] [default to nothing]\ndistance Float32 The segment&#39;s distance, in meters [optional] [default to nothing]\naverage_grade Float32 The segment&#39;s average grade, in percents [optional] [default to nothing]\nmaximum_grade Float32 The segments&#39;s maximum grade, in percents [optional] [default to nothing]\nelevation_high Float32 The segments&#39;s highest elevation, in meters [optional] [default to nothing]\nelevation_low Float32 The segments&#39;s lowest elevation, in meters [optional] [default to nothing]\nstart_latlng Vector{Float32} A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. [optional] [default to nothing]\nend_latlng Vector{Float32} A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. [optional] [default to nothing]\nclimb_category Int64 The category of the climb [0, 5]. Higher is harder ie. 5 is Hors cat√©gorie, 0 is uncategorized in climb_category. [optional] [default to nothing]\ncity String The segments&#39;s city. [optional] [default to nothing]\nstate String The segments&#39;s state or geographical region. [optional] [default to nothing]\ncountry String The segment&#39;s country. [optional] [default to nothing]\nprivate Bool Whether this segment is private. [optional] [default to nothing]\nathletepreffort ***SummaryPRSegmentEffort**  [optional] [default to nothing]\nathletesegmentstats ***SummarySegmentEffort**  [optional] [default to nothing]\ncreated_at ZonedDateTime The time at which the segment was created. [optional] [default to nothing]\nupdated_at ZonedDateTime The time at which the segment was last updated. [optional] [default to nothing]\ntotalelevationgain Float32 The segment&#39;s total elevation gain. [optional] [default to nothing]\nmap ***PolylineMap**  [optional] [default to nothing]\neffort_count Int64 The total number of efforts for this segment [optional] [default to nothing]\nathlete_count Int64 The number of unique athletes who have an effort for this segment [optional] [default to nothing]\nhazardous Bool Whether this segment is considered hazardous [optional] [default to nothing]\nstar_count Int64 The number of stars for this segment [optional] [default to nothing]","category":"page"},{"location":"DetailedSegment/","page":"DetailedSegment","title":"DetailedSegment","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"SummaryAthlete/#SummaryAthlete","page":"SummaryAthlete","title":"SummaryAthlete","text":"","category":"section"},{"location":"SummaryAthlete/#Properties","page":"SummaryAthlete","title":"Properties","text":"","category":"section"},{"location":"SummaryAthlete/","page":"SummaryAthlete","title":"SummaryAthlete","text":"Name Type Description Notes\nid Int64 The unique identifier of the athlete [optional] [default to nothing]\nresource_state Int64 Resource state, indicates level of detail. Possible values: 1 -&gt; \\&quot;meta\\&quot;, 2 -&gt; \\&quot;summary\\&quot;, 3 -&gt; \\&quot;detail\\&quot; [optional] [default to nothing]\nfirstname String The athlete&#39;s first name. [optional] [default to nothing]\nlastname String The athlete&#39;s last name. [optional] [default to nothing]\nprofile_medium String URL to a 62x62 pixel profile picture. [optional] [default to nothing]\nprofile String URL to a 124x124 pixel profile picture. [optional] [default to nothing]\ncity String The athlete&#39;s city. [optional] [default to nothing]\nstate String The athlete&#39;s state or geographical region. [optional] [default to nothing]\ncountry String The athlete&#39;s country. [optional] [default to nothing]\nsex String The athlete&#39;s sex. [optional] [default to nothing]\npremium Bool Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription. [optional] [default to nothing]\nsummit Bool Whether the athlete has any Summit subscription. [optional] [default to nothing]\ncreated_at ZonedDateTime The time at which the athlete was created. [optional] [default to nothing]\nupdated_at ZonedDateTime The time at which the athlete was last updated. [optional] [default to nothing]","category":"page"},{"location":"SummaryAthlete/","page":"SummaryAthlete","title":"SummaryAthlete","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"MetaActivity/#MetaActivity","page":"MetaActivity","title":"MetaActivity","text":"","category":"section"},{"location":"MetaActivity/#Properties","page":"MetaActivity","title":"Properties","text":"","category":"section"},{"location":"MetaActivity/","page":"MetaActivity","title":"MetaActivity","text":"Name Type Description Notes\nid Int64 The unique identifier of the activity [optional] [default to nothing]","category":"page"},{"location":"MetaActivity/","page":"MetaActivity","title":"MetaActivity","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"ActivityZone/#ActivityZone","page":"ActivityZone","title":"ActivityZone","text":"","category":"section"},{"location":"ActivityZone/#Properties","page":"ActivityZone","title":"Properties","text":"","category":"section"},{"location":"ActivityZone/","page":"ActivityZone","title":"ActivityZone","text":"Name Type Description Notes\nscore Int64  [optional] [default to nothing]\ndistribution_buckets Vector{TimedZoneRange} Stores the exclusive ranges representing zones and the time spent in each. [optional] [default to nothing]\ntype String  [optional] [default to nothing]\nsensor_based Bool  [optional] [default to nothing]\npoints Int64  [optional] [default to nothing]\ncustom_zones Bool  [optional] [default to nothing]\nmax Int64  [optional] [default to nothing]","category":"page"},{"location":"ActivityZone/","page":"ActivityZone","title":"ActivityZone","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"ExplorerResponse/#ExplorerResponse","page":"ExplorerResponse","title":"ExplorerResponse","text":"","category":"section"},{"location":"ExplorerResponse/#Properties","page":"ExplorerResponse","title":"Properties","text":"","category":"section"},{"location":"ExplorerResponse/","page":"ExplorerResponse","title":"ExplorerResponse","text":"Name Type Description Notes\nsegments Vector{ExplorerSegment} The set of segments matching an explorer request [optional] [default to nothing]","category":"page"},{"location":"ExplorerResponse/","page":"ExplorerResponse","title":"ExplorerResponse","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"RoutesApi/#RoutesApi","page":"RoutesApi","title":"RoutesApi","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"All URIs are relative to https://www.strava.com/api/v3","category":"page"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Method HTTP request Description\ngetrouteasgp_x GET /routes/{id}/export_gpx Export Route GPX\ngetrouteastc_x GET /routes/{id}/export_tcx Export Route TCX\ngetrouteby_id GET /routes/{id} Get Route\ngetroutesbyathleteid GET /athletes/{id}/routes List Athlete Routes","category":"page"},{"location":"RoutesApi/#**get*route*as*g*p_x**","page":"RoutesApi","title":"getrouteasgp_x","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"getrouteasgpx(api::RoutesApi, id::Int64; mediaType=nothing) -> Nothing, OpenAPI.Clients.ApiResponse <br/> getrouteasgpx(api::RoutesApi, responsestream::Channel, id::Int64; _mediaType=nothing) -> Channel{ Nothing }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Export Route GPX","category":"page"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Returns a GPX file of the route. Requires read_all scope for private routes.","category":"page"},{"location":"RoutesApi/#Required-Parameters","page":"RoutesApi","title":"Required Parameters","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Name Type Description Notes\n_api RoutesApi API context \nid Int64 The identifier of the route. ","category":"page"},{"location":"RoutesApi/#Return-type","page":"RoutesApi","title":"Return type","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Nothing","category":"page"},{"location":"RoutesApi/#Authorization","page":"RoutesApi","title":"Authorization","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"strava_oauth","category":"page"},{"location":"RoutesApi/#HTTP-request-headers","page":"RoutesApi","title":"HTTP request headers","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"RoutesApi/#**get*route*as*t*c_x**","page":"RoutesApi","title":"getrouteastc_x","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"getrouteastcx(api::RoutesApi, id::Int64; mediaType=nothing) -> Nothing, OpenAPI.Clients.ApiResponse <br/> getrouteastcx(api::RoutesApi, responsestream::Channel, id::Int64; _mediaType=nothing) -> Channel{ Nothing }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Export Route TCX","category":"page"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Returns a TCX file of the route. Requires read_all scope for private routes.","category":"page"},{"location":"RoutesApi/#Required-Parameters-2","page":"RoutesApi","title":"Required Parameters","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Name Type Description Notes\n_api RoutesApi API context \nid Int64 The identifier of the route. ","category":"page"},{"location":"RoutesApi/#Return-type-2","page":"RoutesApi","title":"Return type","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Nothing","category":"page"},{"location":"RoutesApi/#Authorization-2","page":"RoutesApi","title":"Authorization","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"strava_oauth","category":"page"},{"location":"RoutesApi/#HTTP-request-headers-2","page":"RoutesApi","title":"HTTP request headers","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"RoutesApi/#**get*route*by_id**","page":"RoutesApi","title":"getrouteby_id","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"getroutebyid(api::RoutesApi, id::Int64; mediaType=nothing) -> Route, OpenAPI.Clients.ApiResponse <br/> getroutebyid(api::RoutesApi, responsestream::Channel, id::Int64; _mediaType=nothing) -> Channel{ Route }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Get Route","category":"page"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Returns a route using its identifier. Requires read_all scope for private routes.","category":"page"},{"location":"RoutesApi/#Required-Parameters-3","page":"RoutesApi","title":"Required Parameters","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Name Type Description Notes\n_api RoutesApi API context \nid Int64 The identifier of the route. ","category":"page"},{"location":"RoutesApi/#Return-type-3","page":"RoutesApi","title":"Return type","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Route","category":"page"},{"location":"RoutesApi/#Authorization-3","page":"RoutesApi","title":"Authorization","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"strava_oauth","category":"page"},{"location":"RoutesApi/#HTTP-request-headers-3","page":"RoutesApi","title":"HTTP request headers","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"RoutesApi/#**get*routes*by*athlete*id**","page":"RoutesApi","title":"getroutesbyathleteid","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"getroutesbyathleteid(api::RoutesApi; page=nothing, perpage=nothing, mediaType=nothing) -> Vector{Route}, OpenAPI.Clients.ApiResponse <br/> getroutesbyathleteid(api::RoutesApi, responsestream::Channel; page=nothing, perpage=nothing, _mediaType=nothing) -> Channel{ Vector{Route} }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"List Athlete Routes","category":"page"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Returns a list of the routes created by the authenticated athlete. Private routes are filtered out unless requested by a token with read_all scope.","category":"page"},{"location":"RoutesApi/#Required-Parameters-4","page":"RoutesApi","title":"Required Parameters","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Name Type Description Notes\n_api RoutesApi API context ","category":"page"},{"location":"RoutesApi/#Optional-Parameters","page":"RoutesApi","title":"Optional Parameters","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Name Type Description Notes\npage Int64 Page number. Defaults to 1. [default to nothing]\nper_page Int64 Number of items per page. Defaults to 30. [default to 30]","category":"page"},{"location":"RoutesApi/#Return-type-4","page":"RoutesApi","title":"Return type","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Vector{Route}","category":"page"},{"location":"RoutesApi/#Authorization-4","page":"RoutesApi","title":"Authorization","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"strava_oauth","category":"page"},{"location":"RoutesApi/#HTTP-request-headers-4","page":"RoutesApi","title":"HTTP request headers","text":"","category":"section"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"RoutesApi/","page":"RoutesApi","title":"RoutesApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"MetaClub/#MetaClub","page":"MetaClub","title":"MetaClub","text":"","category":"section"},{"location":"MetaClub/#Properties","page":"MetaClub","title":"Properties","text":"","category":"section"},{"location":"MetaClub/","page":"MetaClub","title":"MetaClub","text":"Name Type Description Notes\nid Int64 The club&#39;s unique identifier. [optional] [default to nothing]\nresource_state Int64 Resource state, indicates level of detail. Possible values: 1 -&gt; \\&quot;meta\\&quot;, 2 -&gt; \\&quot;summary\\&quot;, 3 -&gt; \\&quot;detail\\&quot; [optional] [default to nothing]\nname String The club&#39;s name. [optional] [default to nothing]","category":"page"},{"location":"MetaClub/","page":"MetaClub","title":"MetaClub","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"README/#Julia-API-client-for-StravaAPI","page":"Readme","title":"Julia API client for StravaAPI","text":"","category":"section"},{"location":"README/","page":"Readme","title":"Readme","text":"The Swagger Playground is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your ‚ÄúAuthorization Callback Domain‚Äù to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section ‚Äúclient code‚Äù at https://developers.strava.com/docs.","category":"page"},{"location":"README/#Overview","page":"Readme","title":"Overview","text":"","category":"section"},{"location":"README/","page":"Readme","title":"Readme","text":"This API client was generated by the OpenAPI Generator project.  By using the openapi-spec from a remote server, you can easily generate an API client.","category":"page"},{"location":"README/","page":"Readme","title":"Readme","text":"API version: 3.0.0\nGenerator version: 7.13.0-SNAPSHOT\nBuild package: org.openapitools.codegen.languages.JuliaClientCodegen","category":"page"},{"location":"README/#Installation","page":"Readme","title":"Installation","text":"","category":"section"},{"location":"README/","page":"Readme","title":"Readme","text":"Place the Julia files generated under the src folder in your Julia project. Include StravaAPI.jl in the project code. It would include the module named StravaAPI.","category":"page"},{"location":"README/","page":"Readme","title":"Readme","text":"Documentation is generated as markdown files under the docs folder. You can include them in your project documentation. Documentation is also embedded in Julia which can be used with a Julia specific documentation generator.","category":"page"},{"location":"README/#API-Endpoints","page":"Readme","title":"API Endpoints","text":"","category":"section"},{"location":"README/","page":"Readme","title":"Readme","text":"Class Method\nActivitiesApi create_activity<br/>POST /activities<br/>Create an Activity\nActivitiesApi getactivityby_id<br/>GET /activities/{id}<br/>Get Activity\nActivitiesApi getcommentsbyactivityid<br/>GET /activities/{id}/comments<br/>List Activity Comments\nActivitiesApi getkudoersbyactivityid<br/>GET /activities/{id}/kudos<br/>List Activity Kudoers\nActivitiesApi getlapsbyactivityid<br/>GET /activities/{id}/laps<br/>List Activity Laps\nActivitiesApi getloggedinathleteactivities<br/>GET /athlete/activities<br/>List Athlete Activities\nActivitiesApi getzonesbyactivityid<br/>GET /activities/{id}/zones<br/>Get Activity Zones\nActivitiesApi updateactivityby_id<br/>PUT /activities/{id}<br/>Update Activity\nAthletesApi getloggedin_athlete<br/>GET /athlete<br/>Get Authenticated Athlete\nAthletesApi getloggedinathletezones<br/>GET /athlete/zones<br/>Get Zones\nAthletesApi get_stats<br/>GET /athletes/{id}/stats<br/>Get Athlete Stats\nAthletesApi updateloggedin_athlete<br/>PUT /athlete<br/>Update Athlete\nClubsApi getclubactivitiesbyid<br/>GET /clubs/{id}/activities<br/>List Club Activities\nClubsApi getclubadminsbyid<br/>GET /clubs/{id}/admins<br/>List Club Administrators\nClubsApi getclubby_id<br/>GET /clubs/{id}<br/>Get Club\nClubsApi getclubmembersbyid<br/>GET /clubs/{id}/members<br/>List Club Members\nClubsApi getloggedinathleteclubs<br/>GET /athlete/clubs<br/>List Athlete Clubs\nGearsApi getgearby_id<br/>GET /gear/{id}<br/>Get Equipment\nRoutesApi getrouteasgp_x<br/>GET /routes/{id}/export_gpx<br/>Export Route GPX\nRoutesApi getrouteastc_x<br/>GET /routes/{id}/export_tcx<br/>Export Route TCX\nRoutesApi getrouteby_id<br/>GET /routes/{id}<br/>Get Route\nRoutesApi getroutesbyathleteid<br/>GET /athletes/{id}/routes<br/>List Athlete Routes\nSegmentEffortsApi geteffortsbysegmentid<br/>GET /segment_efforts<br/>List Segment Efforts\nSegmentEffortsApi getsegmenteffortbyid<br/>GET /segment_efforts/{id}<br/>Get Segment Effort\nSegmentsApi explore_segments<br/>GET /segments/explore<br/>Explore segments\nSegmentsApi getloggedinathletestarred_segments<br/>GET /segments/starred<br/>List Starred Segments\nSegmentsApi getsegmentby_id<br/>GET /segments/{id}<br/>Get Segment\nSegmentsApi star_segment<br/>PUT /segments/{id}/starred<br/>Star Segment\nStreamsApi getactivitystreams<br/>GET /activities/{id}/streams<br/>Get Activity Streams\nStreamsApi getroutestreams<br/>GET /routes/{id}/streams<br/>Get Route Streams\nStreamsApi getsegmenteffort_streams<br/>GET /segment_efforts/{id}/streams<br/>Get Segment Effort Streams\nStreamsApi getsegmentstreams<br/>GET /segments/{id}/streams<br/>Get Segment Streams\nUploadsApi create_upload<br/>POST /uploads<br/>Upload Activity\nUploadsApi getuploadby_id<br/>GET /uploads/{uploadId}<br/>Get Upload","category":"page"},{"location":"README/#Models","page":"Readme","title":"Models","text":"","category":"section"},{"location":"README/","page":"Readme","title":"Readme","text":"ActivityStats\nActivityTotal\nActivityType\nActivityZone\nAltitudeStream\nBaseStream\nCadenceStream\nClubActivity\nClubAthlete\nComment\nDetailedActivity\nDetailedAthlete\nDetailedClub\nDetailedGear\nDetailedSegment\nDetailedSegmentEffort\nDistanceStream\nError\nExplorerResponse\nExplorerSegment\nFault\nHeartRateZoneRanges\nHeartrateStream\nLap\nLatLngStream\nMetaActivity\nMetaAthlete\nMetaClub\nMovingStream\nPhotosSummary\nPhotosSummaryPrimary\nPolylineMap\nPowerStream\nPowerZoneRanges\nRoute\nSmoothGradeStream\nSmoothVelocityStream\nSplit\nSportType\nStreamSet\nSummaryActivity\nSummaryAthlete\nSummaryClub\nSummaryGear\nSummaryPRSegmentEffort\nSummarySegment\nSummarySegmentEffort\nTemperatureStream\nTimeStream\nTimedZoneRange\nUpdatableActivity\nUpload\nWaypoint\nZoneRange\nZones","category":"page"},{"location":"README/","page":"Readme","title":"Readme","text":"<a id=\"authorization\"></a>","category":"page"},{"location":"README/#Authorization","page":"Readme","title":"Authorization","text":"","category":"section"},{"location":"README/","page":"Readme","title":"Readme","text":"Authentication schemes defined for the API: <a id=\"strava_oauth\"></a>","category":"page"},{"location":"README/#strava_oauth","page":"Readme","title":"strava_oauth","text":"","category":"section"},{"location":"README/","page":"Readme","title":"Readme","text":"Type: OAuth\nFlow: accessCode\nAuthorization URL: https://www.strava.com/api/v3/oauth/authorize\nScopes: \nread_all: Read private routes, private segments, and private events for the user\nprofile:write: Update the user's weight and Functional Threshold Power (FTP), and access to star or unstar segments on their behalf\nactivity:read_all: The same access as activity:read, plus privacy zone data and access to read the user's activities with visibility set to Only You\nactivity:write: Access to create manual activities and uploads, and access to edit any activities that are visible to the app, based on activity read access level\nprofile:read_all: Read all profile information even if the user has set their profile visibility to Followers or Only You\nactivity:read: Read the user's activity data for activities that are visible to Everyone and Followers, excluding privacy zone data\nread: Read public segments, public routes, public profile data, public posts, public events, club feeds, and leaderboards","category":"page"},{"location":"README/","page":"Readme","title":"Readme","text":"Example","category":"page"},{"location":"README/","page":"Readme","title":"Readme","text":"    using OpenAPI\n    using OpenAPI.Clients\n    import OpenAPI.Clients: Client, set_header\n    client = Client(server_uri)\n    set_header(client, \"Authorization\", \"Bearer $bearer_auth\")\n    api = MyApi(client)\n    result = callApi(api, args...; api_key)","category":"page"},{"location":"README/#Author","page":"Readme","title":"Author","text":"","category":"section"},{"location":"ActivitiesApi/#ActivitiesApi","page":"ActivitiesApi","title":"ActivitiesApi","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"All URIs are relative to https://www.strava.com/api/v3","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Method HTTP request Description\ncreate_activity POST /activities Create an Activity\ngetactivityby_id GET /activities/{id} Get Activity\ngetcommentsbyactivityid GET /activities/{id}/comments List Activity Comments\ngetkudoersbyactivityid GET /activities/{id}/kudos List Activity Kudoers\ngetlapsbyactivityid GET /activities/{id}/laps List Activity Laps\ngetloggedinathleteactivities GET /athlete/activities List Athlete Activities\ngetzonesbyactivityid GET /activities/{id}/zones Get Activity Zones\nupdateactivityby_id PUT /activities/{id} Update Activity","category":"page"},{"location":"ActivitiesApi/#**create_activity**","page":"ActivitiesApi","title":"create_activity","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"createactivity(api::ActivitiesApi, name::String, sporttype::String, startdatelocal::ZonedDateTime, elapsedtime::Int64; type=nothing, description=nothing, distance=nothing, trainer=nothing, commute=nothing, mediaType=nothing) -> DetailedActivity, OpenAPI.Clients.ApiResponse <br/> createactivity(api::ActivitiesApi, responsestream::Channel, name::String, sporttype::String, startdatelocal::ZonedDateTime, elapsedtime::Int64; type=nothing, description=nothing, distance=nothing, trainer=nothing, commute=nothing, _mediaType=nothing) -> Channel{ DetailedActivity }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Create an Activity","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Creates a manual activity for an athlete, requires activity:write scope.","category":"page"},{"location":"ActivitiesApi/#Required-Parameters","page":"ActivitiesApi","title":"Required Parameters","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Name Type Description Notes\n_api ActivitiesApi API context \nname String The name of the activity. \nsport_type String Sport type of activity. For example - Run, MountainBikeRide, Ride, etc. \nstartdatelocal ZonedDateTime ISO 8601 formatted date time. \nelapsed_time Int64 In seconds. ","category":"page"},{"location":"ActivitiesApi/#Optional-Parameters","page":"ActivitiesApi","title":"Optional Parameters","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Name Type Description Notes\ntype String Type of activity. For example - Run, Ride etc. [default to nothing]\ndescription String Description of the activity. [default to nothing]\ndistance Float32 In meters. [default to nothing]\ntrainer Int64 Set to 1 to mark as a trainer activity. [default to nothing]\ncommute Int64 Set to 1 to mark as commute. [default to nothing]","category":"page"},{"location":"ActivitiesApi/#Return-type","page":"ActivitiesApi","title":"Return type","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"DetailedActivity","category":"page"},{"location":"ActivitiesApi/#Authorization","page":"ActivitiesApi","title":"Authorization","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"strava_oauth","category":"page"},{"location":"ActivitiesApi/#HTTP-request-headers","page":"ActivitiesApi","title":"HTTP request headers","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Content-Type: multipart/form-data\nAccept: application/json","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"ActivitiesApi/#**get*activity*by_id**","page":"ActivitiesApi","title":"getactivityby_id","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"getactivitybyid(api::ActivitiesApi, id::Int64; includeallefforts=nothing, mediaType=nothing) -> DetailedActivity, OpenAPI.Clients.ApiResponse <br/> getactivitybyid(api::ActivitiesApi, responsestream::Channel, id::Int64; includeallefforts=nothing, _mediaType=nothing) -> Channel{ DetailedActivity }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Get Activity","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.","category":"page"},{"location":"ActivitiesApi/#Required-Parameters-2","page":"ActivitiesApi","title":"Required Parameters","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Name Type Description Notes\n_api ActivitiesApi API context \nid Int64 The identifier of the activity. ","category":"page"},{"location":"ActivitiesApi/#Optional-Parameters-2","page":"ActivitiesApi","title":"Optional Parameters","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Name Type Description Notes\nincludeallefforts Bool To include all segments efforts. [default to nothing]","category":"page"},{"location":"ActivitiesApi/#Return-type-2","page":"ActivitiesApi","title":"Return type","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"DetailedActivity","category":"page"},{"location":"ActivitiesApi/#Authorization-2","page":"ActivitiesApi","title":"Authorization","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"strava_oauth","category":"page"},{"location":"ActivitiesApi/#HTTP-request-headers-2","page":"ActivitiesApi","title":"HTTP request headers","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"ActivitiesApi/#**get*comments*by*activity*id**","page":"ActivitiesApi","title":"getcommentsbyactivityid","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"getcommentsbyactivityid(api::ActivitiesApi, id::Int64; page=nothing, perpage=nothing, pagesize=nothing, aftercursor=nothing, mediaType=nothing) -> Vector{Comment}, OpenAPI.Clients.ApiResponse <br/> getcommentsbyactivityid(api::ActivitiesApi, responsestream::Channel, id::Int64; page=nothing, perpage=nothing, pagesize=nothing, aftercursor=nothing, _mediaType=nothing) -> Channel{ Vector{Comment} }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"List Activity Comments","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.","category":"page"},{"location":"ActivitiesApi/#Required-Parameters-3","page":"ActivitiesApi","title":"Required Parameters","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Name Type Description Notes\n_api ActivitiesApi API context \nid Int64 The identifier of the activity. ","category":"page"},{"location":"ActivitiesApi/#Optional-Parameters-3","page":"ActivitiesApi","title":"Optional Parameters","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Name Type Description Notes\npage Int64 Deprecated. Prefer to use after_cursor. [default to nothing]\nper_page Int64 Deprecated. Prefer to use page_size. [default to 30]\npage_size Int64 Number of items per page. Defaults to 30. [default to 30]\nafter_cursor String Cursor of the last item in the previous page of results, used to request the subsequent page of results.  When omitted, the first page of results is fetched. [default to nothing]","category":"page"},{"location":"ActivitiesApi/#Return-type-3","page":"ActivitiesApi","title":"Return type","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Vector{Comment}","category":"page"},{"location":"ActivitiesApi/#Authorization-3","page":"ActivitiesApi","title":"Authorization","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"strava_oauth","category":"page"},{"location":"ActivitiesApi/#HTTP-request-headers-3","page":"ActivitiesApi","title":"HTTP request headers","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"ActivitiesApi/#**get*kudoers*by*activity*id**","page":"ActivitiesApi","title":"getkudoersbyactivityid","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"getkudoersbyactivityid(api::ActivitiesApi, id::Int64; page=nothing, perpage=nothing, mediaType=nothing) -> Vector{SummaryAthlete}, OpenAPI.Clients.ApiResponse <br/> getkudoersbyactivityid(api::ActivitiesApi, responsestream::Channel, id::Int64; page=nothing, perpage=nothing, _mediaType=nothing) -> Channel{ Vector{SummaryAthlete} }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"List Activity Kudoers","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.","category":"page"},{"location":"ActivitiesApi/#Required-Parameters-4","page":"ActivitiesApi","title":"Required Parameters","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Name Type Description Notes\n_api ActivitiesApi API context \nid Int64 The identifier of the activity. ","category":"page"},{"location":"ActivitiesApi/#Optional-Parameters-4","page":"ActivitiesApi","title":"Optional Parameters","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Name Type Description Notes\npage Int64 Page number. Defaults to 1. [default to nothing]\nper_page Int64 Number of items per page. Defaults to 30. [default to 30]","category":"page"},{"location":"ActivitiesApi/#Return-type-4","page":"ActivitiesApi","title":"Return type","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Vector{SummaryAthlete}","category":"page"},{"location":"ActivitiesApi/#Authorization-4","page":"ActivitiesApi","title":"Authorization","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"strava_oauth","category":"page"},{"location":"ActivitiesApi/#HTTP-request-headers-4","page":"ActivitiesApi","title":"HTTP request headers","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"ActivitiesApi/#**get*laps*by*activity*id**","page":"ActivitiesApi","title":"getlapsbyactivityid","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"getlapsbyactivityid(api::ActivitiesApi, id::Int64; _mediaType=nothing) -> Vector{Lap}, OpenAPI.Clients.ApiResponse <br/> getlapsbyactivityid(api::ActivitiesApi, response_stream::Channel, id::Int64; _mediaType=nothing) -> Channel{ Vector{Lap} }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"List Activity Laps","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.","category":"page"},{"location":"ActivitiesApi/#Required-Parameters-5","page":"ActivitiesApi","title":"Required Parameters","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Name Type Description Notes\n_api ActivitiesApi API context \nid Int64 The identifier of the activity. ","category":"page"},{"location":"ActivitiesApi/#Return-type-5","page":"ActivitiesApi","title":"Return type","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Vector{Lap}","category":"page"},{"location":"ActivitiesApi/#Authorization-5","page":"ActivitiesApi","title":"Authorization","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"strava_oauth","category":"page"},{"location":"ActivitiesApi/#HTTP-request-headers-5","page":"ActivitiesApi","title":"HTTP request headers","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"ActivitiesApi/#**get*logged*in*athlete*activities**","page":"ActivitiesApi","title":"getloggedinathleteactivities","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"getloggedinathleteactivities(api::ActivitiesApi; before=nothing, after=nothing, page=nothing, perpage=nothing, mediaType=nothing) -> Vector{SummaryActivity}, OpenAPI.Clients.ApiResponse <br/> getloggedinathleteactivities(api::ActivitiesApi, responsestream::Channel; before=nothing, after=nothing, page=nothing, perpage=nothing, _mediaType=nothing) -> Channel{ Vector{SummaryActivity} }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"List Athlete Activities","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.","category":"page"},{"location":"ActivitiesApi/#Required-Parameters-6","page":"ActivitiesApi","title":"Required Parameters","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Name Type Description Notes\n_api ActivitiesApi API context ","category":"page"},{"location":"ActivitiesApi/#Optional-Parameters-5","page":"ActivitiesApi","title":"Optional Parameters","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Name Type Description Notes\nbefore Int64 An epoch timestamp to use for filtering activities that have taken place before a certain time. [default to nothing]\nafter Int64 An epoch timestamp to use for filtering activities that have taken place after a certain time. [default to nothing]\npage Int64 Page number. Defaults to 1. [default to nothing]\nper_page Int64 Number of items per page. Defaults to 30. [default to 30]","category":"page"},{"location":"ActivitiesApi/#Return-type-6","page":"ActivitiesApi","title":"Return type","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Vector{SummaryActivity}","category":"page"},{"location":"ActivitiesApi/#Authorization-6","page":"ActivitiesApi","title":"Authorization","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"strava_oauth","category":"page"},{"location":"ActivitiesApi/#HTTP-request-headers-6","page":"ActivitiesApi","title":"HTTP request headers","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"ActivitiesApi/#**get*zones*by*activity*id**","page":"ActivitiesApi","title":"getzonesbyactivityid","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"getzonesbyactivityid(api::ActivitiesApi, id::Int64; _mediaType=nothing) -> Vector{ActivityZone}, OpenAPI.Clients.ApiResponse <br/> getzonesbyactivityid(api::ActivitiesApi, response_stream::Channel, id::Int64; _mediaType=nothing) -> Channel{ Vector{ActivityZone} }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Get Activity Zones","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.","category":"page"},{"location":"ActivitiesApi/#Required-Parameters-7","page":"ActivitiesApi","title":"Required Parameters","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Name Type Description Notes\n_api ActivitiesApi API context \nid Int64 The identifier of the activity. ","category":"page"},{"location":"ActivitiesApi/#Return-type-7","page":"ActivitiesApi","title":"Return type","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Vector{ActivityZone}","category":"page"},{"location":"ActivitiesApi/#Authorization-7","page":"ActivitiesApi","title":"Authorization","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"strava_oauth","category":"page"},{"location":"ActivitiesApi/#HTTP-request-headers-7","page":"ActivitiesApi","title":"HTTP request headers","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"ActivitiesApi/#**update*activity*by_id**","page":"ActivitiesApi","title":"updateactivityby_id","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"updateactivitybyid(api::ActivitiesApi, id::Int64; body=nothing, mediaType=nothing) -> DetailedActivity, OpenAPI.Clients.ApiResponse <br/> updateactivitybyid(api::ActivitiesApi, responsestream::Channel, id::Int64; body=nothing, _mediaType=nothing) -> Channel{ DetailedActivity }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Update Activity","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities","category":"page"},{"location":"ActivitiesApi/#Required-Parameters-8","page":"ActivitiesApi","title":"Required Parameters","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Name Type Description Notes\n_api ActivitiesApi API context \nid Int64 The identifier of the activity. ","category":"page"},{"location":"ActivitiesApi/#Optional-Parameters-6","page":"ActivitiesApi","title":"Optional Parameters","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Name Type Description Notes\nbody UpdatableActivity  ","category":"page"},{"location":"ActivitiesApi/#Return-type-8","page":"ActivitiesApi","title":"Return type","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"DetailedActivity","category":"page"},{"location":"ActivitiesApi/#Authorization-8","page":"ActivitiesApi","title":"Authorization","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"strava_oauth","category":"page"},{"location":"ActivitiesApi/#HTTP-request-headers-8","page":"ActivitiesApi","title":"HTTP request headers","text":"","category":"section"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"ActivitiesApi/","page":"ActivitiesApi","title":"ActivitiesApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"ActivityStats/#ActivityStats","page":"ActivityStats","title":"ActivityStats","text":"","category":"section"},{"location":"ActivityStats/#Properties","page":"ActivityStats","title":"Properties","text":"","category":"section"},{"location":"ActivityStats/","page":"ActivityStats","title":"ActivityStats","text":"Name Type Description Notes\nbiggestridedistance Float64 The longest distance ridden by the athlete. [optional] [default to nothing]\nbiggestclimbelevation_gain Float64 The highest climb ridden by the athlete. [optional] [default to nothing]\nrecentridetotals ***ActivityTotal**  [optional] [default to nothing]\nrecentruntotals ***ActivityTotal**  [optional] [default to nothing]\nrecentswimtotals ***ActivityTotal**  [optional] [default to nothing]\nytdridetotals ***ActivityTotal**  [optional] [default to nothing]\nytdruntotals ***ActivityTotal**  [optional] [default to nothing]\nytdswimtotals ***ActivityTotal**  [optional] [default to nothing]\nallridetotals ***ActivityTotal**  [optional] [default to nothing]\nallruntotals ***ActivityTotal**  [optional] [default to nothing]\nallswimtotals ***ActivityTotal**  [optional] [default to nothing]","category":"page"},{"location":"ActivityStats/","page":"ActivityStats","title":"ActivityStats","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"SummaryClub/#SummaryClub","page":"SummaryClub","title":"SummaryClub","text":"","category":"section"},{"location":"SummaryClub/#Properties","page":"SummaryClub","title":"Properties","text":"","category":"section"},{"location":"SummaryClub/","page":"SummaryClub","title":"SummaryClub","text":"Name Type Description Notes\nid Int64 The club&#39;s unique identifier. [optional] [default to nothing]\nresource_state Int64 Resource state, indicates level of detail. Possible values: 1 -&gt; \\&quot;meta\\&quot;, 2 -&gt; \\&quot;summary\\&quot;, 3 -&gt; \\&quot;detail\\&quot; [optional] [default to nothing]\nname String The club&#39;s name. [optional] [default to nothing]\nprofile_medium String URL to a 60x60 pixel profile picture. [optional] [default to nothing]\ncover_photo String URL to a ~1185x580 pixel cover photo. [optional] [default to nothing]\ncoverphotosmall String URL to a ~360x176  pixel cover photo. [optional] [default to nothing]\nsport_type String Deprecated. Prefer to use activity_types. [optional] [default to nothing]\nactivity_types Vector{ActivityType} The activity types that count for a club. This takes precedence over sport_type. [optional] [default to nothing]\ncity String The club&#39;s city. [optional] [default to nothing]\nstate String The club&#39;s state or geographical region. [optional] [default to nothing]\ncountry String The club&#39;s country. [optional] [default to nothing]\nprivate Bool Whether the club is private. [optional] [default to nothing]\nmember_count Int64 The club&#39;s member count. [optional] [default to nothing]\nfeatured Bool Whether the club is featured or not. [optional] [default to nothing]\nverified Bool Whether the club is verified or not. [optional] [default to nothing]\nurl String The club&#39;s vanity URL. [optional] [default to nothing]","category":"page"},{"location":"SummaryClub/","page":"SummaryClub","title":"SummaryClub","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"DetailedClub/#DetailedClub","page":"DetailedClub","title":"DetailedClub","text":"","category":"section"},{"location":"DetailedClub/#Properties","page":"DetailedClub","title":"Properties","text":"","category":"section"},{"location":"DetailedClub/","page":"DetailedClub","title":"DetailedClub","text":"Name Type Description Notes\nid Int64 The club&#39;s unique identifier. [optional] [default to nothing]\nresource_state Int64 Resource state, indicates level of detail. Possible values: 1 -&gt; \\&quot;meta\\&quot;, 2 -&gt; \\&quot;summary\\&quot;, 3 -&gt; \\&quot;detail\\&quot; [optional] [default to nothing]\nname String The club&#39;s name. [optional] [default to nothing]\nprofile_medium String URL to a 60x60 pixel profile picture. [optional] [default to nothing]\ncover_photo String URL to a ~1185x580 pixel cover photo. [optional] [default to nothing]\ncoverphotosmall String URL to a ~360x176  pixel cover photo. [optional] [default to nothing]\nsport_type String Deprecated. Prefer to use activity_types. [optional] [default to nothing]\nactivity_types Vector{ActivityType} The activity types that count for a club. This takes precedence over sport_type. [optional] [default to nothing]\ncity String The club&#39;s city. [optional] [default to nothing]\nstate String The club&#39;s state or geographical region. [optional] [default to nothing]\ncountry String The club&#39;s country. [optional] [default to nothing]\nprivate Bool Whether the club is private. [optional] [default to nothing]\nmember_count Int64 The club&#39;s member count. [optional] [default to nothing]\nfeatured Bool Whether the club is featured or not. [optional] [default to nothing]\nverified Bool Whether the club is verified or not. [optional] [default to nothing]\nurl String The club&#39;s vanity URL. [optional] [default to nothing]\nmembership String The membership status of the logged-in athlete. [optional] [default to nothing]\nadmin Bool Whether the currently logged-in athlete is an administrator of this club. [optional] [default to nothing]\nowner Bool Whether the currently logged-in athlete is the owner of this club. [optional] [default to nothing]\nfollowing_count Int64 The number of athletes in the club that the logged-in athlete follows. [optional] [default to nothing]","category":"page"},{"location":"DetailedClub/","page":"DetailedClub","title":"DetailedClub","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"CadenceStream/#CadenceStream","page":"CadenceStream","title":"CadenceStream","text":"","category":"section"},{"location":"CadenceStream/#Properties","page":"CadenceStream","title":"Properties","text":"","category":"section"},{"location":"CadenceStream/","page":"CadenceStream","title":"CadenceStream","text":"Name Type Description Notes\noriginal_size Int64 The number of data points in this stream [optional] [default to nothing]\nresolution String The level of detail (sampling) in which this stream was returned [optional] [default to nothing]\nseries_type String The base series used in the case the stream was downsampled [optional] [default to nothing]\ndata Vector{Int64} The sequence of cadence values for this stream, in rotations per minute [optional] [default to nothing]","category":"page"},{"location":"CadenceStream/","page":"CadenceStream","title":"CadenceStream","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"DetailedAthlete/#DetailedAthlete","page":"DetailedAthlete","title":"DetailedAthlete","text":"","category":"section"},{"location":"DetailedAthlete/#Properties","page":"DetailedAthlete","title":"Properties","text":"","category":"section"},{"location":"DetailedAthlete/","page":"DetailedAthlete","title":"DetailedAthlete","text":"Name Type Description Notes\nid Int64 The unique identifier of the athlete [optional] [default to nothing]\nresource_state Int64 Resource state, indicates level of detail. Possible values: 1 -&gt; \\&quot;meta\\&quot;, 2 -&gt; \\&quot;summary\\&quot;, 3 -&gt; \\&quot;detail\\&quot; [optional] [default to nothing]\nfirstname String The athlete&#39;s first name. [optional] [default to nothing]\nlastname String The athlete&#39;s last name. [optional] [default to nothing]\nprofile_medium String URL to a 62x62 pixel profile picture. [optional] [default to nothing]\nprofile String URL to a 124x124 pixel profile picture. [optional] [default to nothing]\ncity String The athlete&#39;s city. [optional] [default to nothing]\nstate String The athlete&#39;s state or geographical region. [optional] [default to nothing]\ncountry String The athlete&#39;s country. [optional] [default to nothing]\nsex String The athlete&#39;s sex. [optional] [default to nothing]\npremium Bool Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription. [optional] [default to nothing]\nsummit Bool Whether the athlete has any Summit subscription. [optional] [default to nothing]\ncreated_at ZonedDateTime The time at which the athlete was created. [optional] [default to nothing]\nupdated_at ZonedDateTime The time at which the athlete was last updated. [optional] [default to nothing]\nfollower_count Int64 The athlete&#39;s follower count. [optional] [default to nothing]\nfriend_count Int64 The athlete&#39;s friend count. [optional] [default to nothing]\nmeasurement_preference String The athlete&#39;s preferred unit system. [optional] [default to nothing]\nftp Int64 The athlete&#39;s FTP (Functional Threshold Power). [optional] [default to nothing]\nweight Float32 The athlete&#39;s weight. [optional] [default to nothing]\nclubs Vector{SummaryClub} The athlete&#39;s clubs. [optional] [default to nothing]\nbikes Vector{SummaryGear} The athlete&#39;s bikes. [optional] [default to nothing]\nshoes Vector{SummaryGear} The athlete&#39;s shoes. [optional] [default to nothing]","category":"page"},{"location":"DetailedAthlete/","page":"DetailedAthlete","title":"DetailedAthlete","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"LatLngStream/#LatLngStream","page":"LatLngStream","title":"LatLngStream","text":"","category":"section"},{"location":"LatLngStream/#Properties","page":"LatLngStream","title":"Properties","text":"","category":"section"},{"location":"LatLngStream/","page":"LatLngStream","title":"LatLngStream","text":"Name Type Description Notes\noriginal_size Int64 The number of data points in this stream [optional] [default to nothing]\nresolution String The level of detail (sampling) in which this stream was returned [optional] [default to nothing]\nseries_type String The base series used in the case the stream was downsampled [optional] [default to nothing]\ndata Vector{Vector} The sequence of lat/long values for this stream [optional] [default to nothing]","category":"page"},{"location":"LatLngStream/","page":"LatLngStream","title":"LatLngStream","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"HeartrateStream/#HeartrateStream","page":"HeartrateStream","title":"HeartrateStream","text":"","category":"section"},{"location":"HeartrateStream/#Properties","page":"HeartrateStream","title":"Properties","text":"","category":"section"},{"location":"HeartrateStream/","page":"HeartrateStream","title":"HeartrateStream","text":"Name Type Description Notes\noriginal_size Int64 The number of data points in this stream [optional] [default to nothing]\nresolution String The level of detail (sampling) in which this stream was returned [optional] [default to nothing]\nseries_type String The base series used in the case the stream was downsampled [optional] [default to nothing]\ndata Vector{Int64} The sequence of heart rate values for this stream, in beats per minute [optional] [default to nothing]","category":"page"},{"location":"HeartrateStream/","page":"HeartrateStream","title":"HeartrateStream","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"Upload/#Upload","page":"Upload","title":"Upload","text":"","category":"section"},{"location":"Upload/#Properties","page":"Upload","title":"Properties","text":"","category":"section"},{"location":"Upload/","page":"Upload","title":"Upload","text":"Name Type Description Notes\nid Int64 The unique identifier of the upload [optional] [default to nothing]\nid_str String The unique identifier of the upload in string format [optional] [default to nothing]\nexternal_id String The external identifier of the upload [optional] [default to nothing]\nerror String The error associated with this upload [optional] [default to nothing]\nstatus String The status of this upload [optional] [default to nothing]\nactivity_id Int64 The identifier of the activity this upload resulted into [optional] [default to nothing]","category":"page"},{"location":"Upload/","page":"Upload","title":"Upload","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"Error/#Error","page":"Error","title":"Error","text":"","category":"section"},{"location":"Error/#Properties","page":"Error","title":"Properties","text":"","category":"section"},{"location":"Error/","page":"Error","title":"Error","text":"Name Type Description Notes\ncode String The code associated with this error. [optional] [default to nothing]\nfield String The specific field or aspect of the resource associated with this error. [optional] [default to nothing]\nresource String The type of resource associated with this error. [optional] [default to nothing]","category":"page"},{"location":"Error/","page":"Error","title":"Error","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"ClubAthlete/#ClubAthlete","page":"ClubAthlete","title":"ClubAthlete","text":"","category":"section"},{"location":"ClubAthlete/#Properties","page":"ClubAthlete","title":"Properties","text":"","category":"section"},{"location":"ClubAthlete/","page":"ClubAthlete","title":"ClubAthlete","text":"Name Type Description Notes\nresource_state Int64 Resource state, indicates level of detail. Possible values: 1 -&gt; \\&quot;meta\\&quot;, 2 -&gt; \\&quot;summary\\&quot;, 3 -&gt; \\&quot;detail\\&quot; [optional] [default to nothing]\nfirstname String The athlete&#39;s first name. [optional] [default to nothing]\nlastname String The athlete&#39;s last initial. [optional] [default to nothing]\nmember String The athlete&#39;s member status. [optional] [default to nothing]\nadmin Bool Whether the athlete is a club admin. [optional] [default to nothing]\nowner Bool Whether the athlete is club owner. [optional] [default to nothing]","category":"page"},{"location":"ClubAthlete/","page":"ClubAthlete","title":"ClubAthlete","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"PowerStream/#PowerStream","page":"PowerStream","title":"PowerStream","text":"","category":"section"},{"location":"PowerStream/#Properties","page":"PowerStream","title":"Properties","text":"","category":"section"},{"location":"PowerStream/","page":"PowerStream","title":"PowerStream","text":"Name Type Description Notes\noriginal_size Int64 The number of data points in this stream [optional] [default to nothing]\nresolution String The level of detail (sampling) in which this stream was returned [optional] [default to nothing]\nseries_type String The base series used in the case the stream was downsampled [optional] [default to nothing]\ndata Vector{Int64} The sequence of power values for this stream, in watts [optional] [default to nothing]","category":"page"},{"location":"PowerStream/","page":"PowerStream","title":"PowerStream","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"ExplorerSegment/#ExplorerSegment","page":"ExplorerSegment","title":"ExplorerSegment","text":"","category":"section"},{"location":"ExplorerSegment/#Properties","page":"ExplorerSegment","title":"Properties","text":"","category":"section"},{"location":"ExplorerSegment/","page":"ExplorerSegment","title":"ExplorerSegment","text":"Name Type Description Notes\nid Int64 The unique identifier of this segment [optional] [default to nothing]\nname String The name of this segment [optional] [default to nothing]\nclimb_category Int64 The category of the climb [0, 5]. Higher is harder ie. 5 is Hors cat√©gorie, 0 is uncategorized in climbcategory. If climbcategory &#x3D; 5, climbcategorydesc &#x3D; HC. If climbcategory &#x3D; 2, climbcategory_desc &#x3D; 3. [optional] [default to nothing]\nclimbcategorydesc String The description for the category of the climb [optional] [default to nothing]\navg_grade Float32 The segment&#39;s average grade, in percents [optional] [default to nothing]\nstart_latlng Vector{Float32} A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. [optional] [default to nothing]\nend_latlng Vector{Float32} A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. [optional] [default to nothing]\nelev_difference Float32 The segments&#39;s evelation difference, in meters [optional] [default to nothing]\ndistance Float32 The segment&#39;s distance, in meters [optional] [default to nothing]\npoints String The polyline of the segment [optional] [default to nothing]","category":"page"},{"location":"ExplorerSegment/","page":"ExplorerSegment","title":"ExplorerSegment","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"GearsApi/#GearsApi","page":"GearsApi","title":"GearsApi","text":"","category":"section"},{"location":"GearsApi/","page":"GearsApi","title":"GearsApi","text":"All URIs are relative to https://www.strava.com/api/v3","category":"page"},{"location":"GearsApi/","page":"GearsApi","title":"GearsApi","text":"Method HTTP request Description\ngetgearby_id GET /gear/{id} Get Equipment","category":"page"},{"location":"GearsApi/#**get*gear*by_id**","page":"GearsApi","title":"getgearby_id","text":"","category":"section"},{"location":"GearsApi/","page":"GearsApi","title":"GearsApi","text":"getgearbyid(api::GearsApi, id::String; mediaType=nothing) -> DetailedGear, OpenAPI.Clients.ApiResponse <br/> getgearbyid(api::GearsApi, responsestream::Channel, id::String; _mediaType=nothing) -> Channel{ DetailedGear }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"GearsApi/","page":"GearsApi","title":"GearsApi","text":"Get Equipment","category":"page"},{"location":"GearsApi/","page":"GearsApi","title":"GearsApi","text":"Returns an equipment using its identifier.","category":"page"},{"location":"GearsApi/#Required-Parameters","page":"GearsApi","title":"Required Parameters","text":"","category":"section"},{"location":"GearsApi/","page":"GearsApi","title":"GearsApi","text":"Name Type Description Notes\n_api GearsApi API context \nid String The identifier of the gear. ","category":"page"},{"location":"GearsApi/#Return-type","page":"GearsApi","title":"Return type","text":"","category":"section"},{"location":"GearsApi/","page":"GearsApi","title":"GearsApi","text":"DetailedGear","category":"page"},{"location":"GearsApi/#Authorization","page":"GearsApi","title":"Authorization","text":"","category":"section"},{"location":"GearsApi/","page":"GearsApi","title":"GearsApi","text":"strava_oauth","category":"page"},{"location":"GearsApi/#HTTP-request-headers","page":"GearsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"GearsApi/","page":"GearsApi","title":"GearsApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"GearsApi/","page":"GearsApi","title":"GearsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"ActivityTotal/#ActivityTotal","page":"ActivityTotal","title":"ActivityTotal","text":"","category":"section"},{"location":"ActivityTotal/#Properties","page":"ActivityTotal","title":"Properties","text":"","category":"section"},{"location":"ActivityTotal/","page":"ActivityTotal","title":"ActivityTotal","text":"Name Type Description Notes\ncount Int64 The number of activities considered in this total. [optional] [default to nothing]\ndistance Float32 The total distance covered by the considered activities. [optional] [default to nothing]\nmoving_time Int64 The total moving time of the considered activities. [optional] [default to nothing]\nelapsed_time Int64 The total elapsed time of the considered activities. [optional] [default to nothing]\nelevation_gain Float32 The total elevation gain of the considered activities. [optional] [default to nothing]\nachievement_count Int64 The total number of achievements of the considered activities. [optional] [default to nothing]","category":"page"},{"location":"ActivityTotal/","page":"ActivityTotal","title":"ActivityTotal","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"PhotosSummaryPrimary/#PhotosSummaryPrimary","page":"PhotosSummaryPrimary","title":"PhotosSummaryPrimary","text":"","category":"section"},{"location":"PhotosSummaryPrimary/#Properties","page":"PhotosSummaryPrimary","title":"Properties","text":"","category":"section"},{"location":"PhotosSummaryPrimary/","page":"PhotosSummaryPrimary","title":"PhotosSummaryPrimary","text":"Name Type Description Notes\nid Int64  [optional] [default to nothing]\nsource Int64  [optional] [default to nothing]\nunique_id String  [optional] [default to nothing]\nurls Dict{String, String}  [optional] [default to nothing]","category":"page"},{"location":"PhotosSummaryPrimary/","page":"PhotosSummaryPrimary","title":"PhotosSummaryPrimary","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"DetailedSegmentEffort/#DetailedSegmentEffort","page":"DetailedSegmentEffort","title":"DetailedSegmentEffort","text":"","category":"section"},{"location":"DetailedSegmentEffort/#Properties","page":"DetailedSegmentEffort","title":"Properties","text":"","category":"section"},{"location":"DetailedSegmentEffort/","page":"DetailedSegmentEffort","title":"DetailedSegmentEffort","text":"Name Type Description Notes\nid Int64 The unique identifier of this effort [optional] [default to nothing]\nactivity_id Int64 The unique identifier of the activity related to this effort [optional] [default to nothing]\nelapsed_time Int64 The effort&#39;s elapsed time [optional] [default to nothing]\nstart_date ZonedDateTime The time at which the effort was started. [optional] [default to nothing]\nstartdatelocal ZonedDateTime The time at which the effort was started in the local timezone. [optional] [default to nothing]\ndistance Float32 The effort&#39;s distance in meters [optional] [default to nothing]\nis_kom Bool Whether this effort is the current best on the leaderboard [optional] [default to nothing]\nname String The name of the segment on which this effort was performed [optional] [default to nothing]\nactivity ***MetaActivity**  [optional] [default to nothing]\nathlete ***MetaAthlete**  [optional] [default to nothing]\nmoving_time Int64 The effort&#39;s moving time [optional] [default to nothing]\nstart_index Int64 The start index of this effort in its activity&#39;s stream [optional] [default to nothing]\nend_index Int64 The end index of this effort in its activity&#39;s stream [optional] [default to nothing]\naverage_cadence Float32 The effort&#39;s average cadence [optional] [default to nothing]\naverage_watts Float32 The average wattage of this effort [optional] [default to nothing]\ndevice_watts Bool For riding efforts, whether the wattage was reported by a dedicated recording device [optional] [default to nothing]\naverage_heartrate Float32 The heart heart rate of the athlete during this effort [optional] [default to nothing]\nmax_heartrate Float32 The maximum heart rate of the athlete during this effort [optional] [default to nothing]\nsegment ***SummarySegment**  [optional] [default to nothing]\nkom_rank Int64 The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload [optional] [default to nothing]\npr_rank Int64 The rank of the effort on the athlete&#39;s leaderboard if it belongs in the top 3 at the time of upload [optional] [default to nothing]\nhidden Bool Whether this effort should be hidden when viewed within an activity [optional] [default to nothing]","category":"page"},{"location":"DetailedSegmentEffort/","page":"DetailedSegmentEffort","title":"DetailedSegmentEffort","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"PowerZoneRanges/#PowerZoneRanges","page":"PowerZoneRanges","title":"PowerZoneRanges","text":"","category":"section"},{"location":"PowerZoneRanges/#Properties","page":"PowerZoneRanges","title":"Properties","text":"","category":"section"},{"location":"PowerZoneRanges/","page":"PowerZoneRanges","title":"PowerZoneRanges","text":"Name Type Description Notes\nzones Vector{ZoneRange}  [optional] [default to nothing]","category":"page"},{"location":"PowerZoneRanges/","page":"PowerZoneRanges","title":"PowerZoneRanges","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"UploadsApi/#UploadsApi","page":"UploadsApi","title":"UploadsApi","text":"","category":"section"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"All URIs are relative to https://www.strava.com/api/v3","category":"page"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"Method HTTP request Description\ncreate_upload POST /uploads Upload Activity\ngetuploadby_id GET /uploads/{uploadId} Get Upload","category":"page"},{"location":"UploadsApi/#**create_upload**","page":"UploadsApi","title":"create_upload","text":"","category":"section"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"createupload(api::UploadsApi; file=nothing, name=nothing, description=nothing, trainer=nothing, commute=nothing, datatype=nothing, externalid=nothing, mediaType=nothing) -> Upload, OpenAPI.Clients.ApiResponse <br/> createupload(api::UploadsApi, responsestream::Channel; file=nothing, name=nothing, description=nothing, trainer=nothing, commute=nothing, datatype=nothing, externalid=nothing, _mediaType=nothing) -> Channel{ Upload }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"Upload Activity","category":"page"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"Uploads a new data file to create an activity from. Requires activity:write scope.","category":"page"},{"location":"UploadsApi/#Required-Parameters","page":"UploadsApi","title":"Required Parameters","text":"","category":"section"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"Name Type Description Notes\n_api UploadsApi API context ","category":"page"},{"location":"UploadsApi/#Optional-Parameters","page":"UploadsApi","title":"Optional Parameters","text":"","category":"section"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"Name Type Description Notes\nfile String The uploaded file. \nname String The desired name of the resulting activity. [default to nothing]\ndescription String The desired description of the resulting activity. [default to nothing]\ntrainer String Whether the resulting activity should be marked as having been performed on a trainer. [default to nothing]\ncommute String Whether the resulting activity should be tagged as a commute. [default to nothing]\ndata_type String The format of the uploaded file. [default to nothing]\nexternal_id String The desired external identifier of the resulting activity. [default to nothing]","category":"page"},{"location":"UploadsApi/#Return-type","page":"UploadsApi","title":"Return type","text":"","category":"section"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"Upload","category":"page"},{"location":"UploadsApi/#Authorization","page":"UploadsApi","title":"Authorization","text":"","category":"section"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"strava_oauth","category":"page"},{"location":"UploadsApi/#HTTP-request-headers","page":"UploadsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"Content-Type: multipart/form-data\nAccept: application/json","category":"page"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"UploadsApi/#**get*upload*by_id**","page":"UploadsApi","title":"getuploadby_id","text":"","category":"section"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"getuploadbyid(api::UploadsApi, uploadid::Int64; _mediaType=nothing) -> Upload, OpenAPI.Clients.ApiResponse <br/> getuploadbyid(api::UploadsApi, responsestream::Channel, upload_id::Int64; _mediaType=nothing) -> Channel{ Upload }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"Get Upload","category":"page"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"Returns an upload for a given identifier. Requires activity:write scope.","category":"page"},{"location":"UploadsApi/#Required-Parameters-2","page":"UploadsApi","title":"Required Parameters","text":"","category":"section"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"Name Type Description Notes\n_api UploadsApi API context \nupload_id Int64 The identifier of the upload. ","category":"page"},{"location":"UploadsApi/#Return-type-2","page":"UploadsApi","title":"Return type","text":"","category":"section"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"Upload","category":"page"},{"location":"UploadsApi/#Authorization-2","page":"UploadsApi","title":"Authorization","text":"","category":"section"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"strava_oauth","category":"page"},{"location":"UploadsApi/#HTTP-request-headers-2","page":"UploadsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"UploadsApi/","page":"UploadsApi","title":"UploadsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"#StravaAPI","page":"Home","title":"StravaAPI","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package interfaces you to Strava through its API.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Package code was generated at: UTC 2025-04-01T17:32:36.883","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install the package via:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add StravaAPI","category":"page"},{"location":"#Authentication","page":"Home","title":"Authentication","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Please note that setting up the authorization is not provided by this package. You can read about it in Strava's documentation.","category":"page"},{"location":"#Usage-example","page":"Home","title":"Usage example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"With a valid access_token (see above), you can get the logged in athlete (get_logged_in_athlete):","category":"page"},{"location":"","page":"Home","title":"Home","text":"using OpenAPI\nusing OpenAPI.Clients\nimport OpenAPI.Clients: Client, set_header\nclient = Client(\"https://www.strava.com/api/v3\")\nset_header(client, \"Authorization\", \"Bearer $access_token\")\napi = StravaAPI.AthletesApi(client)\nathlete, api_resp = get_logged_in_athlete(api)","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The documentation includes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Julia code docstrings: Julia docstrings\nOpenAPI generated Readme (ignore the installation instructions): Julia API client for StravaAPI\nOpenAPI generated API documentation: below the API section","category":"page"},{"location":"HeartRateZoneRanges/#HeartRateZoneRanges","page":"HeartRateZoneRanges","title":"HeartRateZoneRanges","text":"","category":"section"},{"location":"HeartRateZoneRanges/#Properties","page":"HeartRateZoneRanges","title":"Properties","text":"","category":"section"},{"location":"HeartRateZoneRanges/","page":"HeartRateZoneRanges","title":"HeartRateZoneRanges","text":"Name Type Description Notes\ncustom_zones Bool Whether the athlete has set their own custom heart rate zones [optional] [default to nothing]\nzones Vector{ZoneRange}  [optional] [default to nothing]","category":"page"},{"location":"HeartRateZoneRanges/","page":"HeartRateZoneRanges","title":"HeartRateZoneRanges","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"MetaAthlete/#MetaAthlete","page":"MetaAthlete","title":"MetaAthlete","text":"","category":"section"},{"location":"MetaAthlete/#Properties","page":"MetaAthlete","title":"Properties","text":"","category":"section"},{"location":"MetaAthlete/","page":"MetaAthlete","title":"MetaAthlete","text":"Name Type Description Notes\nid Int64 The unique identifier of the athlete [optional] [default to nothing]","category":"page"},{"location":"MetaAthlete/","page":"MetaAthlete","title":"MetaAthlete","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"StreamsApi/#StreamsApi","page":"StreamsApi","title":"StreamsApi","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"All URIs are relative to https://www.strava.com/api/v3","category":"page"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Method HTTP request Description\ngetactivitystreams GET /activities/{id}/streams Get Activity Streams\ngetroutestreams GET /routes/{id}/streams Get Route Streams\ngetsegmenteffort_streams GET /segment_efforts/{id}/streams Get Segment Effort Streams\ngetsegmentstreams GET /segments/{id}/streams Get Segment Streams","category":"page"},{"location":"StreamsApi/#**get*activity*streams**","page":"StreamsApi","title":"getactivitystreams","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"getactivitystreams(api::StreamsApi, id::Int64, keys::Vector{String}, keybytype::Bool; _mediaType=nothing) -> StreamSet, OpenAPI.Clients.ApiResponse <br/> getactivitystreams(api::StreamsApi, responsestream::Channel, id::Int64, keys::Vector{String}, keyby_type::Bool; _mediaType=nothing) -> Channel{ StreamSet }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Get Activity Streams","category":"page"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Returns the given activity's streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.","category":"page"},{"location":"StreamsApi/#Required-Parameters","page":"StreamsApi","title":"Required Parameters","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Name Type Description Notes\n_api StreamsApi API context \nid Int64 The identifier of the activity. \nkeys Vector{String} Desired stream types. \nkeybytype Bool Must be true. ","category":"page"},{"location":"StreamsApi/#Return-type","page":"StreamsApi","title":"Return type","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"StreamSet","category":"page"},{"location":"StreamsApi/#Authorization","page":"StreamsApi","title":"Authorization","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"strava_oauth","category":"page"},{"location":"StreamsApi/#HTTP-request-headers","page":"StreamsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"StreamsApi/#**get*route*streams**","page":"StreamsApi","title":"getroutestreams","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"getroutestreams(api::StreamsApi, id::Int64; _mediaType=nothing) -> StreamSet, OpenAPI.Clients.ApiResponse <br/> getroutestreams(api::StreamsApi, response_stream::Channel, id::Int64; _mediaType=nothing) -> Channel{ StreamSet }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Get Route Streams","category":"page"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Returns the given route's streams. Requires read_all scope for private routes.","category":"page"},{"location":"StreamsApi/#Required-Parameters-2","page":"StreamsApi","title":"Required Parameters","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Name Type Description Notes\n_api StreamsApi API context \nid Int64 The identifier of the route. ","category":"page"},{"location":"StreamsApi/#Return-type-2","page":"StreamsApi","title":"Return type","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"StreamSet","category":"page"},{"location":"StreamsApi/#Authorization-2","page":"StreamsApi","title":"Authorization","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"strava_oauth","category":"page"},{"location":"StreamsApi/#HTTP-request-headers-2","page":"StreamsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"StreamsApi/#**get*segment*effort_streams**","page":"StreamsApi","title":"getsegmenteffort_streams","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"getsegmenteffortstreams(api::StreamsApi, id::Int64, keys::Vector{String}, keybytype::Bool; mediaType=nothing) -> StreamSet, OpenAPI.Clients.ApiResponse <br/> getsegmenteffortstreams(api::StreamsApi, responsestream::Channel, id::Int64, keys::Vector{String}, keybytype::Bool; _mediaType=nothing) -> Channel{ StreamSet }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Get Segment Effort Streams","category":"page"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.","category":"page"},{"location":"StreamsApi/#Required-Parameters-3","page":"StreamsApi","title":"Required Parameters","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Name Type Description Notes\n_api StreamsApi API context \nid Int64 The identifier of the segment effort. \nkeys Vector{String} The types of streams to return. \nkeybytype Bool Must be true. ","category":"page"},{"location":"StreamsApi/#Return-type-3","page":"StreamsApi","title":"Return type","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"StreamSet","category":"page"},{"location":"StreamsApi/#Authorization-3","page":"StreamsApi","title":"Authorization","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"strava_oauth","category":"page"},{"location":"StreamsApi/#HTTP-request-headers-3","page":"StreamsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"StreamsApi/#**get*segment*streams**","page":"StreamsApi","title":"getsegmentstreams","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"getsegmentstreams(api::StreamsApi, id::Int64, keys::Vector{String}, keybytype::Bool; _mediaType=nothing) -> StreamSet, OpenAPI.Clients.ApiResponse <br/> getsegmentstreams(api::StreamsApi, responsestream::Channel, id::Int64, keys::Vector{String}, keyby_type::Bool; _mediaType=nothing) -> Channel{ StreamSet }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Get Segment Streams","category":"page"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Returns the given segment's streams. Requires read_all scope for private segments.","category":"page"},{"location":"StreamsApi/#Required-Parameters-4","page":"StreamsApi","title":"Required Parameters","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Name Type Description Notes\n_api StreamsApi API context \nid Int64 The identifier of the segment. \nkeys Vector{String} The types of streams to return. \nkeybytype Bool Must be true. ","category":"page"},{"location":"StreamsApi/#Return-type-4","page":"StreamsApi","title":"Return type","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"StreamSet","category":"page"},{"location":"StreamsApi/#Authorization-4","page":"StreamsApi","title":"Authorization","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"strava_oauth","category":"page"},{"location":"StreamsApi/#HTTP-request-headers-4","page":"StreamsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"StreamsApi/","page":"StreamsApi","title":"StreamsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"AthletesApi/#AthletesApi","page":"AthletesApi","title":"AthletesApi","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"All URIs are relative to https://www.strava.com/api/v3","category":"page"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"Method HTTP request Description\ngetloggedin_athlete GET /athlete Get Authenticated Athlete\ngetloggedinathletezones GET /athlete/zones Get Zones\nget_stats GET /athletes/{id}/stats Get Athlete Stats\nupdateloggedin_athlete PUT /athlete Update Athlete","category":"page"},{"location":"AthletesApi/#**get*logged*in_athlete**","page":"AthletesApi","title":"getloggedin_athlete","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"getloggedinathlete(api::AthletesApi; mediaType=nothing) -> DetailedAthlete, OpenAPI.Clients.ApiResponse <br/> getloggedinathlete(api::AthletesApi, responsestream::Channel; _mediaType=nothing) -> Channel{ DetailedAthlete }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"Get Authenticated Athlete","category":"page"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.","category":"page"},{"location":"AthletesApi/#Required-Parameters","page":"AthletesApi","title":"Required Parameters","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"This endpoint does not need any parameter.","category":"page"},{"location":"AthletesApi/#Return-type","page":"AthletesApi","title":"Return type","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"DetailedAthlete","category":"page"},{"location":"AthletesApi/#Authorization","page":"AthletesApi","title":"Authorization","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"strava_oauth","category":"page"},{"location":"AthletesApi/#HTTP-request-headers","page":"AthletesApi","title":"HTTP request headers","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"AthletesApi/#**get*logged*in*athlete*zones**","page":"AthletesApi","title":"getloggedinathletezones","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"getloggedinathletezones(api::AthletesApi; _mediaType=nothing) -> Zones, OpenAPI.Clients.ApiResponse <br/> getloggedinathletezones(api::AthletesApi, response_stream::Channel; _mediaType=nothing) -> Channel{ Zones }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"Get Zones","category":"page"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"Returns the the authenticated athlete's heart rate and power zones. Requires profile:read_all.","category":"page"},{"location":"AthletesApi/#Required-Parameters-2","page":"AthletesApi","title":"Required Parameters","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"This endpoint does not need any parameter.","category":"page"},{"location":"AthletesApi/#Return-type-2","page":"AthletesApi","title":"Return type","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"Zones","category":"page"},{"location":"AthletesApi/#Authorization-2","page":"AthletesApi","title":"Authorization","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"strava_oauth","category":"page"},{"location":"AthletesApi/#HTTP-request-headers-2","page":"AthletesApi","title":"HTTP request headers","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"AthletesApi/#**get_stats**","page":"AthletesApi","title":"get_stats","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"getstats(api::AthletesApi, id::Int64; mediaType=nothing) -> ActivityStats, OpenAPI.Clients.ApiResponse <br/> getstats(api::AthletesApi, responsestream::Channel, id::Int64; _mediaType=nothing) -> Channel{ ActivityStats }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"Get Athlete Stats","category":"page"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.","category":"page"},{"location":"AthletesApi/#Required-Parameters-3","page":"AthletesApi","title":"Required Parameters","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"Name Type Description Notes\n_api AthletesApi API context \nid Int64 The identifier of the athlete. Must match the authenticated athlete. ","category":"page"},{"location":"AthletesApi/#Return-type-3","page":"AthletesApi","title":"Return type","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"ActivityStats","category":"page"},{"location":"AthletesApi/#Authorization-3","page":"AthletesApi","title":"Authorization","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"strava_oauth","category":"page"},{"location":"AthletesApi/#HTTP-request-headers-3","page":"AthletesApi","title":"HTTP request headers","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"AthletesApi/#**update*logged*in_athlete**","page":"AthletesApi","title":"updateloggedin_athlete","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"updateloggedinathlete(api::AthletesApi, weight::Float32; mediaType=nothing) -> DetailedAthlete, OpenAPI.Clients.ApiResponse <br/> updateloggedinathlete(api::AthletesApi, responsestream::Channel, weight::Float32; _mediaType=nothing) -> Channel{ DetailedAthlete }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"Update Athlete","category":"page"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"Update the currently authenticated athlete. Requires profile:write scope.","category":"page"},{"location":"AthletesApi/#Required-Parameters-4","page":"AthletesApi","title":"Required Parameters","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"Name Type Description Notes\n_api AthletesApi API context \nweight Float32 The weight of the athlete in kilograms. ","category":"page"},{"location":"AthletesApi/#Return-type-4","page":"AthletesApi","title":"Return type","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"DetailedAthlete","category":"page"},{"location":"AthletesApi/#Authorization-4","page":"AthletesApi","title":"Authorization","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"strava_oauth","category":"page"},{"location":"AthletesApi/#HTTP-request-headers-4","page":"AthletesApi","title":"HTTP request headers","text":"","category":"section"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"AthletesApi/","page":"AthletesApi","title":"AthletesApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"SummarySegment/#SummarySegment","page":"SummarySegment","title":"SummarySegment","text":"","category":"section"},{"location":"SummarySegment/#Properties","page":"SummarySegment","title":"Properties","text":"","category":"section"},{"location":"SummarySegment/","page":"SummarySegment","title":"SummarySegment","text":"Name Type Description Notes\nid Int64 The unique identifier of this segment [optional] [default to nothing]\nname String The name of this segment [optional] [default to nothing]\nactivity_type String  [optional] [default to nothing]\ndistance Float32 The segment&#39;s distance, in meters [optional] [default to nothing]\naverage_grade Float32 The segment&#39;s average grade, in percents [optional] [default to nothing]\nmaximum_grade Float32 The segments&#39;s maximum grade, in percents [optional] [default to nothing]\nelevation_high Float32 The segments&#39;s highest elevation, in meters [optional] [default to nothing]\nelevation_low Float32 The segments&#39;s lowest elevation, in meters [optional] [default to nothing]\nstart_latlng Vector{Float32} A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. [optional] [default to nothing]\nend_latlng Vector{Float32} A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. [optional] [default to nothing]\nclimb_category Int64 The category of the climb [0, 5]. Higher is harder ie. 5 is Hors cat√©gorie, 0 is uncategorized in climb_category. [optional] [default to nothing]\ncity String The segments&#39;s city. [optional] [default to nothing]\nstate String The segments&#39;s state or geographical region. [optional] [default to nothing]\ncountry String The segment&#39;s country. [optional] [default to nothing]\nprivate Bool Whether this segment is private. [optional] [default to nothing]\nathletepreffort ***SummaryPRSegmentEffort**  [optional] [default to nothing]\nathletesegmentstats ***SummarySegmentEffort**  [optional] [default to nothing]","category":"page"},{"location":"SummarySegment/","page":"SummarySegment","title":"SummarySegment","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"docstrings/","page":"Julia docstrings","title":"Julia docstrings","text":"CurrentModule = StravaAPI","category":"page"},{"location":"docstrings/#Julia-docstrings","page":"Julia docstrings","title":"Julia docstrings","text":"","category":"section"},{"location":"docstrings/","page":"Julia docstrings","title":"Julia docstrings","text":"Julia function docstrings (from source code).","category":"page"},{"location":"docstrings/","page":"Julia docstrings","title":"Julia docstrings","text":"","category":"page"},{"location":"docstrings/","page":"Julia docstrings","title":"Julia docstrings","text":"Modules = [StravaAPI]","category":"page"},{"location":"docstrings/#StravaAPI.ActivityStats","page":"Julia docstrings","title":"StravaAPI.ActivityStats","text":"ActivityStats A set of rolled-up statistics and totals for an athlete\n\nActivityStats(;\n    biggest_ride_distance=nothing,\n    biggest_climb_elevation_gain=nothing,\n    recent_ride_totals=nothing,\n    recent_run_totals=nothing,\n    recent_swim_totals=nothing,\n    ytd_ride_totals=nothing,\n    ytd_run_totals=nothing,\n    ytd_swim_totals=nothing,\n    all_ride_totals=nothing,\n    all_run_totals=nothing,\n    all_swim_totals=nothing,\n)\n\n- biggest_ride_distance::Float64 : The longest distance ridden by the athlete.\n- biggest_climb_elevation_gain::Float64 : The highest climb ridden by the athlete.\n- recent_ride_totals::ActivityTotal\n- recent_run_totals::ActivityTotal\n- recent_swim_totals::ActivityTotal\n- ytd_ride_totals::ActivityTotal\n- ytd_run_totals::ActivityTotal\n- ytd_swim_totals::ActivityTotal\n- all_ride_totals::ActivityTotal\n- all_run_totals::ActivityTotal\n- all_swim_totals::ActivityTotal\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.ActivityTotal","page":"Julia docstrings","title":"StravaAPI.ActivityTotal","text":"ActivityTotal A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.\n\nActivityTotal(;\n    count=nothing,\n    distance=nothing,\n    moving_time=nothing,\n    elapsed_time=nothing,\n    elevation_gain=nothing,\n    achievement_count=nothing,\n)\n\n- count::Int64 : The number of activities considered in this total.\n- distance::Float32 : The total distance covered by the considered activities.\n- moving_time::Int64 : The total moving time of the considered activities.\n- elapsed_time::Int64 : The total elapsed time of the considered activities.\n- elevation_gain::Float32 : The total elevation gain of the considered activities.\n- achievement_count::Int64 : The total number of achievements of the considered activities.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.ActivityZone","page":"Julia docstrings","title":"StravaAPI.ActivityZone","text":"ActivityZone\n\nActivityZone(;\n    score=nothing,\n    distribution_buckets=nothing,\n    type=nothing,\n    sensor_based=nothing,\n    points=nothing,\n    custom_zones=nothing,\n    max=nothing,\n)\n\n- score::Int64\n- distribution_buckets::Vector{TimedZoneRange} : Stores the exclusive ranges representing zones and the time spent in each.\n- type::String\n- sensor_based::Bool\n- points::Int64\n- custom_zones::Bool\n- max::Int64\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.AltitudeStream","page":"Julia docstrings","title":"StravaAPI.AltitudeStream","text":"AltitudeStream\n\nAltitudeStream(;\n    original_size=nothing,\n    resolution=nothing,\n    series_type=nothing,\n    data=nothing,\n)\n\n- original_size::Int64 : The number of data points in this stream\n- resolution::String : The level of detail (sampling) in which this stream was returned\n- series_type::String : The base series used in the case the stream was downsampled\n- data::Vector{Float32} : The sequence of altitude values for this stream, in meters\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.BaseStream","page":"Julia docstrings","title":"StravaAPI.BaseStream","text":"BaseStream\n\nBaseStream(;\n    original_size=nothing,\n    resolution=nothing,\n    series_type=nothing,\n)\n\n- original_size::Int64 : The number of data points in this stream\n- resolution::String : The level of detail (sampling) in which this stream was returned\n- series_type::String : The base series used in the case the stream was downsampled\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.CadenceStream","page":"Julia docstrings","title":"StravaAPI.CadenceStream","text":"CadenceStream\n\nCadenceStream(;\n    original_size=nothing,\n    resolution=nothing,\n    series_type=nothing,\n    data=nothing,\n)\n\n- original_size::Int64 : The number of data points in this stream\n- resolution::String : The level of detail (sampling) in which this stream was returned\n- series_type::String : The base series used in the case the stream was downsampled\n- data::Vector{Int64} : The sequence of cadence values for this stream, in rotations per minute\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.ClubActivity","page":"Julia docstrings","title":"StravaAPI.ClubActivity","text":"ClubActivity\n\nClubActivity(;\n    athlete=nothing,\n    name=nothing,\n    distance=nothing,\n    moving_time=nothing,\n    elapsed_time=nothing,\n    total_elevation_gain=nothing,\n    type=nothing,\n    sport_type=nothing,\n    workout_type=nothing,\n)\n\n- athlete::MetaAthlete\n- name::String : The name of the activity\n- distance::Float32 : The activity&#39;s distance, in meters\n- moving_time::Int64 : The activity&#39;s moving time, in seconds\n- elapsed_time::Int64 : The activity&#39;s elapsed time, in seconds\n- total_elevation_gain::Float32 : The activity&#39;s total elevation gain.\n- type::ActivityType\n- sport_type::SportType\n- workout_type::Int64 : The activity&#39;s workout type\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.ClubAthlete","page":"Julia docstrings","title":"StravaAPI.ClubAthlete","text":"ClubAthlete\n\nClubAthlete(;\n    resource_state=nothing,\n    firstname=nothing,\n    lastname=nothing,\n    member=nothing,\n    admin=nothing,\n    owner=nothing,\n)\n\n- resource_state::Int64 : Resource state, indicates level of detail. Possible values: 1 -&gt; \\&quot;meta\\&quot;, 2 -&gt; \\&quot;summary\\&quot;, 3 -&gt; \\&quot;detail\\&quot;\n- firstname::String : The athlete&#39;s first name.\n- lastname::String : The athlete&#39;s last initial.\n- member::String : The athlete&#39;s member status.\n- admin::Bool : Whether the athlete is a club admin.\n- owner::Bool : Whether the athlete is club owner.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.Comment","page":"Julia docstrings","title":"StravaAPI.Comment","text":"Comment\n\nComment(;\n    id=nothing,\n    activity_id=nothing,\n    text=nothing,\n    athlete=nothing,\n    created_at=nothing,\n)\n\n- id::Int64 : The unique identifier of this comment\n- activity_id::Int64 : The identifier of the activity this comment is related to\n- text::String : The content of the comment\n- athlete::SummaryAthlete\n- created_at::ZonedDateTime : The time at which this comment was created.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.DetailedActivity","page":"Julia docstrings","title":"StravaAPI.DetailedActivity","text":"DetailedActivity\n\nDetailedActivity(;\n    id=nothing,\n    external_id=nothing,\n    upload_id=nothing,\n    athlete=nothing,\n    name=nothing,\n    distance=nothing,\n    moving_time=nothing,\n    elapsed_time=nothing,\n    total_elevation_gain=nothing,\n    elev_high=nothing,\n    elev_low=nothing,\n    type=nothing,\n    sport_type=nothing,\n    start_date=nothing,\n    start_date_local=nothing,\n    timezone=nothing,\n    start_latlng=nothing,\n    end_latlng=nothing,\n    achievement_count=nothing,\n    kudos_count=nothing,\n    comment_count=nothing,\n    athlete_count=nothing,\n    photo_count=nothing,\n    total_photo_count=nothing,\n    map=nothing,\n    trainer=nothing,\n    commute=nothing,\n    manual=nothing,\n    private=nothing,\n    flagged=nothing,\n    workout_type=nothing,\n    upload_id_str=nothing,\n    average_speed=nothing,\n    max_speed=nothing,\n    has_kudoed=nothing,\n    hide_from_home=nothing,\n    gear_id=nothing,\n    kilojoules=nothing,\n    average_watts=nothing,\n    device_watts=nothing,\n    max_watts=nothing,\n    weighted_average_watts=nothing,\n    description=nothing,\n    photos=nothing,\n    gear=nothing,\n    calories=nothing,\n    segment_efforts=nothing,\n    device_name=nothing,\n    embed_token=nothing,\n    splits_metric=nothing,\n    splits_standard=nothing,\n    laps=nothing,\n    best_efforts=nothing,\n)\n\n- id::Int64 : The unique identifier of the activity\n- external_id::String : The identifier provided at upload time\n- upload_id::Int64 : The identifier of the upload that resulted in this activity\n- athlete::MetaAthlete\n- name::String : The name of the activity\n- distance::Float32 : The activity&#39;s distance, in meters\n- moving_time::Int64 : The activity&#39;s moving time, in seconds\n- elapsed_time::Int64 : The activity&#39;s elapsed time, in seconds\n- total_elevation_gain::Float32 : The activity&#39;s total elevation gain.\n- elev_high::Float32 : The activity&#39;s highest elevation, in meters\n- elev_low::Float32 : The activity&#39;s lowest elevation, in meters\n- type::ActivityType\n- sport_type::SportType\n- start_date::ZonedDateTime : The time at which the activity was started.\n- start_date_local::ZonedDateTime : The time at which the activity was started in the local timezone.\n- timezone::String : The timezone of the activity\n- start_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.\n- end_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.\n- achievement_count::Int64 : The number of achievements gained during this activity\n- kudos_count::Int64 : The number of kudos given for this activity\n- comment_count::Int64 : The number of comments for this activity\n- athlete_count::Int64 : The number of athletes for taking part in a group activity\n- photo_count::Int64 : The number of Instagram photos for this activity\n- total_photo_count::Int64 : The number of Instagram and Strava photos for this activity\n- map::PolylineMap\n- trainer::Bool : Whether this activity was recorded on a training machine\n- commute::Bool : Whether this activity is a commute\n- manual::Bool : Whether this activity was created manually\n- private::Bool : Whether this activity is private\n- flagged::Bool : Whether this activity is flagged\n- workout_type::Int64 : The activity&#39;s workout type\n- upload_id_str::String : The unique identifier of the upload in string format\n- average_speed::Float32 : The activity&#39;s average speed, in meters per second\n- max_speed::Float32 : The activity&#39;s max speed, in meters per second\n- has_kudoed::Bool : Whether the logged-in athlete has kudoed this activity\n- hide_from_home::Bool : Whether the activity is muted\n- gear_id::String : The id of the gear for the activity\n- kilojoules::Float32 : The total work done in kilojoules during this activity. Rides only\n- average_watts::Float32 : Average power output in watts during this activity. Rides only\n- device_watts::Bool : Whether the watts are from a power meter, false if estimated\n- max_watts::Int64 : Rides with power meter data only\n- weighted_average_watts::Int64 : Similar to Normalized Power. Rides with power meter data only\n- description::String : The description of the activity\n- photos::PhotosSummary\n- gear::SummaryGear\n- calories::Float32 : The number of kilocalories consumed during this activity\n- segment_efforts::Vector{DetailedSegmentEffort}\n- device_name::String : The name of the device used to record the activity\n- embed_token::String : The token used to embed a Strava activity\n- splits_metric::Vector{Split} : The splits of this activity in metric units (for runs)\n- splits_standard::Vector{Split} : The splits of this activity in imperial units (for runs)\n- laps::Vector{Lap}\n- best_efforts::Vector{DetailedSegmentEffort}\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.DetailedAthlete","page":"Julia docstrings","title":"StravaAPI.DetailedAthlete","text":"DetailedAthlete\n\nDetailedAthlete(;\n    id=nothing,\n    resource_state=nothing,\n    firstname=nothing,\n    lastname=nothing,\n    profile_medium=nothing,\n    profile=nothing,\n    city=nothing,\n    state=nothing,\n    country=nothing,\n    sex=nothing,\n    premium=nothing,\n    summit=nothing,\n    created_at=nothing,\n    updated_at=nothing,\n    follower_count=nothing,\n    friend_count=nothing,\n    measurement_preference=nothing,\n    ftp=nothing,\n    weight=nothing,\n    clubs=nothing,\n    bikes=nothing,\n    shoes=nothing,\n)\n\n- id::Int64 : The unique identifier of the athlete\n- resource_state::Int64 : Resource state, indicates level of detail. Possible values: 1 -&gt; \\&quot;meta\\&quot;, 2 -&gt; \\&quot;summary\\&quot;, 3 -&gt; \\&quot;detail\\&quot;\n- firstname::String : The athlete&#39;s first name.\n- lastname::String : The athlete&#39;s last name.\n- profile_medium::String : URL to a 62x62 pixel profile picture.\n- profile::String : URL to a 124x124 pixel profile picture.\n- city::String : The athlete&#39;s city.\n- state::String : The athlete&#39;s state or geographical region.\n- country::String : The athlete&#39;s country.\n- sex::String : The athlete&#39;s sex.\n- premium::Bool : Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.\n- summit::Bool : Whether the athlete has any Summit subscription.\n- created_at::ZonedDateTime : The time at which the athlete was created.\n- updated_at::ZonedDateTime : The time at which the athlete was last updated.\n- follower_count::Int64 : The athlete&#39;s follower count.\n- friend_count::Int64 : The athlete&#39;s friend count.\n- measurement_preference::String : The athlete&#39;s preferred unit system.\n- ftp::Int64 : The athlete&#39;s FTP (Functional Threshold Power).\n- weight::Float32 : The athlete&#39;s weight.\n- clubs::Vector{SummaryClub} : The athlete&#39;s clubs.\n- bikes::Vector{SummaryGear} : The athlete&#39;s bikes.\n- shoes::Vector{SummaryGear} : The athlete&#39;s shoes.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.DetailedClub","page":"Julia docstrings","title":"StravaAPI.DetailedClub","text":"DetailedClub\n\nDetailedClub(;\n    id=nothing,\n    resource_state=nothing,\n    name=nothing,\n    profile_medium=nothing,\n    cover_photo=nothing,\n    cover_photo_small=nothing,\n    sport_type=nothing,\n    activity_types=nothing,\n    city=nothing,\n    state=nothing,\n    country=nothing,\n    private=nothing,\n    member_count=nothing,\n    featured=nothing,\n    verified=nothing,\n    url=nothing,\n    membership=nothing,\n    admin=nothing,\n    owner=nothing,\n    following_count=nothing,\n)\n\n- id::Int64 : The club&#39;s unique identifier.\n- resource_state::Int64 : Resource state, indicates level of detail. Possible values: 1 -&gt; \\&quot;meta\\&quot;, 2 -&gt; \\&quot;summary\\&quot;, 3 -&gt; \\&quot;detail\\&quot;\n- name::String : The club&#39;s name.\n- profile_medium::String : URL to a 60x60 pixel profile picture.\n- cover_photo::String : URL to a ~1185x580 pixel cover photo.\n- cover_photo_small::String : URL to a ~360x176  pixel cover photo.\n- sport_type::String : Deprecated. Prefer to use activity_types.\n- activity_types::Vector{ActivityType} : The activity types that count for a club. This takes precedence over sport_type.\n- city::String : The club&#39;s city.\n- state::String : The club&#39;s state or geographical region.\n- country::String : The club&#39;s country.\n- private::Bool : Whether the club is private.\n- member_count::Int64 : The club&#39;s member count.\n- featured::Bool : Whether the club is featured or not.\n- verified::Bool : Whether the club is verified or not.\n- url::String : The club&#39;s vanity URL.\n- membership::String : The membership status of the logged-in athlete.\n- admin::Bool : Whether the currently logged-in athlete is an administrator of this club.\n- owner::Bool : Whether the currently logged-in athlete is the owner of this club.\n- following_count::Int64 : The number of athletes in the club that the logged-in athlete follows.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.DetailedGear","page":"Julia docstrings","title":"StravaAPI.DetailedGear","text":"DetailedGear\n\nDetailedGear(;\n    id=nothing,\n    resource_state=nothing,\n    primary=nothing,\n    name=nothing,\n    distance=nothing,\n    brand_name=nothing,\n    model_name=nothing,\n    frame_type=nothing,\n    description=nothing,\n)\n\n- id::String : The gear&#39;s unique identifier.\n- resource_state::Int64 : Resource state, indicates level of detail. Possible values: 2 -&gt; \\&quot;summary\\&quot;, 3 -&gt; \\&quot;detail\\&quot;\n- primary::Bool : Whether this gear&#39;s is the owner&#39;s default one.\n- name::String : The gear&#39;s name.\n- distance::Float32 : The distance logged with this gear.\n- brand_name::String : The gear&#39;s brand name.\n- model_name::String : The gear&#39;s model name.\n- frame_type::Int64 : The gear&#39;s frame type (bike only).\n- description::String : The gear&#39;s description.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.DetailedSegment","page":"Julia docstrings","title":"StravaAPI.DetailedSegment","text":"DetailedSegment\n\nDetailedSegment(;\n    id=nothing,\n    name=nothing,\n    activity_type=nothing,\n    distance=nothing,\n    average_grade=nothing,\n    maximum_grade=nothing,\n    elevation_high=nothing,\n    elevation_low=nothing,\n    start_latlng=nothing,\n    end_latlng=nothing,\n    climb_category=nothing,\n    city=nothing,\n    state=nothing,\n    country=nothing,\n    private=nothing,\n    athlete_pr_effort=nothing,\n    athlete_segment_stats=nothing,\n    created_at=nothing,\n    updated_at=nothing,\n    total_elevation_gain=nothing,\n    map=nothing,\n    effort_count=nothing,\n    athlete_count=nothing,\n    hazardous=nothing,\n    star_count=nothing,\n)\n\n- id::Int64 : The unique identifier of this segment\n- name::String : The name of this segment\n- activity_type::String\n- distance::Float32 : The segment&#39;s distance, in meters\n- average_grade::Float32 : The segment&#39;s average grade, in percents\n- maximum_grade::Float32 : The segments&#39;s maximum grade, in percents\n- elevation_high::Float32 : The segments&#39;s highest elevation, in meters\n- elevation_low::Float32 : The segments&#39;s lowest elevation, in meters\n- start_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.\n- end_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.\n- climb_category::Int64 : The category of the climb [0, 5]. Higher is harder ie. 5 is Hors cat√©gorie, 0 is uncategorized in climb_category.\n- city::String : The segments&#39;s city.\n- state::String : The segments&#39;s state or geographical region.\n- country::String : The segment&#39;s country.\n- private::Bool : Whether this segment is private.\n- athlete_pr_effort::SummaryPRSegmentEffort\n- athlete_segment_stats::SummarySegmentEffort\n- created_at::ZonedDateTime : The time at which the segment was created.\n- updated_at::ZonedDateTime : The time at which the segment was last updated.\n- total_elevation_gain::Float32 : The segment&#39;s total elevation gain.\n- map::PolylineMap\n- effort_count::Int64 : The total number of efforts for this segment\n- athlete_count::Int64 : The number of unique athletes who have an effort for this segment\n- hazardous::Bool : Whether this segment is considered hazardous\n- star_count::Int64 : The number of stars for this segment\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.DetailedSegmentEffort","page":"Julia docstrings","title":"StravaAPI.DetailedSegmentEffort","text":"DetailedSegmentEffort\n\nDetailedSegmentEffort(;\n    id=nothing,\n    activity_id=nothing,\n    elapsed_time=nothing,\n    start_date=nothing,\n    start_date_local=nothing,\n    distance=nothing,\n    is_kom=nothing,\n    name=nothing,\n    activity=nothing,\n    athlete=nothing,\n    moving_time=nothing,\n    start_index=nothing,\n    end_index=nothing,\n    average_cadence=nothing,\n    average_watts=nothing,\n    device_watts=nothing,\n    average_heartrate=nothing,\n    max_heartrate=nothing,\n    segment=nothing,\n    kom_rank=nothing,\n    pr_rank=nothing,\n    hidden=nothing,\n)\n\n- id::Int64 : The unique identifier of this effort\n- activity_id::Int64 : The unique identifier of the activity related to this effort\n- elapsed_time::Int64 : The effort&#39;s elapsed time\n- start_date::ZonedDateTime : The time at which the effort was started.\n- start_date_local::ZonedDateTime : The time at which the effort was started in the local timezone.\n- distance::Float32 : The effort&#39;s distance in meters\n- is_kom::Bool : Whether this effort is the current best on the leaderboard\n- name::String : The name of the segment on which this effort was performed\n- activity::MetaActivity\n- athlete::MetaAthlete\n- moving_time::Int64 : The effort&#39;s moving time\n- start_index::Int64 : The start index of this effort in its activity&#39;s stream\n- end_index::Int64 : The end index of this effort in its activity&#39;s stream\n- average_cadence::Float32 : The effort&#39;s average cadence\n- average_watts::Float32 : The average wattage of this effort\n- device_watts::Bool : For riding efforts, whether the wattage was reported by a dedicated recording device\n- average_heartrate::Float32 : The heart heart rate of the athlete during this effort\n- max_heartrate::Float32 : The maximum heart rate of the athlete during this effort\n- segment::SummarySegment\n- kom_rank::Int64 : The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload\n- pr_rank::Int64 : The rank of the effort on the athlete&#39;s leaderboard if it belongs in the top 3 at the time of upload\n- hidden::Bool : Whether this effort should be hidden when viewed within an activity\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.DistanceStream","page":"Julia docstrings","title":"StravaAPI.DistanceStream","text":"DistanceStream\n\nDistanceStream(;\n    original_size=nothing,\n    resolution=nothing,\n    series_type=nothing,\n    data=nothing,\n)\n\n- original_size::Int64 : The number of data points in this stream\n- resolution::String : The level of detail (sampling) in which this stream was returned\n- series_type::String : The base series used in the case the stream was downsampled\n- data::Vector{Float32} : The sequence of distance values for this stream, in meters\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.Error","page":"Julia docstrings","title":"StravaAPI.Error","text":"Error\n\nError(;\n    code=nothing,\n    field=nothing,\n    resource=nothing,\n)\n\n- code::String : The code associated with this error.\n- field::String : The specific field or aspect of the resource associated with this error.\n- resource::String : The type of resource associated with this error.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.ExplorerResponse","page":"Julia docstrings","title":"StravaAPI.ExplorerResponse","text":"ExplorerResponse\n\nExplorerResponse(;\n    segments=nothing,\n)\n\n- segments::Vector{ExplorerSegment} : The set of segments matching an explorer request\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.ExplorerSegment","page":"Julia docstrings","title":"StravaAPI.ExplorerSegment","text":"ExplorerSegment\n\nExplorerSegment(;\n    id=nothing,\n    name=nothing,\n    climb_category=nothing,\n    climb_category_desc=nothing,\n    avg_grade=nothing,\n    start_latlng=nothing,\n    end_latlng=nothing,\n    elev_difference=nothing,\n    distance=nothing,\n    points=nothing,\n)\n\n- id::Int64 : The unique identifier of this segment\n- name::String : The name of this segment\n- climb_category::Int64 : The category of the climb [0, 5]. Higher is harder ie. 5 is Hors cat√©gorie, 0 is uncategorized in climb_category. If climb_category &#x3D; 5, climb_category_desc &#x3D; HC. If climb_category &#x3D; 2, climb_category_desc &#x3D; 3.\n- climb_category_desc::String : The description for the category of the climb\n- avg_grade::Float32 : The segment&#39;s average grade, in percents\n- start_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.\n- end_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.\n- elev_difference::Float32 : The segments&#39;s evelation difference, in meters\n- distance::Float32 : The segment&#39;s distance, in meters\n- points::String : The polyline of the segment\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.Fault","page":"Julia docstrings","title":"StravaAPI.Fault","text":"Fault Encapsulates the errors that may be returned from the API.\n\nFault(;\n    errors=nothing,\n    message=nothing,\n)\n\n- errors::Vector{Error} : The set of specific errors associated with this fault, if any.\n- message::String : The message of the fault.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.HeartRateZoneRanges","page":"Julia docstrings","title":"StravaAPI.HeartRateZoneRanges","text":"HeartRateZoneRanges\n\nHeartRateZoneRanges(;\n    custom_zones=nothing,\n    zones=nothing,\n)\n\n- custom_zones::Bool : Whether the athlete has set their own custom heart rate zones\n- zones::Vector{ZoneRange}\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.HeartrateStream","page":"Julia docstrings","title":"StravaAPI.HeartrateStream","text":"HeartrateStream\n\nHeartrateStream(;\n    original_size=nothing,\n    resolution=nothing,\n    series_type=nothing,\n    data=nothing,\n)\n\n- original_size::Int64 : The number of data points in this stream\n- resolution::String : The level of detail (sampling) in which this stream was returned\n- series_type::String : The base series used in the case the stream was downsampled\n- data::Vector{Int64} : The sequence of heart rate values for this stream, in beats per minute\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.Lap","page":"Julia docstrings","title":"StravaAPI.Lap","text":"Lap\n\nLap(;\n    id=nothing,\n    activity=nothing,\n    athlete=nothing,\n    average_cadence=nothing,\n    average_speed=nothing,\n    distance=nothing,\n    elapsed_time=nothing,\n    start_index=nothing,\n    end_index=nothing,\n    lap_index=nothing,\n    max_speed=nothing,\n    moving_time=nothing,\n    name=nothing,\n    pace_zone=nothing,\n    split=nothing,\n    start_date=nothing,\n    start_date_local=nothing,\n    total_elevation_gain=nothing,\n)\n\n- id::Int64 : The unique identifier of this lap\n- activity::MetaActivity\n- athlete::MetaAthlete\n- average_cadence::Float32 : The lap&#39;s average cadence\n- average_speed::Float32 : The lap&#39;s average speed\n- distance::Float32 : The lap&#39;s distance, in meters\n- elapsed_time::Int64 : The lap&#39;s elapsed time, in seconds\n- start_index::Int64 : The start index of this effort in its activity&#39;s stream\n- end_index::Int64 : The end index of this effort in its activity&#39;s stream\n- lap_index::Int64 : The index of this lap in the activity it belongs to\n- max_speed::Float32 : The maximum speed of this lat, in meters per second\n- moving_time::Int64 : The lap&#39;s moving time, in seconds\n- name::String : The name of the lap\n- pace_zone::Int64 : The athlete&#39;s pace zone during this lap\n- split::Int64\n- start_date::ZonedDateTime : The time at which the lap was started.\n- start_date_local::ZonedDateTime : The time at which the lap was started in the local timezone.\n- total_elevation_gain::Float32 : The elevation gain of this lap, in meters\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.LatLngStream","page":"Julia docstrings","title":"StravaAPI.LatLngStream","text":"LatLngStream\n\nLatLngStream(;\n    original_size=nothing,\n    resolution=nothing,\n    series_type=nothing,\n    data=nothing,\n)\n\n- original_size::Int64 : The number of data points in this stream\n- resolution::String : The level of detail (sampling) in which this stream was returned\n- series_type::String : The base series used in the case the stream was downsampled\n- data::Vector{Vector} : The sequence of lat/long values for this stream\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.MetaActivity","page":"Julia docstrings","title":"StravaAPI.MetaActivity","text":"MetaActivity\n\nMetaActivity(;\n    id=nothing,\n)\n\n- id::Int64 : The unique identifier of the activity\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.MetaAthlete","page":"Julia docstrings","title":"StravaAPI.MetaAthlete","text":"MetaAthlete\n\nMetaAthlete(;\n    id=nothing,\n)\n\n- id::Int64 : The unique identifier of the athlete\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.MetaClub","page":"Julia docstrings","title":"StravaAPI.MetaClub","text":"MetaClub\n\nMetaClub(;\n    id=nothing,\n    resource_state=nothing,\n    name=nothing,\n)\n\n- id::Int64 : The club&#39;s unique identifier.\n- resource_state::Int64 : Resource state, indicates level of detail. Possible values: 1 -&gt; \\&quot;meta\\&quot;, 2 -&gt; \\&quot;summary\\&quot;, 3 -&gt; \\&quot;detail\\&quot;\n- name::String : The club&#39;s name.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.MovingStream","page":"Julia docstrings","title":"StravaAPI.MovingStream","text":"MovingStream\n\nMovingStream(;\n    original_size=nothing,\n    resolution=nothing,\n    series_type=nothing,\n    data=nothing,\n)\n\n- original_size::Int64 : The number of data points in this stream\n- resolution::String : The level of detail (sampling) in which this stream was returned\n- series_type::String : The base series used in the case the stream was downsampled\n- data::Vector{Bool} : The sequence of moving values for this stream, as boolean values\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.PhotosSummary","page":"Julia docstrings","title":"StravaAPI.PhotosSummary","text":"PhotosSummary\n\nPhotosSummary(;\n    count=nothing,\n    primary=nothing,\n)\n\n- count::Int64 : The number of photos\n- primary::PhotosSummaryPrimary\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.PhotosSummaryPrimary","page":"Julia docstrings","title":"StravaAPI.PhotosSummaryPrimary","text":"PhotosSummary_primary\n\nPhotosSummaryPrimary(;\n    id=nothing,\n    source=nothing,\n    unique_id=nothing,\n    urls=nothing,\n)\n\n- id::Int64\n- source::Int64\n- unique_id::String\n- urls::Dict{String, String}\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.PolylineMap","page":"Julia docstrings","title":"StravaAPI.PolylineMap","text":"PolylineMap\n\nPolylineMap(;\n    id=nothing,\n    polyline=nothing,\n    summary_polyline=nothing,\n)\n\n- id::String : The identifier of the map\n- polyline::String : The polyline of the map, only returned on detailed representation of an object\n- summary_polyline::String : The summary polyline of the map\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.PowerStream","page":"Julia docstrings","title":"StravaAPI.PowerStream","text":"PowerStream\n\nPowerStream(;\n    original_size=nothing,\n    resolution=nothing,\n    series_type=nothing,\n    data=nothing,\n)\n\n- original_size::Int64 : The number of data points in this stream\n- resolution::String : The level of detail (sampling) in which this stream was returned\n- series_type::String : The base series used in the case the stream was downsampled\n- data::Vector{Int64} : The sequence of power values for this stream, in watts\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.PowerZoneRanges","page":"Julia docstrings","title":"StravaAPI.PowerZoneRanges","text":"PowerZoneRanges\n\nPowerZoneRanges(;\n    zones=nothing,\n)\n\n- zones::Vector{ZoneRange}\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.Route","page":"Julia docstrings","title":"StravaAPI.Route","text":"Route\n\nRoute(;\n    athlete=nothing,\n    description=nothing,\n    distance=nothing,\n    elevation_gain=nothing,\n    id=nothing,\n    id_str=nothing,\n    map=nothing,\n    name=nothing,\n    private=nothing,\n    starred=nothing,\n    timestamp=nothing,\n    type=nothing,\n    sub_type=nothing,\n    created_at=nothing,\n    updated_at=nothing,\n    estimated_moving_time=nothing,\n    segments=nothing,\n    waypoints=nothing,\n)\n\n- athlete::SummaryAthlete\n- description::String : The description of the route\n- distance::Float32 : The route&#39;s distance, in meters\n- elevation_gain::Float32 : The route&#39;s elevation gain.\n- id::Int64 : The unique identifier of this route\n- id_str::String : The unique identifier of the route in string format\n- map::PolylineMap\n- name::String : The name of this route\n- private::Bool : Whether this route is private\n- starred::Bool : Whether this route is starred by the logged-in athlete\n- timestamp::Int64 : An epoch timestamp of when the route was created\n- type::Int64 : This route&#39;s type (1 for ride, 2 for runs)\n- sub_type::Int64 : This route&#39;s sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)\n- created_at::ZonedDateTime : The time at which the route was created\n- updated_at::ZonedDateTime : The time at which the route was last updated\n- estimated_moving_time::Int64 : Estimated time in seconds for the authenticated athlete to complete route\n- segments::Vector{SummarySegment} : The segments traversed by this route\n- waypoints::Vector{Waypoint} : The custom waypoints along this route\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.SmoothGradeStream","page":"Julia docstrings","title":"StravaAPI.SmoothGradeStream","text":"SmoothGradeStream\n\nSmoothGradeStream(;\n    original_size=nothing,\n    resolution=nothing,\n    series_type=nothing,\n    data=nothing,\n)\n\n- original_size::Int64 : The number of data points in this stream\n- resolution::String : The level of detail (sampling) in which this stream was returned\n- series_type::String : The base series used in the case the stream was downsampled\n- data::Vector{Float32} : The sequence of grade values for this stream, as percents of a grade\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.SmoothVelocityStream","page":"Julia docstrings","title":"StravaAPI.SmoothVelocityStream","text":"SmoothVelocityStream\n\nSmoothVelocityStream(;\n    original_size=nothing,\n    resolution=nothing,\n    series_type=nothing,\n    data=nothing,\n)\n\n- original_size::Int64 : The number of data points in this stream\n- resolution::String : The level of detail (sampling) in which this stream was returned\n- series_type::String : The base series used in the case the stream was downsampled\n- data::Vector{Float32} : The sequence of velocity values for this stream, in meters per second\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.Split","page":"Julia docstrings","title":"StravaAPI.Split","text":"Split\n\nSplit(;\n    average_speed=nothing,\n    distance=nothing,\n    elapsed_time=nothing,\n    elevation_difference=nothing,\n    pace_zone=nothing,\n    moving_time=nothing,\n    split=nothing,\n)\n\n- average_speed::Float32 : The average speed of this split, in meters per second\n- distance::Float32 : The distance of this split, in meters\n- elapsed_time::Int64 : The elapsed time of this split, in seconds\n- elevation_difference::Float32 : The elevation difference of this split, in meters\n- pace_zone::Int64 : The pacing zone of this split\n- moving_time::Int64 : The moving time of this split, in seconds\n- split::Int64 : N/A\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.StreamSet","page":"Julia docstrings","title":"StravaAPI.StreamSet","text":"StreamSet\n\nStreamSet(;\n    time=nothing,\n    distance=nothing,\n    latlng=nothing,\n    altitude=nothing,\n    velocity_smooth=nothing,\n    heartrate=nothing,\n    cadence=nothing,\n    watts=nothing,\n    temp=nothing,\n    moving=nothing,\n    grade_smooth=nothing,\n)\n\n- time::TimeStream\n- distance::DistanceStream\n- latlng::LatLngStream\n- altitude::AltitudeStream\n- velocity_smooth::SmoothVelocityStream\n- heartrate::HeartrateStream\n- cadence::CadenceStream\n- watts::PowerStream\n- temp::TemperatureStream\n- moving::MovingStream\n- grade_smooth::SmoothGradeStream\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.SummaryActivity","page":"Julia docstrings","title":"StravaAPI.SummaryActivity","text":"SummaryActivity\n\nSummaryActivity(;\n    id=nothing,\n    external_id=nothing,\n    upload_id=nothing,\n    athlete=nothing,\n    name=nothing,\n    distance=nothing,\n    moving_time=nothing,\n    elapsed_time=nothing,\n    total_elevation_gain=nothing,\n    elev_high=nothing,\n    elev_low=nothing,\n    type=nothing,\n    sport_type=nothing,\n    start_date=nothing,\n    start_date_local=nothing,\n    timezone=nothing,\n    start_latlng=nothing,\n    end_latlng=nothing,\n    achievement_count=nothing,\n    kudos_count=nothing,\n    comment_count=nothing,\n    athlete_count=nothing,\n    photo_count=nothing,\n    total_photo_count=nothing,\n    map=nothing,\n    trainer=nothing,\n    commute=nothing,\n    manual=nothing,\n    private=nothing,\n    flagged=nothing,\n    workout_type=nothing,\n    upload_id_str=nothing,\n    average_speed=nothing,\n    max_speed=nothing,\n    has_kudoed=nothing,\n    hide_from_home=nothing,\n    gear_id=nothing,\n    kilojoules=nothing,\n    average_watts=nothing,\n    device_watts=nothing,\n    max_watts=nothing,\n    weighted_average_watts=nothing,\n)\n\n- id::Int64 : The unique identifier of the activity\n- external_id::String : The identifier provided at upload time\n- upload_id::Int64 : The identifier of the upload that resulted in this activity\n- athlete::MetaAthlete\n- name::String : The name of the activity\n- distance::Float32 : The activity&#39;s distance, in meters\n- moving_time::Int64 : The activity&#39;s moving time, in seconds\n- elapsed_time::Int64 : The activity&#39;s elapsed time, in seconds\n- total_elevation_gain::Float32 : The activity&#39;s total elevation gain.\n- elev_high::Float32 : The activity&#39;s highest elevation, in meters\n- elev_low::Float32 : The activity&#39;s lowest elevation, in meters\n- type::ActivityType\n- sport_type::SportType\n- start_date::ZonedDateTime : The time at which the activity was started.\n- start_date_local::ZonedDateTime : The time at which the activity was started in the local timezone.\n- timezone::String : The timezone of the activity\n- start_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.\n- end_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.\n- achievement_count::Int64 : The number of achievements gained during this activity\n- kudos_count::Int64 : The number of kudos given for this activity\n- comment_count::Int64 : The number of comments for this activity\n- athlete_count::Int64 : The number of athletes for taking part in a group activity\n- photo_count::Int64 : The number of Instagram photos for this activity\n- total_photo_count::Int64 : The number of Instagram and Strava photos for this activity\n- map::PolylineMap\n- trainer::Bool : Whether this activity was recorded on a training machine\n- commute::Bool : Whether this activity is a commute\n- manual::Bool : Whether this activity was created manually\n- private::Bool : Whether this activity is private\n- flagged::Bool : Whether this activity is flagged\n- workout_type::Int64 : The activity&#39;s workout type\n- upload_id_str::String : The unique identifier of the upload in string format\n- average_speed::Float32 : The activity&#39;s average speed, in meters per second\n- max_speed::Float32 : The activity&#39;s max speed, in meters per second\n- has_kudoed::Bool : Whether the logged-in athlete has kudoed this activity\n- hide_from_home::Bool : Whether the activity is muted\n- gear_id::String : The id of the gear for the activity\n- kilojoules::Float32 : The total work done in kilojoules during this activity. Rides only\n- average_watts::Float32 : Average power output in watts during this activity. Rides only\n- device_watts::Bool : Whether the watts are from a power meter, false if estimated\n- max_watts::Int64 : Rides with power meter data only\n- weighted_average_watts::Int64 : Similar to Normalized Power. Rides with power meter data only\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.SummaryAthlete","page":"Julia docstrings","title":"StravaAPI.SummaryAthlete","text":"SummaryAthlete\n\nSummaryAthlete(;\n    id=nothing,\n    resource_state=nothing,\n    firstname=nothing,\n    lastname=nothing,\n    profile_medium=nothing,\n    profile=nothing,\n    city=nothing,\n    state=nothing,\n    country=nothing,\n    sex=nothing,\n    premium=nothing,\n    summit=nothing,\n    created_at=nothing,\n    updated_at=nothing,\n)\n\n- id::Int64 : The unique identifier of the athlete\n- resource_state::Int64 : Resource state, indicates level of detail. Possible values: 1 -&gt; \\&quot;meta\\&quot;, 2 -&gt; \\&quot;summary\\&quot;, 3 -&gt; \\&quot;detail\\&quot;\n- firstname::String : The athlete&#39;s first name.\n- lastname::String : The athlete&#39;s last name.\n- profile_medium::String : URL to a 62x62 pixel profile picture.\n- profile::String : URL to a 124x124 pixel profile picture.\n- city::String : The athlete&#39;s city.\n- state::String : The athlete&#39;s state or geographical region.\n- country::String : The athlete&#39;s country.\n- sex::String : The athlete&#39;s sex.\n- premium::Bool : Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.\n- summit::Bool : Whether the athlete has any Summit subscription.\n- created_at::ZonedDateTime : The time at which the athlete was created.\n- updated_at::ZonedDateTime : The time at which the athlete was last updated.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.SummaryClub","page":"Julia docstrings","title":"StravaAPI.SummaryClub","text":"SummaryClub\n\nSummaryClub(;\n    id=nothing,\n    resource_state=nothing,\n    name=nothing,\n    profile_medium=nothing,\n    cover_photo=nothing,\n    cover_photo_small=nothing,\n    sport_type=nothing,\n    activity_types=nothing,\n    city=nothing,\n    state=nothing,\n    country=nothing,\n    private=nothing,\n    member_count=nothing,\n    featured=nothing,\n    verified=nothing,\n    url=nothing,\n)\n\n- id::Int64 : The club&#39;s unique identifier.\n- resource_state::Int64 : Resource state, indicates level of detail. Possible values: 1 -&gt; \\&quot;meta\\&quot;, 2 -&gt; \\&quot;summary\\&quot;, 3 -&gt; \\&quot;detail\\&quot;\n- name::String : The club&#39;s name.\n- profile_medium::String : URL to a 60x60 pixel profile picture.\n- cover_photo::String : URL to a ~1185x580 pixel cover photo.\n- cover_photo_small::String : URL to a ~360x176  pixel cover photo.\n- sport_type::String : Deprecated. Prefer to use activity_types.\n- activity_types::Vector{ActivityType} : The activity types that count for a club. This takes precedence over sport_type.\n- city::String : The club&#39;s city.\n- state::String : The club&#39;s state or geographical region.\n- country::String : The club&#39;s country.\n- private::Bool : Whether the club is private.\n- member_count::Int64 : The club&#39;s member count.\n- featured::Bool : Whether the club is featured or not.\n- verified::Bool : Whether the club is verified or not.\n- url::String : The club&#39;s vanity URL.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.SummaryGear","page":"Julia docstrings","title":"StravaAPI.SummaryGear","text":"SummaryGear\n\nSummaryGear(;\n    id=nothing,\n    resource_state=nothing,\n    primary=nothing,\n    name=nothing,\n    distance=nothing,\n)\n\n- id::String : The gear&#39;s unique identifier.\n- resource_state::Int64 : Resource state, indicates level of detail. Possible values: 2 -&gt; \\&quot;summary\\&quot;, 3 -&gt; \\&quot;detail\\&quot;\n- primary::Bool : Whether this gear&#39;s is the owner&#39;s default one.\n- name::String : The gear&#39;s name.\n- distance::Float32 : The distance logged with this gear.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.SummaryPRSegmentEffort","page":"Julia docstrings","title":"StravaAPI.SummaryPRSegmentEffort","text":"SummaryPRSegmentEffort\n\nSummaryPRSegmentEffort(;\n    pr_activity_id=nothing,\n    pr_elapsed_time=nothing,\n    pr_date=nothing,\n    effort_count=nothing,\n)\n\n- pr_activity_id::Int64 : The unique identifier of the activity related to the PR effort.\n- pr_elapsed_time::Int64 : The elapsed time ot the PR effort.\n- pr_date::ZonedDateTime : The time at which the PR effort was started.\n- effort_count::Int64 : Number of efforts by the authenticated athlete on this segment.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.SummarySegment","page":"Julia docstrings","title":"StravaAPI.SummarySegment","text":"SummarySegment\n\nSummarySegment(;\n    id=nothing,\n    name=nothing,\n    activity_type=nothing,\n    distance=nothing,\n    average_grade=nothing,\n    maximum_grade=nothing,\n    elevation_high=nothing,\n    elevation_low=nothing,\n    start_latlng=nothing,\n    end_latlng=nothing,\n    climb_category=nothing,\n    city=nothing,\n    state=nothing,\n    country=nothing,\n    private=nothing,\n    athlete_pr_effort=nothing,\n    athlete_segment_stats=nothing,\n)\n\n- id::Int64 : The unique identifier of this segment\n- name::String : The name of this segment\n- activity_type::String\n- distance::Float32 : The segment&#39;s distance, in meters\n- average_grade::Float32 : The segment&#39;s average grade, in percents\n- maximum_grade::Float32 : The segments&#39;s maximum grade, in percents\n- elevation_high::Float32 : The segments&#39;s highest elevation, in meters\n- elevation_low::Float32 : The segments&#39;s lowest elevation, in meters\n- start_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.\n- end_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.\n- climb_category::Int64 : The category of the climb [0, 5]. Higher is harder ie. 5 is Hors cat√©gorie, 0 is uncategorized in climb_category.\n- city::String : The segments&#39;s city.\n- state::String : The segments&#39;s state or geographical region.\n- country::String : The segment&#39;s country.\n- private::Bool : Whether this segment is private.\n- athlete_pr_effort::SummaryPRSegmentEffort\n- athlete_segment_stats::SummarySegmentEffort\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.SummarySegmentEffort","page":"Julia docstrings","title":"StravaAPI.SummarySegmentEffort","text":"SummarySegmentEffort\n\nSummarySegmentEffort(;\n    id=nothing,\n    activity_id=nothing,\n    elapsed_time=nothing,\n    start_date=nothing,\n    start_date_local=nothing,\n    distance=nothing,\n    is_kom=nothing,\n)\n\n- id::Int64 : The unique identifier of this effort\n- activity_id::Int64 : The unique identifier of the activity related to this effort\n- elapsed_time::Int64 : The effort&#39;s elapsed time\n- start_date::ZonedDateTime : The time at which the effort was started.\n- start_date_local::ZonedDateTime : The time at which the effort was started in the local timezone.\n- distance::Float32 : The effort&#39;s distance in meters\n- is_kom::Bool : Whether this effort is the current best on the leaderboard\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.TemperatureStream","page":"Julia docstrings","title":"StravaAPI.TemperatureStream","text":"TemperatureStream\n\nTemperatureStream(;\n    original_size=nothing,\n    resolution=nothing,\n    series_type=nothing,\n    data=nothing,\n)\n\n- original_size::Int64 : The number of data points in this stream\n- resolution::String : The level of detail (sampling) in which this stream was returned\n- series_type::String : The base series used in the case the stream was downsampled\n- data::Vector{Int64} : The sequence of temperature values for this stream, in celsius degrees\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.TimeStream","page":"Julia docstrings","title":"StravaAPI.TimeStream","text":"TimeStream\n\nTimeStream(;\n    original_size=nothing,\n    resolution=nothing,\n    series_type=nothing,\n    data=nothing,\n)\n\n- original_size::Int64 : The number of data points in this stream\n- resolution::String : The level of detail (sampling) in which this stream was returned\n- series_type::String : The base series used in the case the stream was downsampled\n- data::Vector{Int64} : The sequence of time values for this stream, in seconds\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.TimedZoneRange","page":"Julia docstrings","title":"StravaAPI.TimedZoneRange","text":"TimedZoneRange A union type representing the time spent in a given zone.\n\nTimedZoneRange(;\n    min=nothing,\n    max=nothing,\n    time=nothing,\n)\n\n- min::Int64 : The minimum value in the range.\n- max::Int64 : The maximum value in the range.\n- time::Int64 : The number of seconds spent in this zone\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.UpdatableActivity","page":"Julia docstrings","title":"StravaAPI.UpdatableActivity","text":"UpdatableActivity\n\nUpdatableActivity(;\n    commute=nothing,\n    trainer=nothing,\n    hide_from_home=nothing,\n    description=nothing,\n    name=nothing,\n    type=nothing,\n    sport_type=nothing,\n    gear_id=nothing,\n)\n\n- commute::Bool : Whether this activity is a commute\n- trainer::Bool : Whether this activity was recorded on a training machine\n- hide_from_home::Bool : Whether this activity is muted\n- description::String : The description of the activity\n- name::String : The name of the activity\n- type::ActivityType\n- sport_type::SportType\n- gear_id::String : Identifier for the gear associated with the activity. ‚Äònone‚Äô clears gear from activity\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.Upload","page":"Julia docstrings","title":"StravaAPI.Upload","text":"Upload\n\nUpload(;\n    id=nothing,\n    id_str=nothing,\n    external_id=nothing,\n    error=nothing,\n    status=nothing,\n    activity_id=nothing,\n)\n\n- id::Int64 : The unique identifier of the upload\n- id_str::String : The unique identifier of the upload in string format\n- external_id::String : The external identifier of the upload\n- error::String : The error associated with this upload\n- status::String : The status of this upload\n- activity_id::Int64 : The identifier of the activity this upload resulted into\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.Waypoint","page":"Julia docstrings","title":"StravaAPI.Waypoint","text":"Waypoint\n\nWaypoint(;\n    latlng=nothing,\n    target_latlng=nothing,\n    categories=nothing,\n    title=nothing,\n    description=nothing,\n    distance_into_route=nothing,\n)\n\n- latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.\n- target_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.\n- categories::Vector{String} : Categories that the waypoint belongs to\n- title::String : A title for the waypoint\n- description::String : A description of the waypoint (optional)\n- distance_into_route::Int64 : The number meters along the route that the waypoint is located\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.ZoneRange","page":"Julia docstrings","title":"StravaAPI.ZoneRange","text":"ZoneRange\n\nZoneRange(;\n    min=nothing,\n    max=nothing,\n)\n\n- min::Int64 : The minimum value in the range.\n- max::Int64 : The maximum value in the range.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.Zones","page":"Julia docstrings","title":"StravaAPI.Zones","text":"Zones\n\nZones(;\n    heart_rate=nothing,\n    power=nothing,\n)\n\n- heart_rate::HeartRateZoneRanges\n- power::PowerZoneRanges\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#StravaAPI.basepath-Tuple{Type{StravaAPI.ActivitiesApi}}","page":"Julia docstrings","title":"StravaAPI.basepath","text":"The default API base path for APIs in ActivitiesApi. This can be used to construct the OpenAPI.Clients.Client instance.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.basepath-Tuple{Type{StravaAPI.AthletesApi}}","page":"Julia docstrings","title":"StravaAPI.basepath","text":"The default API base path for APIs in AthletesApi. This can be used to construct the OpenAPI.Clients.Client instance.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.basepath-Tuple{Type{StravaAPI.ClubsApi}}","page":"Julia docstrings","title":"StravaAPI.basepath","text":"The default API base path for APIs in ClubsApi. This can be used to construct the OpenAPI.Clients.Client instance.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.basepath-Tuple{Type{StravaAPI.GearsApi}}","page":"Julia docstrings","title":"StravaAPI.basepath","text":"The default API base path for APIs in GearsApi. This can be used to construct the OpenAPI.Clients.Client instance.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.basepath-Tuple{Type{StravaAPI.RoutesApi}}","page":"Julia docstrings","title":"StravaAPI.basepath","text":"The default API base path for APIs in RoutesApi. This can be used to construct the OpenAPI.Clients.Client instance.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.basepath-Tuple{Type{StravaAPI.SegmentEffortsApi}}","page":"Julia docstrings","title":"StravaAPI.basepath","text":"The default API base path for APIs in SegmentEffortsApi. This can be used to construct the OpenAPI.Clients.Client instance.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.basepath-Tuple{Type{StravaAPI.SegmentsApi}}","page":"Julia docstrings","title":"StravaAPI.basepath","text":"The default API base path for APIs in SegmentsApi. This can be used to construct the OpenAPI.Clients.Client instance.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.basepath-Tuple{Type{StravaAPI.StreamsApi}}","page":"Julia docstrings","title":"StravaAPI.basepath","text":"The default API base path for APIs in StreamsApi. This can be used to construct the OpenAPI.Clients.Client instance.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.basepath-Tuple{Type{StravaAPI.UploadsApi}}","page":"Julia docstrings","title":"StravaAPI.basepath","text":"The default API base path for APIs in UploadsApi. This can be used to construct the OpenAPI.Clients.Client instance.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.create_activity-Tuple{StravaAPI.ActivitiesApi, String, String, TimeZones.ZonedDateTime, Int64}","page":"Julia docstrings","title":"StravaAPI.create_activity","text":"Create an Activity\n\nCreates a manual activity for an athlete, requires activity:write scope.\n\nParams:\n\nname::String (required)\nsport_type::String (required)\nstartdatelocal::ZonedDateTime (required)\nelapsed_time::Int64 (required)\ntype::String\ndescription::String\ndistance::Float32\ntrainer::Int64\ncommute::Int64\n\nReturn: DetailedActivity, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.create_upload-Tuple{StravaAPI.UploadsApi}","page":"Julia docstrings","title":"StravaAPI.create_upload","text":"Upload Activity\n\nUploads a new data file to create an activity from. Requires activity:write scope.\n\nParams:\n\nfile::String\nname::String\ndescription::String\ntrainer::String\ncommute::String\ndata_type::String\nexternal_id::String\n\nReturn: Upload, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.explore_segments-Tuple{StravaAPI.SegmentsApi, Vector{Float32}}","page":"Julia docstrings","title":"StravaAPI.explore_segments","text":"Explore segments\n\nReturns the top 10 segments matching a specified query.\n\nParams:\n\nbounds::Vector{Float32} (required)\nactivity_type::String\nmin_cat::Int64\nmax_cat::Int64\n\nReturn: ExplorerResponse, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_activity_by_id-Tuple{StravaAPI.ActivitiesApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_activity_by_id","text":"Get Activity\n\nReturns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.\n\nParams:\n\nid::Int64 (required)\nincludeallefforts::Bool\n\nReturn: DetailedActivity, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_activity_streams-Tuple{StravaAPI.StreamsApi, Int64, Vector{String}, Bool}","page":"Julia docstrings","title":"StravaAPI.get_activity_streams","text":"Get Activity Streams\n\nReturns the given activity's streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.\n\nParams:\n\nid::Int64 (required)\nkeys::Vector{String} (required)\nkeybytype::Bool (required)\n\nReturn: StreamSet, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_club_activities_by_id-Tuple{StravaAPI.ClubsApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_club_activities_by_id","text":"List Club Activities\n\nRetrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.\n\nParams:\n\nid::Int64 (required)\npage::Int64\nper_page::Int64\n\nReturn: Vector{ClubActivity}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_club_admins_by_id-Tuple{StravaAPI.ClubsApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_club_admins_by_id","text":"List Club Administrators\n\nReturns a list of the administrators of a given club.\n\nParams:\n\nid::Int64 (required)\npage::Int64\nper_page::Int64\n\nReturn: Vector{SummaryAthlete}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_club_by_id-Tuple{StravaAPI.ClubsApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_club_by_id","text":"Get Club\n\nReturns a given club using its identifier.\n\nParams:\n\nid::Int64 (required)\n\nReturn: DetailedClub, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_club_members_by_id-Tuple{StravaAPI.ClubsApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_club_members_by_id","text":"List Club Members\n\nReturns a list of the athletes who are members of a given club.\n\nParams:\n\nid::Int64 (required)\npage::Int64\nper_page::Int64\n\nReturn: Vector{ClubAthlete}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_comments_by_activity_id-Tuple{StravaAPI.ActivitiesApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_comments_by_activity_id","text":"List Activity Comments\n\nReturns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.\n\nParams:\n\nid::Int64 (required)\npage::Int64\nper_page::Int64\npage_size::Int64\nafter_cursor::String\n\nReturn: Vector{Comment}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_efforts_by_segment_id-Tuple{StravaAPI.SegmentEffortsApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_efforts_by_segment_id","text":"List Segment Efforts\n\nReturns a set of the authenticated athlete's segment efforts for a given segment.  Requires subscription.\n\nParams:\n\nsegment_id::Int64 (required)\nstartdatelocal::ZonedDateTime\nenddatelocal::ZonedDateTime\nper_page::Int64\n\nReturn: Vector{DetailedSegmentEffort}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_gear_by_id-Tuple{StravaAPI.GearsApi, String}","page":"Julia docstrings","title":"StravaAPI.get_gear_by_id","text":"Get Equipment\n\nReturns an equipment using its identifier.\n\nParams:\n\nid::String (required)\n\nReturn: DetailedGear, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_kudoers_by_activity_id-Tuple{StravaAPI.ActivitiesApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_kudoers_by_activity_id","text":"List Activity Kudoers\n\nReturns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.\n\nParams:\n\nid::Int64 (required)\npage::Int64\nper_page::Int64\n\nReturn: Vector{SummaryAthlete}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_laps_by_activity_id-Tuple{StravaAPI.ActivitiesApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_laps_by_activity_id","text":"List Activity Laps\n\nReturns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.\n\nParams:\n\nid::Int64 (required)\n\nReturn: Vector{Lap}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_logged_in_athlete-Tuple{StravaAPI.AthletesApi}","page":"Julia docstrings","title":"StravaAPI.get_logged_in_athlete","text":"Get Authenticated Athlete\n\nReturns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.\n\nParams:\n\nReturn: DetailedAthlete, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_logged_in_athlete_activities-Tuple{StravaAPI.ActivitiesApi}","page":"Julia docstrings","title":"StravaAPI.get_logged_in_athlete_activities","text":"List Athlete Activities\n\nReturns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.\n\nParams:\n\nbefore::Int64\nafter::Int64\npage::Int64\nper_page::Int64\n\nReturn: Vector{SummaryActivity}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_logged_in_athlete_clubs-Tuple{StravaAPI.ClubsApi}","page":"Julia docstrings","title":"StravaAPI.get_logged_in_athlete_clubs","text":"List Athlete Clubs\n\nReturns a list of the clubs whose membership includes the authenticated athlete.\n\nParams:\n\npage::Int64\nper_page::Int64\n\nReturn: Vector{SummaryClub}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_logged_in_athlete_starred_segments-Tuple{StravaAPI.SegmentsApi}","page":"Julia docstrings","title":"StravaAPI.get_logged_in_athlete_starred_segments","text":"List Starred Segments\n\nList of the authenticated athlete's starred segments. Private segments are filtered out unless requested by a token with read_all scope.\n\nParams:\n\npage::Int64\nper_page::Int64\n\nReturn: Vector{SummarySegment}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_logged_in_athlete_zones-Tuple{StravaAPI.AthletesApi}","page":"Julia docstrings","title":"StravaAPI.get_logged_in_athlete_zones","text":"Get Zones\n\nReturns the the authenticated athlete's heart rate and power zones. Requires profile:read_all.\n\nParams:\n\nReturn: Zones, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_route_as_g_p_x-Tuple{StravaAPI.RoutesApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_route_as_g_p_x","text":"Export Route GPX\n\nReturns a GPX file of the route. Requires read_all scope for private routes.\n\nParams:\n\nid::Int64 (required)\n\nReturn: Nothing, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_route_as_t_c_x-Tuple{StravaAPI.RoutesApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_route_as_t_c_x","text":"Export Route TCX\n\nReturns a TCX file of the route. Requires read_all scope for private routes.\n\nParams:\n\nid::Int64 (required)\n\nReturn: Nothing, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_route_by_id-Tuple{StravaAPI.RoutesApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_route_by_id","text":"Get Route\n\nReturns a route using its identifier. Requires read_all scope for private routes.\n\nParams:\n\nid::Int64 (required)\n\nReturn: Route, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_route_streams-Tuple{StravaAPI.StreamsApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_route_streams","text":"Get Route Streams\n\nReturns the given route's streams. Requires read_all scope for private routes.\n\nParams:\n\nid::Int64 (required)\n\nReturn: StreamSet, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_routes_by_athlete_id-Tuple{StravaAPI.RoutesApi}","page":"Julia docstrings","title":"StravaAPI.get_routes_by_athlete_id","text":"List Athlete Routes\n\nReturns a list of the routes created by the authenticated athlete. Private routes are filtered out unless requested by a token with read_all scope.\n\nParams:\n\npage::Int64\nper_page::Int64\n\nReturn: Vector{Route}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_segment_by_id-Tuple{StravaAPI.SegmentsApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_segment_by_id","text":"Get Segment\n\nReturns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.\n\nParams:\n\nid::Int64 (required)\n\nReturn: DetailedSegment, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_segment_effort_by_id-Tuple{StravaAPI.SegmentEffortsApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_segment_effort_by_id","text":"Get Segment Effort\n\nReturns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.\n\nParams:\n\nid::Int64 (required)\n\nReturn: DetailedSegmentEffort, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_segment_effort_streams-Tuple{StravaAPI.StreamsApi, Int64, Vector{String}, Bool}","page":"Julia docstrings","title":"StravaAPI.get_segment_effort_streams","text":"Get Segment Effort Streams\n\nReturns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.\n\nParams:\n\nid::Int64 (required)\nkeys::Vector{String} (required)\nkeybytype::Bool (required)\n\nReturn: StreamSet, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_segment_streams-Tuple{StravaAPI.StreamsApi, Int64, Vector{String}, Bool}","page":"Julia docstrings","title":"StravaAPI.get_segment_streams","text":"Get Segment Streams\n\nReturns the given segment's streams. Requires read_all scope for private segments.\n\nParams:\n\nid::Int64 (required)\nkeys::Vector{String} (required)\nkeybytype::Bool (required)\n\nReturn: StreamSet, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_stats-Tuple{StravaAPI.AthletesApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_stats","text":"Get Athlete Stats\n\nReturns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.\n\nParams:\n\nid::Int64 (required)\n\nReturn: ActivityStats, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_upload_by_id-Tuple{StravaAPI.UploadsApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_upload_by_id","text":"Get Upload\n\nReturns an upload for a given identifier. Requires activity:write scope.\n\nParams:\n\nupload_id::Int64 (required)\n\nReturn: Upload, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.get_zones_by_activity_id-Tuple{StravaAPI.ActivitiesApi, Int64}","page":"Julia docstrings","title":"StravaAPI.get_zones_by_activity_id","text":"Get Activity Zones\n\nSummit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.\n\nParams:\n\nid::Int64 (required)\n\nReturn: Vector{ActivityZone}, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.star_segment-Tuple{StravaAPI.SegmentsApi, Int64, Bool}","page":"Julia docstrings","title":"StravaAPI.star_segment","text":"Star Segment\n\nStars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.\n\nParams:\n\nid::Int64 (required)\nstarred::Bool (required)\n\nReturn: DetailedSegment, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.update_activity_by_id-Tuple{StravaAPI.ActivitiesApi, Int64}","page":"Julia docstrings","title":"StravaAPI.update_activity_by_id","text":"Update Activity\n\nUpdates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities\n\nParams:\n\nid::Int64 (required)\nbody::UpdatableActivity\n\nReturn: DetailedActivity, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#StravaAPI.update_logged_in_athlete-Tuple{StravaAPI.AthletesApi, Float32}","page":"Julia docstrings","title":"StravaAPI.update_logged_in_athlete","text":"Update Athlete\n\nUpdate the currently authenticated athlete. Requires profile:write scope.\n\nParams:\n\nweight::Float32 (required)\n\nReturn: DetailedAthlete, OpenAPI.Clients.ApiResponse\n\n\n\n\n\n","category":"method"},{"location":"UpdatableActivity/#UpdatableActivity","page":"UpdatableActivity","title":"UpdatableActivity","text":"","category":"section"},{"location":"UpdatableActivity/#Properties","page":"UpdatableActivity","title":"Properties","text":"","category":"section"},{"location":"UpdatableActivity/","page":"UpdatableActivity","title":"UpdatableActivity","text":"Name Type Description Notes\ncommute Bool Whether this activity is a commute [optional] [default to nothing]\ntrainer Bool Whether this activity was recorded on a training machine [optional] [default to nothing]\nhidefromhome Bool Whether this activity is muted [optional] [default to nothing]\ndescription String The description of the activity [optional] [default to nothing]\nname String The name of the activity [optional] [default to nothing]\ntype ***ActivityType**  [optional] [default to nothing]\nsport_type ***SportType**  [optional] [default to nothing]\ngear_id String Identifier for the gear associated with the activity. ‚Äònone‚Äô clears gear from activity [optional] [default to nothing]","category":"page"},{"location":"UpdatableActivity/","page":"UpdatableActivity","title":"UpdatableActivity","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"AltitudeStream/#AltitudeStream","page":"AltitudeStream","title":"AltitudeStream","text":"","category":"section"},{"location":"AltitudeStream/#Properties","page":"AltitudeStream","title":"Properties","text":"","category":"section"},{"location":"AltitudeStream/","page":"AltitudeStream","title":"AltitudeStream","text":"Name Type Description Notes\noriginal_size Int64 The number of data points in this stream [optional] [default to nothing]\nresolution String The level of detail (sampling) in which this stream was returned [optional] [default to nothing]\nseries_type String The base series used in the case the stream was downsampled [optional] [default to nothing]\ndata Vector{Float32} The sequence of altitude values for this stream, in meters [optional] [default to nothing]","category":"page"},{"location":"AltitudeStream/","page":"AltitudeStream","title":"AltitudeStream","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"SummaryGear/#SummaryGear","page":"SummaryGear","title":"SummaryGear","text":"","category":"section"},{"location":"SummaryGear/#Properties","page":"SummaryGear","title":"Properties","text":"","category":"section"},{"location":"SummaryGear/","page":"SummaryGear","title":"SummaryGear","text":"Name Type Description Notes\nid String The gear&#39;s unique identifier. [optional] [default to nothing]\nresource_state Int64 Resource state, indicates level of detail. Possible values: 2 -&gt; \\&quot;summary\\&quot;, 3 -&gt; \\&quot;detail\\&quot; [optional] [default to nothing]\nprimary Bool Whether this gear&#39;s is the owner&#39;s default one. [optional] [default to nothing]\nname String The gear&#39;s name. [optional] [default to nothing]\ndistance Float32 The distance logged with this gear. [optional] [default to nothing]","category":"page"},{"location":"SummaryGear/","page":"SummaryGear","title":"SummaryGear","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"ActivityType/#ActivityType","page":"ActivityType","title":"ActivityType","text":"","category":"section"},{"location":"ActivityType/#Properties","page":"ActivityType","title":"Properties","text":"","category":"section"},{"location":"ActivityType/","page":"ActivityType","title":"ActivityType","text":"Name | Type | Description | Notes ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì | ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì- | ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì- | ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì-","category":"page"},{"location":"ActivityType/","page":"ActivityType","title":"ActivityType","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"ClubActivity/#ClubActivity","page":"ClubActivity","title":"ClubActivity","text":"","category":"section"},{"location":"ClubActivity/#Properties","page":"ClubActivity","title":"Properties","text":"","category":"section"},{"location":"ClubActivity/","page":"ClubActivity","title":"ClubActivity","text":"Name Type Description Notes\nathlete ***MetaAthlete**  [optional] [default to nothing]\nname String The name of the activity [optional] [default to nothing]\ndistance Float32 The activity&#39;s distance, in meters [optional] [default to nothing]\nmoving_time Int64 The activity&#39;s moving time, in seconds [optional] [default to nothing]\nelapsed_time Int64 The activity&#39;s elapsed time, in seconds [optional] [default to nothing]\ntotalelevationgain Float32 The activity&#39;s total elevation gain. [optional] [default to nothing]\ntype ***ActivityType**  [optional] [default to nothing]\nsport_type ***SportType**  [optional] [default to nothing]\nworkout_type Int64 The activity&#39;s workout type [optional] [default to nothing]","category":"page"},{"location":"ClubActivity/","page":"ClubActivity","title":"ClubActivity","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"Zones/#Zones","page":"Zones","title":"Zones","text":"","category":"section"},{"location":"Zones/#Properties","page":"Zones","title":"Properties","text":"","category":"section"},{"location":"Zones/","page":"Zones","title":"Zones","text":"Name Type Description Notes\nheart_rate ***HeartRateZoneRanges**  [optional] [default to nothing]\npower ***PowerZoneRanges**  [optional] [default to nothing]","category":"page"},{"location":"Zones/","page":"Zones","title":"Zones","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"BaseStream/#BaseStream","page":"BaseStream","title":"BaseStream","text":"","category":"section"},{"location":"BaseStream/#Properties","page":"BaseStream","title":"Properties","text":"","category":"section"},{"location":"BaseStream/","page":"BaseStream","title":"BaseStream","text":"Name Type Description Notes\noriginal_size Int64 The number of data points in this stream [optional] [default to nothing]\nresolution String The level of detail (sampling) in which this stream was returned [optional] [default to nothing]\nseries_type String The base series used in the case the stream was downsampled [optional] [default to nothing]","category":"page"},{"location":"BaseStream/","page":"BaseStream","title":"BaseStream","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"SegmentEffortsApi/#SegmentEffortsApi","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"","category":"section"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"All URIs are relative to https://www.strava.com/api/v3","category":"page"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"Method HTTP request Description\ngeteffortsbysegmentid GET /segment_efforts List Segment Efforts\ngetsegmenteffortbyid GET /segment_efforts/{id} Get Segment Effort","category":"page"},{"location":"SegmentEffortsApi/#**get*efforts*by*segment*id**","page":"SegmentEffortsApi","title":"geteffortsbysegmentid","text":"","category":"section"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"geteffortsbysegmentid(api::SegmentEffortsApi, segmentid::Int64; startdatelocal=nothing, enddatelocal=nothing, perpage=nothing, _mediaType=nothing) -> Vector{DetailedSegmentEffort}, OpenAPI.Clients.ApiResponse <br/> geteffortsbysegmentid(api::SegmentEffortsApi, responsestream::Channel, segmentid::Int64; startdatelocal=nothing, enddatelocal=nothing, per_page=nothing, _mediaType=nothing) -> Channel{ Vector{DetailedSegmentEffort} }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"List Segment Efforts","category":"page"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"Returns a set of the authenticated athlete's segment efforts for a given segment.  Requires subscription.","category":"page"},{"location":"SegmentEffortsApi/#Required-Parameters","page":"SegmentEffortsApi","title":"Required Parameters","text":"","category":"section"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"Name Type Description Notes\n_api SegmentEffortsApi API context \nsegment_id Int64 The identifier of the segment. ","category":"page"},{"location":"SegmentEffortsApi/#Optional-Parameters","page":"SegmentEffortsApi","title":"Optional Parameters","text":"","category":"section"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"Name Type Description Notes\nstartdatelocal ZonedDateTime ISO 8601 formatted date time. [default to nothing]\nenddatelocal ZonedDateTime ISO 8601 formatted date time. [default to nothing]\nper_page Int64 Number of items per page. Defaults to 30. [default to 30]","category":"page"},{"location":"SegmentEffortsApi/#Return-type","page":"SegmentEffortsApi","title":"Return type","text":"","category":"section"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"Vector{DetailedSegmentEffort}","category":"page"},{"location":"SegmentEffortsApi/#Authorization","page":"SegmentEffortsApi","title":"Authorization","text":"","category":"section"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"strava_oauth","category":"page"},{"location":"SegmentEffortsApi/#HTTP-request-headers","page":"SegmentEffortsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"SegmentEffortsApi/#**get*segment*effort*by*id**","page":"SegmentEffortsApi","title":"getsegmenteffortbyid","text":"","category":"section"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"getsegmenteffortbyid(api::SegmentEffortsApi, id::Int64; _mediaType=nothing) -> DetailedSegmentEffort, OpenAPI.Clients.ApiResponse <br/> getsegmenteffortbyid(api::SegmentEffortsApi, response_stream::Channel, id::Int64; _mediaType=nothing) -> Channel{ DetailedSegmentEffort }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"Get Segment Effort","category":"page"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.","category":"page"},{"location":"SegmentEffortsApi/#Required-Parameters-2","page":"SegmentEffortsApi","title":"Required Parameters","text":"","category":"section"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"Name Type Description Notes\n_api SegmentEffortsApi API context \nid Int64 The identifier of the segment effort. ","category":"page"},{"location":"SegmentEffortsApi/#Return-type-2","page":"SegmentEffortsApi","title":"Return type","text":"","category":"section"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"DetailedSegmentEffort","category":"page"},{"location":"SegmentEffortsApi/#Authorization-2","page":"SegmentEffortsApi","title":"Authorization","text":"","category":"section"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"strava_oauth","category":"page"},{"location":"SegmentEffortsApi/#HTTP-request-headers-2","page":"SegmentEffortsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"SegmentEffortsApi/","page":"SegmentEffortsApi","title":"SegmentEffortsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"StreamSet/#StreamSet","page":"StreamSet","title":"StreamSet","text":"","category":"section"},{"location":"StreamSet/#Properties","page":"StreamSet","title":"Properties","text":"","category":"section"},{"location":"StreamSet/","page":"StreamSet","title":"StreamSet","text":"Name Type Description Notes\ntime ***TimeStream**  [optional] [default to nothing]\ndistance ***DistanceStream**  [optional] [default to nothing]\nlatlng ***LatLngStream**  [optional] [default to nothing]\naltitude ***AltitudeStream**  [optional] [default to nothing]\nvelocity_smooth ***SmoothVelocityStream**  [optional] [default to nothing]\nheartrate ***HeartrateStream**  [optional] [default to nothing]\ncadence ***CadenceStream**  [optional] [default to nothing]\nwatts ***PowerStream**  [optional] [default to nothing]\ntemp ***TemperatureStream**  [optional] [default to nothing]\nmoving ***MovingStream**  [optional] [default to nothing]\ngrade_smooth ***SmoothGradeStream**  [optional] [default to nothing]","category":"page"},{"location":"StreamSet/","page":"StreamSet","title":"StreamSet","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"TemperatureStream/#TemperatureStream","page":"TemperatureStream","title":"TemperatureStream","text":"","category":"section"},{"location":"TemperatureStream/#Properties","page":"TemperatureStream","title":"Properties","text":"","category":"section"},{"location":"TemperatureStream/","page":"TemperatureStream","title":"TemperatureStream","text":"Name Type Description Notes\noriginal_size Int64 The number of data points in this stream [optional] [default to nothing]\nresolution String The level of detail (sampling) in which this stream was returned [optional] [default to nothing]\nseries_type String The base series used in the case the stream was downsampled [optional] [default to nothing]\ndata Vector{Int64} The sequence of temperature values for this stream, in celsius degrees [optional] [default to nothing]","category":"page"},{"location":"TemperatureStream/","page":"TemperatureStream","title":"TemperatureStream","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"SegmentsApi/#SegmentsApi","page":"SegmentsApi","title":"SegmentsApi","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"All URIs are relative to https://www.strava.com/api/v3","category":"page"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Method HTTP request Description\nexplore_segments GET /segments/explore Explore segments\ngetloggedinathletestarred_segments GET /segments/starred List Starred Segments\ngetsegmentby_id GET /segments/{id} Get Segment\nstar_segment PUT /segments/{id}/starred Star Segment","category":"page"},{"location":"SegmentsApi/#**explore_segments**","page":"SegmentsApi","title":"explore_segments","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"exploresegments(api::SegmentsApi, bounds::Vector{Float32}; activitytype=nothing, mincat=nothing, maxcat=nothing, _mediaType=nothing) -> ExplorerResponse, OpenAPI.Clients.ApiResponse <br/> exploresegments(api::SegmentsApi, responsestream::Channel, bounds::Vector{Float32}; activitytype=nothing, mincat=nothing, max_cat=nothing, _mediaType=nothing) -> Channel{ ExplorerResponse }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Explore segments","category":"page"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Returns the top 10 segments matching a specified query.","category":"page"},{"location":"SegmentsApi/#Required-Parameters","page":"SegmentsApi","title":"Required Parameters","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Name Type Description Notes\n_api SegmentsApi API context \nbounds Vector{Float32} The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude] ","category":"page"},{"location":"SegmentsApi/#Optional-Parameters","page":"SegmentsApi","title":"Optional Parameters","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Name Type Description Notes\nactivity_type String Desired activity type. [default to nothing]\nmin_cat Int64 The minimum climbing category. [default to nothing]\nmax_cat Int64 The maximum climbing category. [default to nothing]","category":"page"},{"location":"SegmentsApi/#Return-type","page":"SegmentsApi","title":"Return type","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"ExplorerResponse","category":"page"},{"location":"SegmentsApi/#Authorization","page":"SegmentsApi","title":"Authorization","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"strava_oauth","category":"page"},{"location":"SegmentsApi/#HTTP-request-headers","page":"SegmentsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"SegmentsApi/#**get*logged*in*athlete*starred_segments**","page":"SegmentsApi","title":"getloggedinathletestarred_segments","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"getloggedinathletestarredsegments(api::SegmentsApi; page=nothing, perpage=nothing, _mediaType=nothing) -> Vector{SummarySegment}, OpenAPI.Clients.ApiResponse <br/> getloggedinathletestarredsegments(api::SegmentsApi, responsestream::Channel; page=nothing, per_page=nothing, _mediaType=nothing) -> Channel{ Vector{SummarySegment} }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"List Starred Segments","category":"page"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"List of the authenticated athlete's starred segments. Private segments are filtered out unless requested by a token with read_all scope.","category":"page"},{"location":"SegmentsApi/#Required-Parameters-2","page":"SegmentsApi","title":"Required Parameters","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Name Type Description Notes\n_api SegmentsApi API context ","category":"page"},{"location":"SegmentsApi/#Optional-Parameters-2","page":"SegmentsApi","title":"Optional Parameters","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Name Type Description Notes\npage Int64 Page number. Defaults to 1. [default to nothing]\nper_page Int64 Number of items per page. Defaults to 30. [default to 30]","category":"page"},{"location":"SegmentsApi/#Return-type-2","page":"SegmentsApi","title":"Return type","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Vector{SummarySegment}","category":"page"},{"location":"SegmentsApi/#Authorization-2","page":"SegmentsApi","title":"Authorization","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"strava_oauth","category":"page"},{"location":"SegmentsApi/#HTTP-request-headers-2","page":"SegmentsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"SegmentsApi/#**get*segment*by_id**","page":"SegmentsApi","title":"getsegmentby_id","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"getsegmentbyid(api::SegmentsApi, id::Int64; mediaType=nothing) -> DetailedSegment, OpenAPI.Clients.ApiResponse <br/> getsegmentbyid(api::SegmentsApi, responsestream::Channel, id::Int64; _mediaType=nothing) -> Channel{ DetailedSegment }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Get Segment","category":"page"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.","category":"page"},{"location":"SegmentsApi/#Required-Parameters-3","page":"SegmentsApi","title":"Required Parameters","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Name Type Description Notes\n_api SegmentsApi API context \nid Int64 The identifier of the segment. ","category":"page"},{"location":"SegmentsApi/#Return-type-3","page":"SegmentsApi","title":"Return type","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"DetailedSegment","category":"page"},{"location":"SegmentsApi/#Authorization-3","page":"SegmentsApi","title":"Authorization","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"strava_oauth","category":"page"},{"location":"SegmentsApi/#HTTP-request-headers-3","page":"SegmentsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"SegmentsApi/#**star_segment**","page":"SegmentsApi","title":"star_segment","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"starsegment(api::SegmentsApi, id::Int64, starred::Bool; mediaType=nothing) -> DetailedSegment, OpenAPI.Clients.ApiResponse <br/> starsegment(api::SegmentsApi, responsestream::Channel, id::Int64, starred::Bool; _mediaType=nothing) -> Channel{ DetailedSegment }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Star Segment","category":"page"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.","category":"page"},{"location":"SegmentsApi/#Required-Parameters-4","page":"SegmentsApi","title":"Required Parameters","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Name Type Description Notes\n_api SegmentsApi API context \nid Int64 The identifier of the segment to star. \nstarred Bool If true, star the segment; if false, unstar the segment. ","category":"page"},{"location":"SegmentsApi/#Return-type-4","page":"SegmentsApi","title":"Return type","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"DetailedSegment","category":"page"},{"location":"SegmentsApi/#Authorization-4","page":"SegmentsApi","title":"Authorization","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"strava_oauth","category":"page"},{"location":"SegmentsApi/#HTTP-request-headers-4","page":"SegmentsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"Content-Type: multipart/form-data\nAccept: application/json","category":"page"},{"location":"SegmentsApi/","page":"SegmentsApi","title":"SegmentsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"SummarySegmentEffort/#SummarySegmentEffort","page":"SummarySegmentEffort","title":"SummarySegmentEffort","text":"","category":"section"},{"location":"SummarySegmentEffort/#Properties","page":"SummarySegmentEffort","title":"Properties","text":"","category":"section"},{"location":"SummarySegmentEffort/","page":"SummarySegmentEffort","title":"SummarySegmentEffort","text":"Name Type Description Notes\nid Int64 The unique identifier of this effort [optional] [default to nothing]\nactivity_id Int64 The unique identifier of the activity related to this effort [optional] [default to nothing]\nelapsed_time Int64 The effort&#39;s elapsed time [optional] [default to nothing]\nstart_date ZonedDateTime The time at which the effort was started. [optional] [default to nothing]\nstartdatelocal ZonedDateTime The time at which the effort was started in the local timezone. [optional] [default to nothing]\ndistance Float32 The effort&#39;s distance in meters [optional] [default to nothing]\nis_kom Bool Whether this effort is the current best on the leaderboard [optional] [default to nothing]","category":"page"},{"location":"SummarySegmentEffort/","page":"SummarySegmentEffort","title":"SummarySegmentEffort","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"SummaryActivity/#SummaryActivity","page":"SummaryActivity","title":"SummaryActivity","text":"","category":"section"},{"location":"SummaryActivity/#Properties","page":"SummaryActivity","title":"Properties","text":"","category":"section"},{"location":"SummaryActivity/","page":"SummaryActivity","title":"SummaryActivity","text":"Name Type Description Notes\nid Int64 The unique identifier of the activity [optional] [default to nothing]\nexternal_id String The identifier provided at upload time [optional] [default to nothing]\nupload_id Int64 The identifier of the upload that resulted in this activity [optional] [default to nothing]\nathlete ***MetaAthlete**  [optional] [default to nothing]\nname String The name of the activity [optional] [default to nothing]\ndistance Float32 The activity&#39;s distance, in meters [optional] [default to nothing]\nmoving_time Int64 The activity&#39;s moving time, in seconds [optional] [default to nothing]\nelapsed_time Int64 The activity&#39;s elapsed time, in seconds [optional] [default to nothing]\ntotalelevationgain Float32 The activity&#39;s total elevation gain. [optional] [default to nothing]\nelev_high Float32 The activity&#39;s highest elevation, in meters [optional] [default to nothing]\nelev_low Float32 The activity&#39;s lowest elevation, in meters [optional] [default to nothing]\ntype ***ActivityType**  [optional] [default to nothing]\nsport_type ***SportType**  [optional] [default to nothing]\nstart_date ZonedDateTime The time at which the activity was started. [optional] [default to nothing]\nstartdatelocal ZonedDateTime The time at which the activity was started in the local timezone. [optional] [default to nothing]\ntimezone String The timezone of the activity [optional] [default to nothing]\nstart_latlng Vector{Float32} A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. [optional] [default to nothing]\nend_latlng Vector{Float32} A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. [optional] [default to nothing]\nachievement_count Int64 The number of achievements gained during this activity [optional] [default to nothing]\nkudos_count Int64 The number of kudos given for this activity [optional] [default to nothing]\ncomment_count Int64 The number of comments for this activity [optional] [default to nothing]\nathlete_count Int64 The number of athletes for taking part in a group activity [optional] [default to nothing]\nphoto_count Int64 The number of Instagram photos for this activity [optional] [default to nothing]\ntotalphotocount Int64 The number of Instagram and Strava photos for this activity [optional] [default to nothing]\nmap ***PolylineMap**  [optional] [default to nothing]\ntrainer Bool Whether this activity was recorded on a training machine [optional] [default to nothing]\ncommute Bool Whether this activity is a commute [optional] [default to nothing]\nmanual Bool Whether this activity was created manually [optional] [default to nothing]\nprivate Bool Whether this activity is private [optional] [default to nothing]\nflagged Bool Whether this activity is flagged [optional] [default to nothing]\nworkout_type Int64 The activity&#39;s workout type [optional] [default to nothing]\nuploadidstr String The unique identifier of the upload in string format [optional] [default to nothing]\naverage_speed Float32 The activity&#39;s average speed, in meters per second [optional] [default to nothing]\nmax_speed Float32 The activity&#39;s max speed, in meters per second [optional] [default to nothing]\nhas_kudoed Bool Whether the logged-in athlete has kudoed this activity [optional] [default to nothing]\nhidefromhome Bool Whether the activity is muted [optional] [default to nothing]\ngear_id String The id of the gear for the activity [optional] [default to nothing]\nkilojoules Float32 The total work done in kilojoules during this activity. Rides only [optional] [default to nothing]\naverage_watts Float32 Average power output in watts during this activity. Rides only [optional] [default to nothing]\ndevice_watts Bool Whether the watts are from a power meter, false if estimated [optional] [default to nothing]\nmax_watts Int64 Rides with power meter data only [optional] [default to nothing]\nweightedaveragewatts Int64 Similar to Normalized Power. Rides with power meter data only [optional] [default to nothing]","category":"page"},{"location":"SummaryActivity/","page":"SummaryActivity","title":"SummaryActivity","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"DistanceStream/#DistanceStream","page":"DistanceStream","title":"DistanceStream","text":"","category":"section"},{"location":"DistanceStream/#Properties","page":"DistanceStream","title":"Properties","text":"","category":"section"},{"location":"DistanceStream/","page":"DistanceStream","title":"DistanceStream","text":"Name Type Description Notes\noriginal_size Int64 The number of data points in this stream [optional] [default to nothing]\nresolution String The level of detail (sampling) in which this stream was returned [optional] [default to nothing]\nseries_type String The base series used in the case the stream was downsampled [optional] [default to nothing]\ndata Vector{Float32} The sequence of distance values for this stream, in meters [optional] [default to nothing]","category":"page"},{"location":"DistanceStream/","page":"DistanceStream","title":"DistanceStream","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"SportType/#SportType","page":"SportType","title":"SportType","text":"","category":"section"},{"location":"SportType/#Properties","page":"SportType","title":"Properties","text":"","category":"section"},{"location":"SportType/","page":"SportType","title":"SportType","text":"Name | Type | Description | Notes ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì | ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì- | ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì- | ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì-","category":"page"},{"location":"SportType/","page":"SportType","title":"SportType","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"PhotosSummary/#PhotosSummary","page":"PhotosSummary","title":"PhotosSummary","text":"","category":"section"},{"location":"PhotosSummary/#Properties","page":"PhotosSummary","title":"Properties","text":"","category":"section"},{"location":"PhotosSummary/","page":"PhotosSummary","title":"PhotosSummary","text":"Name Type Description Notes\ncount Int64 The number of photos [optional] [default to nothing]\nprimary ***PhotosSummaryPrimary**  [optional] [default to nothing]","category":"page"},{"location":"PhotosSummary/","page":"PhotosSummary","title":"PhotosSummary","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"DetailedActivity/#DetailedActivity","page":"DetailedActivity","title":"DetailedActivity","text":"","category":"section"},{"location":"DetailedActivity/#Properties","page":"DetailedActivity","title":"Properties","text":"","category":"section"},{"location":"DetailedActivity/","page":"DetailedActivity","title":"DetailedActivity","text":"Name Type Description Notes\nid Int64 The unique identifier of the activity [optional] [default to nothing]\nexternal_id String The identifier provided at upload time [optional] [default to nothing]\nupload_id Int64 The identifier of the upload that resulted in this activity [optional] [default to nothing]\nathlete ***MetaAthlete**  [optional] [default to nothing]\nname String The name of the activity [optional] [default to nothing]\ndistance Float32 The activity&#39;s distance, in meters [optional] [default to nothing]\nmoving_time Int64 The activity&#39;s moving time, in seconds [optional] [default to nothing]\nelapsed_time Int64 The activity&#39;s elapsed time, in seconds [optional] [default to nothing]\ntotalelevationgain Float32 The activity&#39;s total elevation gain. [optional] [default to nothing]\nelev_high Float32 The activity&#39;s highest elevation, in meters [optional] [default to nothing]\nelev_low Float32 The activity&#39;s lowest elevation, in meters [optional] [default to nothing]\ntype ***ActivityType**  [optional] [default to nothing]\nsport_type ***SportType**  [optional] [default to nothing]\nstart_date ZonedDateTime The time at which the activity was started. [optional] [default to nothing]\nstartdatelocal ZonedDateTime The time at which the activity was started in the local timezone. [optional] [default to nothing]\ntimezone String The timezone of the activity [optional] [default to nothing]\nstart_latlng Vector{Float32} A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. [optional] [default to nothing]\nend_latlng Vector{Float32} A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. [optional] [default to nothing]\nachievement_count Int64 The number of achievements gained during this activity [optional] [default to nothing]\nkudos_count Int64 The number of kudos given for this activity [optional] [default to nothing]\ncomment_count Int64 The number of comments for this activity [optional] [default to nothing]\nathlete_count Int64 The number of athletes for taking part in a group activity [optional] [default to nothing]\nphoto_count Int64 The number of Instagram photos for this activity [optional] [default to nothing]\ntotalphotocount Int64 The number of Instagram and Strava photos for this activity [optional] [default to nothing]\nmap ***PolylineMap**  [optional] [default to nothing]\ntrainer Bool Whether this activity was recorded on a training machine [optional] [default to nothing]\ncommute Bool Whether this activity is a commute [optional] [default to nothing]\nmanual Bool Whether this activity was created manually [optional] [default to nothing]\nprivate Bool Whether this activity is private [optional] [default to nothing]\nflagged Bool Whether this activity is flagged [optional] [default to nothing]\nworkout_type Int64 The activity&#39;s workout type [optional] [default to nothing]\nuploadidstr String The unique identifier of the upload in string format [optional] [default to nothing]\naverage_speed Float32 The activity&#39;s average speed, in meters per second [optional] [default to nothing]\nmax_speed Float32 The activity&#39;s max speed, in meters per second [optional] [default to nothing]\nhas_kudoed Bool Whether the logged-in athlete has kudoed this activity [optional] [default to nothing]\nhidefromhome Bool Whether the activity is muted [optional] [default to nothing]\ngear_id String The id of the gear for the activity [optional] [default to nothing]\nkilojoules Float32 The total work done in kilojoules during this activity. Rides only [optional] [default to nothing]\naverage_watts Float32 Average power output in watts during this activity. Rides only [optional] [default to nothing]\ndevice_watts Bool Whether the watts are from a power meter, false if estimated [optional] [default to nothing]\nmax_watts Int64 Rides with power meter data only [optional] [default to nothing]\nweightedaveragewatts Int64 Similar to Normalized Power. Rides with power meter data only [optional] [default to nothing]\ndescription String The description of the activity [optional] [default to nothing]\nphotos ***PhotosSummary**  [optional] [default to nothing]\ngear ***SummaryGear**  [optional] [default to nothing]\ncalories Float32 The number of kilocalories consumed during this activity [optional] [default to nothing]\nsegment_efforts Vector{DetailedSegmentEffort}  [optional] [default to nothing]\ndevice_name String The name of the device used to record the activity [optional] [default to nothing]\nembed_token String The token used to embed a Strava activity [optional] [default to nothing]\nsplits_metric Vector{Split} The splits of this activity in metric units (for runs) [optional] [default to nothing]\nsplits_standard Vector{Split} The splits of this activity in imperial units (for runs) [optional] [default to nothing]\nlaps Vector{Lap}  [optional] [default to nothing]\nbest_efforts Vector{DetailedSegmentEffort}  [optional] [default to nothing]","category":"page"},{"location":"DetailedActivity/","page":"DetailedActivity","title":"DetailedActivity","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"TimedZoneRange/#TimedZoneRange","page":"TimedZoneRange","title":"TimedZoneRange","text":"","category":"section"},{"location":"TimedZoneRange/#Properties","page":"TimedZoneRange","title":"Properties","text":"","category":"section"},{"location":"TimedZoneRange/","page":"TimedZoneRange","title":"TimedZoneRange","text":"Name Type Description Notes\nmin Int64 The minimum value in the range. [optional] [default to nothing]\nmax Int64 The maximum value in the range. [optional] [default to nothing]\ntime Int64 The number of seconds spent in this zone [optional] [default to nothing]","category":"page"},{"location":"TimedZoneRange/","page":"TimedZoneRange","title":"TimedZoneRange","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"MovingStream/#MovingStream","page":"MovingStream","title":"MovingStream","text":"","category":"section"},{"location":"MovingStream/#Properties","page":"MovingStream","title":"Properties","text":"","category":"section"},{"location":"MovingStream/","page":"MovingStream","title":"MovingStream","text":"Name Type Description Notes\noriginal_size Int64 The number of data points in this stream [optional] [default to nothing]\nresolution String The level of detail (sampling) in which this stream was returned [optional] [default to nothing]\nseries_type String The base series used in the case the stream was downsampled [optional] [default to nothing]\ndata Vector{Bool} The sequence of moving values for this stream, as boolean values [optional] [default to nothing]","category":"page"},{"location":"MovingStream/","page":"MovingStream","title":"MovingStream","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"Waypoint/#Waypoint","page":"Waypoint","title":"Waypoint","text":"","category":"section"},{"location":"Waypoint/#Properties","page":"Waypoint","title":"Properties","text":"","category":"section"},{"location":"Waypoint/","page":"Waypoint","title":"Waypoint","text":"Name Type Description Notes\nlatlng Vector{Float32} A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. [optional] [default to nothing]\ntarget_latlng Vector{Float32} A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers. [optional] [default to nothing]\ncategories Vector{String} Categories that the waypoint belongs to [optional] [default to nothing]\ntitle String A title for the waypoint [optional] [default to nothing]\ndescription String A description of the waypoint (optional) [optional] [default to nothing]\ndistanceintoroute Int64 The number meters along the route that the waypoint is located [optional] [default to nothing]","category":"page"},{"location":"Waypoint/","page":"Waypoint","title":"Waypoint","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"Lap/#Lap","page":"Lap","title":"Lap","text":"","category":"section"},{"location":"Lap/#Properties","page":"Lap","title":"Properties","text":"","category":"section"},{"location":"Lap/","page":"Lap","title":"Lap","text":"Name Type Description Notes\nid Int64 The unique identifier of this lap [optional] [default to nothing]\nactivity ***MetaActivity**  [optional] [default to nothing]\nathlete ***MetaAthlete**  [optional] [default to nothing]\naverage_cadence Float32 The lap&#39;s average cadence [optional] [default to nothing]\naverage_speed Float32 The lap&#39;s average speed [optional] [default to nothing]\ndistance Float32 The lap&#39;s distance, in meters [optional] [default to nothing]\nelapsed_time Int64 The lap&#39;s elapsed time, in seconds [optional] [default to nothing]\nstart_index Int64 The start index of this effort in its activity&#39;s stream [optional] [default to nothing]\nend_index Int64 The end index of this effort in its activity&#39;s stream [optional] [default to nothing]\nlap_index Int64 The index of this lap in the activity it belongs to [optional] [default to nothing]\nmax_speed Float32 The maximum speed of this lat, in meters per second [optional] [default to nothing]\nmoving_time Int64 The lap&#39;s moving time, in seconds [optional] [default to nothing]\nname String The name of the lap [optional] [default to nothing]\npace_zone Int64 The athlete&#39;s pace zone during this lap [optional] [default to nothing]\nsplit Int64  [optional] [default to nothing]\nstart_date ZonedDateTime The time at which the lap was started. [optional] [default to nothing]\nstartdatelocal ZonedDateTime The time at which the lap was started in the local timezone. [optional] [default to nothing]\ntotalelevationgain Float32 The elevation gain of this lap, in meters [optional] [default to nothing]","category":"page"},{"location":"Lap/","page":"Lap","title":"Lap","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"TimeStream/#TimeStream","page":"TimeStream","title":"TimeStream","text":"","category":"section"},{"location":"TimeStream/#Properties","page":"TimeStream","title":"Properties","text":"","category":"section"},{"location":"TimeStream/","page":"TimeStream","title":"TimeStream","text":"Name Type Description Notes\noriginal_size Int64 The number of data points in this stream [optional] [default to nothing]\nresolution String The level of detail (sampling) in which this stream was returned [optional] [default to nothing]\nseries_type String The base series used in the case the stream was downsampled [optional] [default to nothing]\ndata Vector{Int64} The sequence of time values for this stream, in seconds [optional] [default to nothing]","category":"page"},{"location":"TimeStream/","page":"TimeStream","title":"TimeStream","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"ZoneRange/#ZoneRange","page":"ZoneRange","title":"ZoneRange","text":"","category":"section"},{"location":"ZoneRange/#Properties","page":"ZoneRange","title":"Properties","text":"","category":"section"},{"location":"ZoneRange/","page":"ZoneRange","title":"ZoneRange","text":"Name Type Description Notes\nmin Int64 The minimum value in the range. [optional] [default to nothing]\nmax Int64 The maximum value in the range. [optional] [default to nothing]","category":"page"},{"location":"ZoneRange/","page":"ZoneRange","title":"ZoneRange","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"SmoothGradeStream/#SmoothGradeStream","page":"SmoothGradeStream","title":"SmoothGradeStream","text":"","category":"section"},{"location":"SmoothGradeStream/#Properties","page":"SmoothGradeStream","title":"Properties","text":"","category":"section"},{"location":"SmoothGradeStream/","page":"SmoothGradeStream","title":"SmoothGradeStream","text":"Name Type Description Notes\noriginal_size Int64 The number of data points in this stream [optional] [default to nothing]\nresolution String The level of detail (sampling) in which this stream was returned [optional] [default to nothing]\nseries_type String The base series used in the case the stream was downsampled [optional] [default to nothing]\ndata Vector{Float32} The sequence of grade values for this stream, as percents of a grade [optional] [default to nothing]","category":"page"},{"location":"SmoothGradeStream/","page":"SmoothGradeStream","title":"SmoothGradeStream","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"ClubsApi/#ClubsApi","page":"ClubsApi","title":"ClubsApi","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"All URIs are relative to https://www.strava.com/api/v3","category":"page"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Method HTTP request Description\ngetclubactivitiesbyid GET /clubs/{id}/activities List Club Activities\ngetclubadminsbyid GET /clubs/{id}/admins List Club Administrators\ngetclubby_id GET /clubs/{id} Get Club\ngetclubmembersbyid GET /clubs/{id}/members List Club Members\ngetloggedinathleteclubs GET /athlete/clubs List Athlete Clubs","category":"page"},{"location":"ClubsApi/#**get*club*activities*by*id**","page":"ClubsApi","title":"getclubactivitiesbyid","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"getclubactivitiesbyid(api::ClubsApi, id::Int64; page=nothing, perpage=nothing, mediaType=nothing) -> Vector{ClubActivity}, OpenAPI.Clients.ApiResponse <br/> getclubactivitiesbyid(api::ClubsApi, responsestream::Channel, id::Int64; page=nothing, perpage=nothing, _mediaType=nothing) -> Channel{ Vector{ClubActivity} }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"List Club Activities","category":"page"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.","category":"page"},{"location":"ClubsApi/#Required-Parameters","page":"ClubsApi","title":"Required Parameters","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Name Type Description Notes\n_api ClubsApi API context \nid Int64 The identifier of the club. ","category":"page"},{"location":"ClubsApi/#Optional-Parameters","page":"ClubsApi","title":"Optional Parameters","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Name Type Description Notes\npage Int64 Page number. Defaults to 1. [default to nothing]\nper_page Int64 Number of items per page. Defaults to 30. [default to 30]","category":"page"},{"location":"ClubsApi/#Return-type","page":"ClubsApi","title":"Return type","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Vector{ClubActivity}","category":"page"},{"location":"ClubsApi/#Authorization","page":"ClubsApi","title":"Authorization","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"strava_oauth","category":"page"},{"location":"ClubsApi/#HTTP-request-headers","page":"ClubsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"ClubsApi/#**get*club*admins*by*id**","page":"ClubsApi","title":"getclubadminsbyid","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"getclubadminsbyid(api::ClubsApi, id::Int64; page=nothing, perpage=nothing, mediaType=nothing) -> Vector{SummaryAthlete}, OpenAPI.Clients.ApiResponse <br/> getclubadminsbyid(api::ClubsApi, responsestream::Channel, id::Int64; page=nothing, perpage=nothing, _mediaType=nothing) -> Channel{ Vector{SummaryAthlete} }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"List Club Administrators","category":"page"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Returns a list of the administrators of a given club.","category":"page"},{"location":"ClubsApi/#Required-Parameters-2","page":"ClubsApi","title":"Required Parameters","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Name Type Description Notes\n_api ClubsApi API context \nid Int64 The identifier of the club. ","category":"page"},{"location":"ClubsApi/#Optional-Parameters-2","page":"ClubsApi","title":"Optional Parameters","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Name Type Description Notes\npage Int64 Page number. Defaults to 1. [default to nothing]\nper_page Int64 Number of items per page. Defaults to 30. [default to 30]","category":"page"},{"location":"ClubsApi/#Return-type-2","page":"ClubsApi","title":"Return type","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Vector{SummaryAthlete}","category":"page"},{"location":"ClubsApi/#Authorization-2","page":"ClubsApi","title":"Authorization","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"strava_oauth","category":"page"},{"location":"ClubsApi/#HTTP-request-headers-2","page":"ClubsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"ClubsApi/#**get*club*by_id**","page":"ClubsApi","title":"getclubby_id","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"getclubbyid(api::ClubsApi, id::Int64; mediaType=nothing) -> DetailedClub, OpenAPI.Clients.ApiResponse <br/> getclubbyid(api::ClubsApi, responsestream::Channel, id::Int64; _mediaType=nothing) -> Channel{ DetailedClub }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Get Club","category":"page"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Returns a given club using its identifier.","category":"page"},{"location":"ClubsApi/#Required-Parameters-3","page":"ClubsApi","title":"Required Parameters","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Name Type Description Notes\n_api ClubsApi API context \nid Int64 The identifier of the club. ","category":"page"},{"location":"ClubsApi/#Return-type-3","page":"ClubsApi","title":"Return type","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"DetailedClub","category":"page"},{"location":"ClubsApi/#Authorization-3","page":"ClubsApi","title":"Authorization","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"strava_oauth","category":"page"},{"location":"ClubsApi/#HTTP-request-headers-3","page":"ClubsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"ClubsApi/#**get*club*members*by*id**","page":"ClubsApi","title":"getclubmembersbyid","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"getclubmembersbyid(api::ClubsApi, id::Int64; page=nothing, perpage=nothing, mediaType=nothing) -> Vector{ClubAthlete}, OpenAPI.Clients.ApiResponse <br/> getclubmembersbyid(api::ClubsApi, responsestream::Channel, id::Int64; page=nothing, perpage=nothing, _mediaType=nothing) -> Channel{ Vector{ClubAthlete} }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"List Club Members","category":"page"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Returns a list of the athletes who are members of a given club.","category":"page"},{"location":"ClubsApi/#Required-Parameters-4","page":"ClubsApi","title":"Required Parameters","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Name Type Description Notes\n_api ClubsApi API context \nid Int64 The identifier of the club. ","category":"page"},{"location":"ClubsApi/#Optional-Parameters-3","page":"ClubsApi","title":"Optional Parameters","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Name Type Description Notes\npage Int64 Page number. Defaults to 1. [default to nothing]\nper_page Int64 Number of items per page. Defaults to 30. [default to 30]","category":"page"},{"location":"ClubsApi/#Return-type-4","page":"ClubsApi","title":"Return type","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Vector{ClubAthlete}","category":"page"},{"location":"ClubsApi/#Authorization-4","page":"ClubsApi","title":"Authorization","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"strava_oauth","category":"page"},{"location":"ClubsApi/#HTTP-request-headers-4","page":"ClubsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"ClubsApi/#**get*logged*in*athlete*clubs**","page":"ClubsApi","title":"getloggedinathleteclubs","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"getloggedinathleteclubs(api::ClubsApi; page=nothing, perpage=nothing, mediaType=nothing) -> Vector{SummaryClub}, OpenAPI.Clients.ApiResponse <br/> getloggedinathleteclubs(api::ClubsApi, responsestream::Channel; page=nothing, perpage=nothing, _mediaType=nothing) -> Channel{ Vector{SummaryClub} }, OpenAPI.Clients.ApiResponse","category":"page"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"List Athlete Clubs","category":"page"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Returns a list of the clubs whose membership includes the authenticated athlete.","category":"page"},{"location":"ClubsApi/#Required-Parameters-5","page":"ClubsApi","title":"Required Parameters","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Name Type Description Notes\n_api ClubsApi API context ","category":"page"},{"location":"ClubsApi/#Optional-Parameters-4","page":"ClubsApi","title":"Optional Parameters","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Name Type Description Notes\npage Int64 Page number. Defaults to 1. [default to nothing]\nper_page Int64 Number of items per page. Defaults to 30. [default to 30]","category":"page"},{"location":"ClubsApi/#Return-type-5","page":"ClubsApi","title":"Return type","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Vector{SummaryClub}","category":"page"},{"location":"ClubsApi/#Authorization-5","page":"ClubsApi","title":"Authorization","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"strava_oauth","category":"page"},{"location":"ClubsApi/#HTTP-request-headers-5","page":"ClubsApi","title":"HTTP request headers","text":"","category":"section"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"Content-Type: Not defined\nAccept: application/json","category":"page"},{"location":"ClubsApi/","page":"ClubsApi","title":"ClubsApi","text":"[Back to top] [Back to API list] [Back to Model list] [Back to README]","category":"page"},{"location":"Split/#Split","page":"Split","title":"Split","text":"","category":"section"},{"location":"Split/#Properties","page":"Split","title":"Properties","text":"","category":"section"},{"location":"Split/","page":"Split","title":"Split","text":"Name Type Description Notes\naverage_speed Float32 The average speed of this split, in meters per second [optional] [default to nothing]\ndistance Float32 The distance of this split, in meters [optional] [default to nothing]\nelapsed_time Int64 The elapsed time of this split, in seconds [optional] [default to nothing]\nelevation_difference Float32 The elevation difference of this split, in meters [optional] [default to nothing]\npace_zone Int64 The pacing zone of this split [optional] [default to nothing]\nmoving_time Int64 The moving time of this split, in seconds [optional] [default to nothing]\nsplit Int64 N/A [optional] [default to nothing]","category":"page"},{"location":"Split/","page":"Split","title":"Split","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"Fault/#Fault","page":"Fault","title":"Fault","text":"","category":"section"},{"location":"Fault/#Properties","page":"Fault","title":"Properties","text":"","category":"section"},{"location":"Fault/","page":"Fault","title":"Fault","text":"Name Type Description Notes\nerrors Vector{Error} The set of specific errors associated with this fault, if any. [optional] [default to nothing]\nmessage String The message of the fault. [optional] [default to nothing]","category":"page"},{"location":"Fault/","page":"Fault","title":"Fault","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"Route/#Route","page":"Route","title":"Route","text":"","category":"section"},{"location":"Route/#Properties","page":"Route","title":"Properties","text":"","category":"section"},{"location":"Route/","page":"Route","title":"Route","text":"Name Type Description Notes\nathlete ***SummaryAthlete**  [optional] [default to nothing]\ndescription String The description of the route [optional] [default to nothing]\ndistance Float32 The route&#39;s distance, in meters [optional] [default to nothing]\nelevation_gain Float32 The route&#39;s elevation gain. [optional] [default to nothing]\nid Int64 The unique identifier of this route [optional] [default to nothing]\nid_str String The unique identifier of the route in string format [optional] [default to nothing]\nmap ***PolylineMap**  [optional] [default to nothing]\nname String The name of this route [optional] [default to nothing]\nprivate Bool Whether this route is private [optional] [default to nothing]\nstarred Bool Whether this route is starred by the logged-in athlete [optional] [default to nothing]\ntimestamp Int64 An epoch timestamp of when the route was created [optional] [default to nothing]\ntype Int64 This route&#39;s type (1 for ride, 2 for runs) [optional] [default to nothing]\nsub_type Int64 This route&#39;s sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed) [optional] [default to nothing]\ncreated_at ZonedDateTime The time at which the route was created [optional] [default to nothing]\nupdated_at ZonedDateTime The time at which the route was last updated [optional] [default to nothing]\nestimatedmovingtime Int64 Estimated time in seconds for the authenticated athlete to complete route [optional] [default to nothing]\nsegments Vector{SummarySegment} The segments traversed by this route [optional] [default to nothing]\nwaypoints Vector{Waypoint} The custom waypoints along this route [optional] [default to nothing]","category":"page"},{"location":"Route/","page":"Route","title":"Route","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"},{"location":"SmoothVelocityStream/#SmoothVelocityStream","page":"SmoothVelocityStream","title":"SmoothVelocityStream","text":"","category":"section"},{"location":"SmoothVelocityStream/#Properties","page":"SmoothVelocityStream","title":"Properties","text":"","category":"section"},{"location":"SmoothVelocityStream/","page":"SmoothVelocityStream","title":"SmoothVelocityStream","text":"Name Type Description Notes\noriginal_size Int64 The number of data points in this stream [optional] [default to nothing]\nresolution String The level of detail (sampling) in which this stream was returned [optional] [default to nothing]\nseries_type String The base series used in the case the stream was downsampled [optional] [default to nothing]\ndata Vector{Float32} The sequence of velocity values for this stream, in meters per second [optional] [default to nothing]","category":"page"},{"location":"SmoothVelocityStream/","page":"SmoothVelocityStream","title":"SmoothVelocityStream","text":"[Back to Model list] [Back to API list] [Back to README]","category":"page"}]
}
