using Logging
import Dates

# check if docker runs
if success(run(`docker ps`; wait = false))
    @info "Docker is fine, starting generation."
else
    @error("`docker ps` failed, please check if docker runs. Exiting...")
    exit()
end

using Pkg
using HTTP, OpenAPI, JSON

function postprocess_docs(docsfolder)
    #=
    # this is implemented
        3. Replace `../README` with `./README` in all files in `docs/src`.
        5. In `docs/src/README.md`: replace `docs/*` links with `./*`
        6. Replace `[**Vector{String}**](String.md)` with `**Vector{String}**`.
        7. Replace `[**Vector{Float32}**](Float32.md)` with `**Vector{Float32}**`.
    =#
    docfiles = readdir(docsfolder)
    for f in docfiles
        oldf = read(joinpath(docsfolder, f), String)
        newf = replace(oldf, "../README" => "./README")
        newf = replace(newf, "[**Vector{String}**](String.md)" => "**Vector{String}**")
        newf = replace(newf, "[**Vector{Float32}**](Float32.md)" => "**Vector{Float32}**")
        if f == "README.md"
            newf = replace(newf, "docs/" => "./")
        elseif f == "index.md"
            date_text = "Package code was generated at: `UTC $(Dates.now(Dates.UTC))`"
            newf = replace(newf, "<INSERT_DATE>" => date_text)
        end
        write(joinpath(docsfolder, f), newf)
    end

end

function generatepackage()
    devdir = dirname(@__DIR__)
    docdir = joinpath(devdir, "docs")
    gendir = joinpath(devdir, "generator")
    cd(devdir)
    @info "Working in $devdir"

    readme_file = read(joinpath(devdir, "README.md"), String)

    try
        r = HTTP.get("https://developers.strava.com/swagger/swagger.json");
        d = JSON.parse(String(r.body))
        @info "Downloaded and parsed API definition."

        OpenAPI.openapi_generator()
        @info "Started OpenAPI container, waiting little bit..."
        sleep(5) # sleeping, cause it helped a few times
        OpenAPI.generate(d;package_name = "StravaAPI", output_dir = devdir)
        OpenAPI.stop_openapi_generator()    
    catch e
        @error "Something failed horribly. Exiting..."
        println(e)
        exit()
    end
    @info "Package code generated with OpenAPI, continuing with postprocessing."

    cd(devdir)
    mv("README.md", joinpath(docdir, "README.md"); force=true)
    write("README.md", readme_file)
    @info "Moved generated readme to docs/"

    # move all md files docs -> docs/src
    docfiles = readdir(docdir)
    mkdir(joinpath(docdir, "src"))
    mv.(joinpath.(docdir, docfiles), joinpath.(docdir, "src", docfiles))
    @info "Moved generated doc files to docs/src"

    cp(joinpath(gendir, "docs.make.jl"), joinpath(docdir, "make.jl"))
    cp(joinpath(gendir, "docs.Project.toml"), joinpath(docdir, "Project.toml"))
    cp(joinpath(gendir, "docs.index.md"), joinpath(docdir, "src", "index.md"))
    cp(joinpath(gendir, "docs.docstrings.md"), joinpath(docdir, "src", "docstrings.md"))
    @info "Copied templated documentation files to docs/"

    postprocess_docs(joinpath(docdir, "src"))
    @info "Postprocessed autogenerated documentation."

    aproj = Base.active_project()
    Pkg.activate(docdir)
    Pkg.develop("StravaAPI")
    Pkg.activate(aproj)
    @info "Developed StravaAPI in docs project environment for local build."
    
end

generatepackage()
