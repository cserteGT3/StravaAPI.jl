# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ClubActivity

    ClubActivity(;
        athlete=nothing,
        name=nothing,
        distance=nothing,
        moving_time=nothing,
        elapsed_time=nothing,
        total_elevation_gain=nothing,
        type=nothing,
        sport_type=nothing,
        workout_type=nothing,
    )

    - athlete::MetaAthlete
    - name::String : The name of the activity
    - distance::Float32 : The activity&#39;s distance, in meters
    - moving_time::Int64 : The activity&#39;s moving time, in seconds
    - elapsed_time::Int64 : The activity&#39;s elapsed time, in seconds
    - total_elevation_gain::Float32 : The activity&#39;s total elevation gain.
    - type::ActivityType
    - sport_type::SportType
    - workout_type::Int64 : The activity&#39;s workout type
"""
Base.@kwdef mutable struct ClubActivity <: OpenAPI.APIModel
    athlete = nothing # spec type: Union{ Nothing, MetaAthlete }
    name::Union{Nothing, String} = nothing
    distance::Union{Nothing, Float32} = nothing
    moving_time::Union{Nothing, Int64} = nothing
    elapsed_time::Union{Nothing, Int64} = nothing
    total_elevation_gain::Union{Nothing, Float32} = nothing
    type = nothing # spec type: Union{ Nothing, ActivityType }
    sport_type = nothing # spec type: Union{ Nothing, SportType }
    workout_type::Union{Nothing, Int64} = nothing

    function ClubActivity(athlete, name, distance, moving_time, elapsed_time, total_elevation_gain, type, sport_type, workout_type, )
        OpenAPI.validate_property(ClubActivity, Symbol("athlete"), athlete)
        OpenAPI.validate_property(ClubActivity, Symbol("name"), name)
        OpenAPI.validate_property(ClubActivity, Symbol("distance"), distance)
        OpenAPI.validate_property(ClubActivity, Symbol("moving_time"), moving_time)
        OpenAPI.validate_property(ClubActivity, Symbol("elapsed_time"), elapsed_time)
        OpenAPI.validate_property(ClubActivity, Symbol("total_elevation_gain"), total_elevation_gain)
        OpenAPI.validate_property(ClubActivity, Symbol("type"), type)
        OpenAPI.validate_property(ClubActivity, Symbol("sport_type"), sport_type)
        OpenAPI.validate_property(ClubActivity, Symbol("workout_type"), workout_type)
        return new(athlete, name, distance, moving_time, elapsed_time, total_elevation_gain, type, sport_type, workout_type, )
    end
end # type ClubActivity

const _property_types_ClubActivity = Dict{Symbol,String}(Symbol("athlete")=>"MetaAthlete", Symbol("name")=>"String", Symbol("distance")=>"Float32", Symbol("moving_time")=>"Int64", Symbol("elapsed_time")=>"Int64", Symbol("total_elevation_gain")=>"Float32", Symbol("type")=>"ActivityType", Symbol("sport_type")=>"SportType", Symbol("workout_type")=>"Int64", )
OpenAPI.property_type(::Type{ ClubActivity }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ClubActivity[name]))}

function check_required(o::ClubActivity)
    true
end

function OpenAPI.validate_property(::Type{ ClubActivity }, name::Symbol, val)
    if name === Symbol("distance")
        OpenAPI.validate_param(name, "ClubActivity", :format, val, "float")
    end
    if name === Symbol("total_elevation_gain")
        OpenAPI.validate_param(name, "ClubActivity", :format, val, "float")
    end
end
