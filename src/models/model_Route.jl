# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Route

    Route(;
        athlete=nothing,
        description=nothing,
        distance=nothing,
        elevation_gain=nothing,
        id=nothing,
        id_str=nothing,
        map=nothing,
        name=nothing,
        private=nothing,
        starred=nothing,
        timestamp=nothing,
        type=nothing,
        sub_type=nothing,
        created_at=nothing,
        updated_at=nothing,
        estimated_moving_time=nothing,
        segments=nothing,
        waypoints=nothing,
    )

    - athlete::SummaryAthlete
    - description::String : The description of the route
    - distance::Float32 : The route&#39;s distance, in meters
    - elevation_gain::Float32 : The route&#39;s elevation gain.
    - id::Int64 : The unique identifier of this route
    - id_str::String : The unique identifier of the route in string format
    - map::PolylineMap
    - name::String : The name of this route
    - private::Bool : Whether this route is private
    - starred::Bool : Whether this route is starred by the logged-in athlete
    - timestamp::Int64 : An epoch timestamp of when the route was created
    - type::Int64 : This route&#39;s type (1 for ride, 2 for runs)
    - sub_type::Int64 : This route&#39;s sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)
    - created_at::ZonedDateTime : The time at which the route was created
    - updated_at::ZonedDateTime : The time at which the route was last updated
    - estimated_moving_time::Int64 : Estimated time in seconds for the authenticated athlete to complete route
    - segments::Vector{SummarySegment} : The segments traversed by this route
    - waypoints::Vector{Waypoint} : The custom waypoints along this route
"""
Base.@kwdef mutable struct Route <: OpenAPI.APIModel
    athlete = nothing # spec type: Union{ Nothing, SummaryAthlete }
    description::Union{Nothing, String} = nothing
    distance::Union{Nothing, Float32} = nothing
    elevation_gain::Union{Nothing, Float32} = nothing
    id::Union{Nothing, Int64} = nothing
    id_str::Union{Nothing, String} = nothing
    map = nothing # spec type: Union{ Nothing, PolylineMap }
    name::Union{Nothing, String} = nothing
    private::Union{Nothing, Bool} = nothing
    starred::Union{Nothing, Bool} = nothing
    timestamp::Union{Nothing, Int64} = nothing
    type::Union{Nothing, Int64} = nothing
    sub_type::Union{Nothing, Int64} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing
    estimated_moving_time::Union{Nothing, Int64} = nothing
    segments::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SummarySegment} }
    waypoints::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Waypoint} }

    function Route(athlete, description, distance, elevation_gain, id, id_str, map, name, private, starred, timestamp, type, sub_type, created_at, updated_at, estimated_moving_time, segments, waypoints, )
        OpenAPI.validate_property(Route, Symbol("athlete"), athlete)
        OpenAPI.validate_property(Route, Symbol("description"), description)
        OpenAPI.validate_property(Route, Symbol("distance"), distance)
        OpenAPI.validate_property(Route, Symbol("elevation_gain"), elevation_gain)
        OpenAPI.validate_property(Route, Symbol("id"), id)
        OpenAPI.validate_property(Route, Symbol("id_str"), id_str)
        OpenAPI.validate_property(Route, Symbol("map"), map)
        OpenAPI.validate_property(Route, Symbol("name"), name)
        OpenAPI.validate_property(Route, Symbol("private"), private)
        OpenAPI.validate_property(Route, Symbol("starred"), starred)
        OpenAPI.validate_property(Route, Symbol("timestamp"), timestamp)
        OpenAPI.validate_property(Route, Symbol("type"), type)
        OpenAPI.validate_property(Route, Symbol("sub_type"), sub_type)
        OpenAPI.validate_property(Route, Symbol("created_at"), created_at)
        OpenAPI.validate_property(Route, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(Route, Symbol("estimated_moving_time"), estimated_moving_time)
        OpenAPI.validate_property(Route, Symbol("segments"), segments)
        OpenAPI.validate_property(Route, Symbol("waypoints"), waypoints)
        return new(athlete, description, distance, elevation_gain, id, id_str, map, name, private, starred, timestamp, type, sub_type, created_at, updated_at, estimated_moving_time, segments, waypoints, )
    end
end # type Route

const _property_types_Route = Dict{Symbol,String}(Symbol("athlete")=>"SummaryAthlete", Symbol("description")=>"String", Symbol("distance")=>"Float32", Symbol("elevation_gain")=>"Float32", Symbol("id")=>"Int64", Symbol("id_str")=>"String", Symbol("map")=>"PolylineMap", Symbol("name")=>"String", Symbol("private")=>"Bool", Symbol("starred")=>"Bool", Symbol("timestamp")=>"Int64", Symbol("type")=>"Int64", Symbol("sub_type")=>"Int64", Symbol("created_at")=>"ZonedDateTime", Symbol("updated_at")=>"ZonedDateTime", Symbol("estimated_moving_time")=>"Int64", Symbol("segments")=>"Vector{SummarySegment}", Symbol("waypoints")=>"Vector{Waypoint}", )
OpenAPI.property_type(::Type{ Route }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Route[name]))}

function check_required(o::Route)
    true
end

function OpenAPI.validate_property(::Type{ Route }, name::Symbol, val)
    if name === Symbol("distance")
        OpenAPI.validate_param(name, "Route", :format, val, "float")
    end
    if name === Symbol("elevation_gain")
        OpenAPI.validate_param(name, "Route", :format, val, "float")
    end
    if name === Symbol("id")
        OpenAPI.validate_param(name, "Route", :format, val, "int64")
    end
    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "Route", :format, val, "date-time")
    end
    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "Route", :format, val, "date-time")
    end
    if name === Symbol("waypoints")
        OpenAPI.validate_param(name, "Route", :minItems, val, 0)
    end
end
