# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SummarySegment

    SummarySegment(;
        id=nothing,
        name=nothing,
        activity_type=nothing,
        distance=nothing,
        average_grade=nothing,
        maximum_grade=nothing,
        elevation_high=nothing,
        elevation_low=nothing,
        start_latlng=nothing,
        end_latlng=nothing,
        climb_category=nothing,
        city=nothing,
        state=nothing,
        country=nothing,
        private=nothing,
        athlete_pr_effort=nothing,
        athlete_segment_stats=nothing,
    )

    - id::Int64 : The unique identifier of this segment
    - name::String : The name of this segment
    - activity_type::String
    - distance::Float32 : The segment&#39;s distance, in meters
    - average_grade::Float32 : The segment&#39;s average grade, in percents
    - maximum_grade::Float32 : The segments&#39;s maximum grade, in percents
    - elevation_high::Float32 : The segments&#39;s highest elevation, in meters
    - elevation_low::Float32 : The segments&#39;s lowest elevation, in meters
    - start_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
    - end_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
    - climb_category::Int64 : The category of the climb [0, 5]. Higher is harder ie. 5 is Hors cat√©gorie, 0 is uncategorized in climb_category.
    - city::String : The segments&#39;s city.
    - state::String : The segments&#39;s state or geographical region.
    - country::String : The segment&#39;s country.
    - private::Bool : Whether this segment is private.
    - athlete_pr_effort::SummaryPRSegmentEffort
    - athlete_segment_stats::SummarySegmentEffort
"""
Base.@kwdef mutable struct SummarySegment <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    activity_type::Union{Nothing, String} = nothing
    distance::Union{Nothing, Float32} = nothing
    average_grade::Union{Nothing, Float32} = nothing
    maximum_grade::Union{Nothing, Float32} = nothing
    elevation_high::Union{Nothing, Float32} = nothing
    elevation_low::Union{Nothing, Float32} = nothing
    start_latlng::Union{Nothing, Vector{Float32}} = nothing
    end_latlng::Union{Nothing, Vector{Float32}} = nothing
    climb_category::Union{Nothing, Int64} = nothing
    city::Union{Nothing, String} = nothing
    state::Union{Nothing, String} = nothing
    country::Union{Nothing, String} = nothing
    private::Union{Nothing, Bool} = nothing
    athlete_pr_effort = nothing # spec type: Union{ Nothing, SummaryPRSegmentEffort }
    athlete_segment_stats = nothing # spec type: Union{ Nothing, SummarySegmentEffort }

    function SummarySegment(id, name, activity_type, distance, average_grade, maximum_grade, elevation_high, elevation_low, start_latlng, end_latlng, climb_category, city, state, country, private, athlete_pr_effort, athlete_segment_stats, )
        OpenAPI.validate_property(SummarySegment, Symbol("id"), id)
        OpenAPI.validate_property(SummarySegment, Symbol("name"), name)
        OpenAPI.validate_property(SummarySegment, Symbol("activity_type"), activity_type)
        OpenAPI.validate_property(SummarySegment, Symbol("distance"), distance)
        OpenAPI.validate_property(SummarySegment, Symbol("average_grade"), average_grade)
        OpenAPI.validate_property(SummarySegment, Symbol("maximum_grade"), maximum_grade)
        OpenAPI.validate_property(SummarySegment, Symbol("elevation_high"), elevation_high)
        OpenAPI.validate_property(SummarySegment, Symbol("elevation_low"), elevation_low)
        OpenAPI.validate_property(SummarySegment, Symbol("start_latlng"), start_latlng)
        OpenAPI.validate_property(SummarySegment, Symbol("end_latlng"), end_latlng)
        OpenAPI.validate_property(SummarySegment, Symbol("climb_category"), climb_category)
        OpenAPI.validate_property(SummarySegment, Symbol("city"), city)
        OpenAPI.validate_property(SummarySegment, Symbol("state"), state)
        OpenAPI.validate_property(SummarySegment, Symbol("country"), country)
        OpenAPI.validate_property(SummarySegment, Symbol("private"), private)
        OpenAPI.validate_property(SummarySegment, Symbol("athlete_pr_effort"), athlete_pr_effort)
        OpenAPI.validate_property(SummarySegment, Symbol("athlete_segment_stats"), athlete_segment_stats)
        return new(id, name, activity_type, distance, average_grade, maximum_grade, elevation_high, elevation_low, start_latlng, end_latlng, climb_category, city, state, country, private, athlete_pr_effort, athlete_segment_stats, )
    end
end # type SummarySegment

const _property_types_SummarySegment = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("activity_type")=>"String", Symbol("distance")=>"Float32", Symbol("average_grade")=>"Float32", Symbol("maximum_grade")=>"Float32", Symbol("elevation_high")=>"Float32", Symbol("elevation_low")=>"Float32", Symbol("start_latlng")=>"Vector{Float32}", Symbol("end_latlng")=>"Vector{Float32}", Symbol("climb_category")=>"Int64", Symbol("city")=>"String", Symbol("state")=>"String", Symbol("country")=>"String", Symbol("private")=>"Bool", Symbol("athlete_pr_effort")=>"SummaryPRSegmentEffort", Symbol("athlete_segment_stats")=>"SummarySegmentEffort", )
OpenAPI.property_type(::Type{ SummarySegment }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SummarySegment[name]))}

function check_required(o::SummarySegment)
    true
end

function OpenAPI.validate_property(::Type{ SummarySegment }, name::Symbol, val)

    if name === Symbol("id")
        OpenAPI.validate_param(name, "SummarySegment", :format, val, "int64")
    end


    if name === Symbol("activity_type")
        OpenAPI.validate_param(name, "SummarySegment", :enum, val, ["Ride", "Run"])
    end


    if name === Symbol("distance")
        OpenAPI.validate_param(name, "SummarySegment", :format, val, "float")
    end

    if name === Symbol("average_grade")
        OpenAPI.validate_param(name, "SummarySegment", :format, val, "float")
    end

    if name === Symbol("maximum_grade")
        OpenAPI.validate_param(name, "SummarySegment", :format, val, "float")
    end

    if name === Symbol("elevation_high")
        OpenAPI.validate_param(name, "SummarySegment", :format, val, "float")
    end

    if name === Symbol("elevation_low")
        OpenAPI.validate_param(name, "SummarySegment", :format, val, "float")
    end

    if name === Symbol("start_latlng")
        OpenAPI.validate_param(name, "SummarySegment", :maxItems, val, 2)
        OpenAPI.validate_param(name, "SummarySegment", :minItems, val, 2)
    end

    if name === Symbol("end_latlng")
        OpenAPI.validate_param(name, "SummarySegment", :maxItems, val, 2)
        OpenAPI.validate_param(name, "SummarySegment", :minItems, val, 2)
    end







end
