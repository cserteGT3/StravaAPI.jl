# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SummarySegmentEffort

    SummarySegmentEffort(;
        id=nothing,
        activity_id=nothing,
        elapsed_time=nothing,
        start_date=nothing,
        start_date_local=nothing,
        distance=nothing,
        is_kom=nothing,
    )

    - id::Int64 : The unique identifier of this effort
    - activity_id::Int64 : The unique identifier of the activity related to this effort
    - elapsed_time::Int64 : The effort&#39;s elapsed time
    - start_date::ZonedDateTime : The time at which the effort was started.
    - start_date_local::ZonedDateTime : The time at which the effort was started in the local timezone.
    - distance::Float32 : The effort&#39;s distance in meters
    - is_kom::Bool : Whether this effort is the current best on the leaderboard
"""
Base.@kwdef mutable struct SummarySegmentEffort <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    activity_id::Union{Nothing, Int64} = nothing
    elapsed_time::Union{Nothing, Int64} = nothing
    start_date::Union{Nothing, ZonedDateTime} = nothing
    start_date_local::Union{Nothing, ZonedDateTime} = nothing
    distance::Union{Nothing, Float32} = nothing
    is_kom::Union{Nothing, Bool} = nothing

    function SummarySegmentEffort(id, activity_id, elapsed_time, start_date, start_date_local, distance, is_kom, )
        OpenAPI.validate_property(SummarySegmentEffort, Symbol("id"), id)
        OpenAPI.validate_property(SummarySegmentEffort, Symbol("activity_id"), activity_id)
        OpenAPI.validate_property(SummarySegmentEffort, Symbol("elapsed_time"), elapsed_time)
        OpenAPI.validate_property(SummarySegmentEffort, Symbol("start_date"), start_date)
        OpenAPI.validate_property(SummarySegmentEffort, Symbol("start_date_local"), start_date_local)
        OpenAPI.validate_property(SummarySegmentEffort, Symbol("distance"), distance)
        OpenAPI.validate_property(SummarySegmentEffort, Symbol("is_kom"), is_kom)
        return new(id, activity_id, elapsed_time, start_date, start_date_local, distance, is_kom, )
    end
end # type SummarySegmentEffort

const _property_types_SummarySegmentEffort = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("activity_id")=>"Int64", Symbol("elapsed_time")=>"Int64", Symbol("start_date")=>"ZonedDateTime", Symbol("start_date_local")=>"ZonedDateTime", Symbol("distance")=>"Float32", Symbol("is_kom")=>"Bool", )
OpenAPI.property_type(::Type{ SummarySegmentEffort }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SummarySegmentEffort[name]))}

function check_required(o::SummarySegmentEffort)
    true
end

function OpenAPI.validate_property(::Type{ SummarySegmentEffort }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "SummarySegmentEffort", :format, val, "int64")
    end
    if name === Symbol("activity_id")
        OpenAPI.validate_param(name, "SummarySegmentEffort", :format, val, "int64")
    end
    if name === Symbol("start_date")
        OpenAPI.validate_param(name, "SummarySegmentEffort", :format, val, "date-time")
    end
    if name === Symbol("start_date_local")
        OpenAPI.validate_param(name, "SummarySegmentEffort", :format, val, "date-time")
    end
    if name === Symbol("distance")
        OpenAPI.validate_param(name, "SummarySegmentEffort", :format, val, "float")
    end
end
