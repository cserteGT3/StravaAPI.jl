# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Waypoint

    Waypoint(;
        latlng=nothing,
        target_latlng=nothing,
        categories=nothing,
        title=nothing,
        description=nothing,
        distance_into_route=nothing,
    )

    - latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
    - target_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
    - categories::Vector{String} : Categories that the waypoint belongs to
    - title::String : A title for the waypoint
    - description::String : A description of the waypoint (optional)
    - distance_into_route::Int64 : The number meters along the route that the waypoint is located
"""
Base.@kwdef mutable struct Waypoint <: OpenAPI.APIModel
    latlng::Union{Nothing, Vector{Float32}} = nothing
    target_latlng::Union{Nothing, Vector{Float32}} = nothing
    categories::Union{Nothing, Vector{String}} = nothing
    title::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    distance_into_route::Union{Nothing, Int64} = nothing

    function Waypoint(latlng, target_latlng, categories, title, description, distance_into_route, )
        OpenAPI.validate_property(Waypoint, Symbol("latlng"), latlng)
        OpenAPI.validate_property(Waypoint, Symbol("target_latlng"), target_latlng)
        OpenAPI.validate_property(Waypoint, Symbol("categories"), categories)
        OpenAPI.validate_property(Waypoint, Symbol("title"), title)
        OpenAPI.validate_property(Waypoint, Symbol("description"), description)
        OpenAPI.validate_property(Waypoint, Symbol("distance_into_route"), distance_into_route)
        return new(latlng, target_latlng, categories, title, description, distance_into_route, )
    end
end # type Waypoint

const _property_types_Waypoint = Dict{Symbol,String}(Symbol("latlng")=>"Vector{Float32}", Symbol("target_latlng")=>"Vector{Float32}", Symbol("categories")=>"Vector{String}", Symbol("title")=>"String", Symbol("description")=>"String", Symbol("distance_into_route")=>"Int64", )
OpenAPI.property_type(::Type{ Waypoint }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Waypoint[name]))}

function check_required(o::Waypoint)
    true
end

function OpenAPI.validate_property(::Type{ Waypoint }, name::Symbol, val)

    if name === Symbol("latlng")
        OpenAPI.validate_param(name, "Waypoint", :maxItems, val, 2)
        OpenAPI.validate_param(name, "Waypoint", :minItems, val, 2)
    end

    if name === Symbol("target_latlng")
        OpenAPI.validate_param(name, "Waypoint", :maxItems, val, 2)
        OpenAPI.validate_param(name, "Waypoint", :minItems, val, 2)
    end

    if name === Symbol("categories")
        OpenAPI.validate_param(name, "Waypoint", :minItems, val, 0)
    end



end
