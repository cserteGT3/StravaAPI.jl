# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Lap

    Lap(;
        id=nothing,
        activity=nothing,
        athlete=nothing,
        average_cadence=nothing,
        average_speed=nothing,
        distance=nothing,
        elapsed_time=nothing,
        start_index=nothing,
        end_index=nothing,
        lap_index=nothing,
        max_speed=nothing,
        moving_time=nothing,
        name=nothing,
        pace_zone=nothing,
        split=nothing,
        start_date=nothing,
        start_date_local=nothing,
        total_elevation_gain=nothing,
    )

    - id::Int64 : The unique identifier of this lap
    - activity::MetaActivity
    - athlete::MetaAthlete
    - average_cadence::Float32 : The lap&#39;s average cadence
    - average_speed::Float32 : The lap&#39;s average speed
    - distance::Float32 : The lap&#39;s distance, in meters
    - elapsed_time::Int64 : The lap&#39;s elapsed time, in seconds
    - start_index::Int64 : The start index of this effort in its activity&#39;s stream
    - end_index::Int64 : The end index of this effort in its activity&#39;s stream
    - lap_index::Int64 : The index of this lap in the activity it belongs to
    - max_speed::Float32 : The maximum speed of this lat, in meters per second
    - moving_time::Int64 : The lap&#39;s moving time, in seconds
    - name::String : The name of the lap
    - pace_zone::Int64 : The athlete&#39;s pace zone during this lap
    - split::Int64
    - start_date::ZonedDateTime : The time at which the lap was started.
    - start_date_local::ZonedDateTime : The time at which the lap was started in the local timezone.
    - total_elevation_gain::Float32 : The elevation gain of this lap, in meters
"""
Base.@kwdef mutable struct Lap <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    activity = nothing # spec type: Union{ Nothing, MetaActivity }
    athlete = nothing # spec type: Union{ Nothing, MetaAthlete }
    average_cadence::Union{Nothing, Float32} = nothing
    average_speed::Union{Nothing, Float32} = nothing
    distance::Union{Nothing, Float32} = nothing
    elapsed_time::Union{Nothing, Int64} = nothing
    start_index::Union{Nothing, Int64} = nothing
    end_index::Union{Nothing, Int64} = nothing
    lap_index::Union{Nothing, Int64} = nothing
    max_speed::Union{Nothing, Float32} = nothing
    moving_time::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    pace_zone::Union{Nothing, Int64} = nothing
    split::Union{Nothing, Int64} = nothing
    start_date::Union{Nothing, ZonedDateTime} = nothing
    start_date_local::Union{Nothing, ZonedDateTime} = nothing
    total_elevation_gain::Union{Nothing, Float32} = nothing

    function Lap(id, activity, athlete, average_cadence, average_speed, distance, elapsed_time, start_index, end_index, lap_index, max_speed, moving_time, name, pace_zone, split, start_date, start_date_local, total_elevation_gain, )
        OpenAPI.validate_property(Lap, Symbol("id"), id)
        OpenAPI.validate_property(Lap, Symbol("activity"), activity)
        OpenAPI.validate_property(Lap, Symbol("athlete"), athlete)
        OpenAPI.validate_property(Lap, Symbol("average_cadence"), average_cadence)
        OpenAPI.validate_property(Lap, Symbol("average_speed"), average_speed)
        OpenAPI.validate_property(Lap, Symbol("distance"), distance)
        OpenAPI.validate_property(Lap, Symbol("elapsed_time"), elapsed_time)
        OpenAPI.validate_property(Lap, Symbol("start_index"), start_index)
        OpenAPI.validate_property(Lap, Symbol("end_index"), end_index)
        OpenAPI.validate_property(Lap, Symbol("lap_index"), lap_index)
        OpenAPI.validate_property(Lap, Symbol("max_speed"), max_speed)
        OpenAPI.validate_property(Lap, Symbol("moving_time"), moving_time)
        OpenAPI.validate_property(Lap, Symbol("name"), name)
        OpenAPI.validate_property(Lap, Symbol("pace_zone"), pace_zone)
        OpenAPI.validate_property(Lap, Symbol("split"), split)
        OpenAPI.validate_property(Lap, Symbol("start_date"), start_date)
        OpenAPI.validate_property(Lap, Symbol("start_date_local"), start_date_local)
        OpenAPI.validate_property(Lap, Symbol("total_elevation_gain"), total_elevation_gain)
        return new(id, activity, athlete, average_cadence, average_speed, distance, elapsed_time, start_index, end_index, lap_index, max_speed, moving_time, name, pace_zone, split, start_date, start_date_local, total_elevation_gain, )
    end
end # type Lap

const _property_types_Lap = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("activity")=>"MetaActivity", Symbol("athlete")=>"MetaAthlete", Symbol("average_cadence")=>"Float32", Symbol("average_speed")=>"Float32", Symbol("distance")=>"Float32", Symbol("elapsed_time")=>"Int64", Symbol("start_index")=>"Int64", Symbol("end_index")=>"Int64", Symbol("lap_index")=>"Int64", Symbol("max_speed")=>"Float32", Symbol("moving_time")=>"Int64", Symbol("name")=>"String", Symbol("pace_zone")=>"Int64", Symbol("split")=>"Int64", Symbol("start_date")=>"ZonedDateTime", Symbol("start_date_local")=>"ZonedDateTime", Symbol("total_elevation_gain")=>"Float32", )
OpenAPI.property_type(::Type{ Lap }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Lap[name]))}

function check_required(o::Lap)
    true
end

function OpenAPI.validate_property(::Type{ Lap }, name::Symbol, val)

    if name === Symbol("id")
        OpenAPI.validate_param(name, "Lap", :format, val, "int64")
    end



    if name === Symbol("average_cadence")
        OpenAPI.validate_param(name, "Lap", :format, val, "float")
    end

    if name === Symbol("average_speed")
        OpenAPI.validate_param(name, "Lap", :format, val, "float")
    end

    if name === Symbol("distance")
        OpenAPI.validate_param(name, "Lap", :format, val, "float")
    end





    if name === Symbol("max_speed")
        OpenAPI.validate_param(name, "Lap", :format, val, "float")
    end





    if name === Symbol("start_date")
        OpenAPI.validate_param(name, "Lap", :format, val, "date-time")
    end

    if name === Symbol("start_date_local")
        OpenAPI.validate_param(name, "Lap", :format, val, "date-time")
    end

    if name === Symbol("total_elevation_gain")
        OpenAPI.validate_param(name, "Lap", :format, val, "float")
    end
end
