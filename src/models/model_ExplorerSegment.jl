# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ExplorerSegment

    ExplorerSegment(;
        id=nothing,
        name=nothing,
        climb_category=nothing,
        climb_category_desc=nothing,
        avg_grade=nothing,
        start_latlng=nothing,
        end_latlng=nothing,
        elev_difference=nothing,
        distance=nothing,
        points=nothing,
    )

    - id::Int64 : The unique identifier of this segment
    - name::String : The name of this segment
    - climb_category::Int64 : The category of the climb [0, 5]. Higher is harder ie. 5 is Hors cat√©gorie, 0 is uncategorized in climb_category. If climb_category &#x3D; 5, climb_category_desc &#x3D; HC. If climb_category &#x3D; 2, climb_category_desc &#x3D; 3.
    - climb_category_desc::String : The description for the category of the climb
    - avg_grade::Float32 : The segment&#39;s average grade, in percents
    - start_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
    - end_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
    - elev_difference::Float32 : The segments&#39;s evelation difference, in meters
    - distance::Float32 : The segment&#39;s distance, in meters
    - points::String : The polyline of the segment
"""
Base.@kwdef mutable struct ExplorerSegment <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    climb_category::Union{Nothing, Int64} = nothing
    climb_category_desc::Union{Nothing, String} = nothing
    avg_grade::Union{Nothing, Float32} = nothing
    start_latlng::Union{Nothing, Vector{Float32}} = nothing
    end_latlng::Union{Nothing, Vector{Float32}} = nothing
    elev_difference::Union{Nothing, Float32} = nothing
    distance::Union{Nothing, Float32} = nothing
    points::Union{Nothing, String} = nothing

    function ExplorerSegment(id, name, climb_category, climb_category_desc, avg_grade, start_latlng, end_latlng, elev_difference, distance, points, )
        OpenAPI.validate_property(ExplorerSegment, Symbol("id"), id)
        OpenAPI.validate_property(ExplorerSegment, Symbol("name"), name)
        OpenAPI.validate_property(ExplorerSegment, Symbol("climb_category"), climb_category)
        OpenAPI.validate_property(ExplorerSegment, Symbol("climb_category_desc"), climb_category_desc)
        OpenAPI.validate_property(ExplorerSegment, Symbol("avg_grade"), avg_grade)
        OpenAPI.validate_property(ExplorerSegment, Symbol("start_latlng"), start_latlng)
        OpenAPI.validate_property(ExplorerSegment, Symbol("end_latlng"), end_latlng)
        OpenAPI.validate_property(ExplorerSegment, Symbol("elev_difference"), elev_difference)
        OpenAPI.validate_property(ExplorerSegment, Symbol("distance"), distance)
        OpenAPI.validate_property(ExplorerSegment, Symbol("points"), points)
        return new(id, name, climb_category, climb_category_desc, avg_grade, start_latlng, end_latlng, elev_difference, distance, points, )
    end
end # type ExplorerSegment

const _property_types_ExplorerSegment = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("climb_category")=>"Int64", Symbol("climb_category_desc")=>"String", Symbol("avg_grade")=>"Float32", Symbol("start_latlng")=>"Vector{Float32}", Symbol("end_latlng")=>"Vector{Float32}", Symbol("elev_difference")=>"Float32", Symbol("distance")=>"Float32", Symbol("points")=>"String", )
OpenAPI.property_type(::Type{ ExplorerSegment }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ExplorerSegment[name]))}

function check_required(o::ExplorerSegment)
    true
end

function OpenAPI.validate_property(::Type{ ExplorerSegment }, name::Symbol, val)

    if name === Symbol("id")
        OpenAPI.validate_param(name, "ExplorerSegment", :format, val, "int64")
    end


    if name === Symbol("climb_category")
        OpenAPI.validate_param(name, "ExplorerSegment", :maximum, val, 5, false)
        OpenAPI.validate_param(name, "ExplorerSegment", :minimum, val, 0, false)
    end

    if name === Symbol("climb_category_desc")
        OpenAPI.validate_param(name, "ExplorerSegment", :enum, val, ["NC", "4", "3", "2", "1", "HC"])
    end


    if name === Symbol("avg_grade")
        OpenAPI.validate_param(name, "ExplorerSegment", :format, val, "float")
    end

    if name === Symbol("start_latlng")
        OpenAPI.validate_param(name, "ExplorerSegment", :maxItems, val, 2)
        OpenAPI.validate_param(name, "ExplorerSegment", :minItems, val, 2)
    end

    if name === Symbol("end_latlng")
        OpenAPI.validate_param(name, "ExplorerSegment", :maxItems, val, 2)
        OpenAPI.validate_param(name, "ExplorerSegment", :minItems, val, 2)
    end

    if name === Symbol("elev_difference")
        OpenAPI.validate_param(name, "ExplorerSegment", :format, val, "float")
    end

    if name === Symbol("distance")
        OpenAPI.validate_param(name, "ExplorerSegment", :format, val, "float")
    end

end
