# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PhotosSummary_primary

    PhotosSummaryPrimary(;
        id=nothing,
        source=nothing,
        unique_id=nothing,
        urls=nothing,
    )

    - id::Int64
    - source::Int64
    - unique_id::String
    - urls::Dict{String, String}
"""
Base.@kwdef mutable struct PhotosSummaryPrimary <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    source::Union{Nothing, Int64} = nothing
    unique_id::Union{Nothing, String} = nothing
    urls::Union{Nothing, Dict{String, String}} = nothing

    function PhotosSummaryPrimary(id, source, unique_id, urls, )
        OpenAPI.validate_property(PhotosSummaryPrimary, Symbol("id"), id)
        OpenAPI.validate_property(PhotosSummaryPrimary, Symbol("source"), source)
        OpenAPI.validate_property(PhotosSummaryPrimary, Symbol("unique_id"), unique_id)
        OpenAPI.validate_property(PhotosSummaryPrimary, Symbol("urls"), urls)
        return new(id, source, unique_id, urls, )
    end
end # type PhotosSummaryPrimary

const _property_types_PhotosSummaryPrimary = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("source")=>"Int64", Symbol("unique_id")=>"String", Symbol("urls")=>"Dict{String, String}", )
OpenAPI.property_type(::Type{ PhotosSummaryPrimary }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PhotosSummaryPrimary[name]))}

function check_required(o::PhotosSummaryPrimary)
    true
end

function OpenAPI.validate_property(::Type{ PhotosSummaryPrimary }, name::Symbol, val)

    if name === Symbol("id")
        OpenAPI.validate_param(name, "PhotosSummaryPrimary", :format, val, "int64")
    end



end
