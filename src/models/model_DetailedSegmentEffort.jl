# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DetailedSegmentEffort

    DetailedSegmentEffort(;
        id=nothing,
        activity_id=nothing,
        elapsed_time=nothing,
        start_date=nothing,
        start_date_local=nothing,
        distance=nothing,
        is_kom=nothing,
        name=nothing,
        activity=nothing,
        athlete=nothing,
        moving_time=nothing,
        start_index=nothing,
        end_index=nothing,
        average_cadence=nothing,
        average_watts=nothing,
        device_watts=nothing,
        average_heartrate=nothing,
        max_heartrate=nothing,
        segment=nothing,
        kom_rank=nothing,
        pr_rank=nothing,
        hidden=nothing,
    )

    - id::Int64 : The unique identifier of this effort
    - activity_id::Int64 : The unique identifier of the activity related to this effort
    - elapsed_time::Int64 : The effort&#39;s elapsed time
    - start_date::ZonedDateTime : The time at which the effort was started.
    - start_date_local::ZonedDateTime : The time at which the effort was started in the local timezone.
    - distance::Float32 : The effort&#39;s distance in meters
    - is_kom::Bool : Whether this effort is the current best on the leaderboard
    - name::String : The name of the segment on which this effort was performed
    - activity::MetaActivity
    - athlete::MetaAthlete
    - moving_time::Int64 : The effort&#39;s moving time
    - start_index::Int64 : The start index of this effort in its activity&#39;s stream
    - end_index::Int64 : The end index of this effort in its activity&#39;s stream
    - average_cadence::Float32 : The effort&#39;s average cadence
    - average_watts::Float32 : The average wattage of this effort
    - device_watts::Bool : For riding efforts, whether the wattage was reported by a dedicated recording device
    - average_heartrate::Float32 : The heart heart rate of the athlete during this effort
    - max_heartrate::Float32 : The maximum heart rate of the athlete during this effort
    - segment::SummarySegment
    - kom_rank::Int64 : The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload
    - pr_rank::Int64 : The rank of the effort on the athlete&#39;s leaderboard if it belongs in the top 3 at the time of upload
    - hidden::Bool : Whether this effort should be hidden when viewed within an activity
"""
Base.@kwdef mutable struct DetailedSegmentEffort <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    activity_id::Union{Nothing, Int64} = nothing
    elapsed_time::Union{Nothing, Int64} = nothing
    start_date::Union{Nothing, ZonedDateTime} = nothing
    start_date_local::Union{Nothing, ZonedDateTime} = nothing
    distance::Union{Nothing, Float32} = nothing
    is_kom::Union{Nothing, Bool} = nothing
    name::Union{Nothing, String} = nothing
    activity = nothing # spec type: Union{ Nothing, MetaActivity }
    athlete = nothing # spec type: Union{ Nothing, MetaAthlete }
    moving_time::Union{Nothing, Int64} = nothing
    start_index::Union{Nothing, Int64} = nothing
    end_index::Union{Nothing, Int64} = nothing
    average_cadence::Union{Nothing, Float32} = nothing
    average_watts::Union{Nothing, Float32} = nothing
    device_watts::Union{Nothing, Bool} = nothing
    average_heartrate::Union{Nothing, Float32} = nothing
    max_heartrate::Union{Nothing, Float32} = nothing
    segment = nothing # spec type: Union{ Nothing, SummarySegment }
    kom_rank::Union{Nothing, Int64} = nothing
    pr_rank::Union{Nothing, Int64} = nothing
    hidden::Union{Nothing, Bool} = nothing

    function DetailedSegmentEffort(id, activity_id, elapsed_time, start_date, start_date_local, distance, is_kom, name, activity, athlete, moving_time, start_index, end_index, average_cadence, average_watts, device_watts, average_heartrate, max_heartrate, segment, kom_rank, pr_rank, hidden, )
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("id"), id)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("activity_id"), activity_id)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("elapsed_time"), elapsed_time)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("start_date"), start_date)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("start_date_local"), start_date_local)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("distance"), distance)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("is_kom"), is_kom)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("name"), name)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("activity"), activity)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("athlete"), athlete)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("moving_time"), moving_time)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("start_index"), start_index)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("end_index"), end_index)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("average_cadence"), average_cadence)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("average_watts"), average_watts)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("device_watts"), device_watts)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("average_heartrate"), average_heartrate)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("max_heartrate"), max_heartrate)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("segment"), segment)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("kom_rank"), kom_rank)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("pr_rank"), pr_rank)
        OpenAPI.validate_property(DetailedSegmentEffort, Symbol("hidden"), hidden)
        return new(id, activity_id, elapsed_time, start_date, start_date_local, distance, is_kom, name, activity, athlete, moving_time, start_index, end_index, average_cadence, average_watts, device_watts, average_heartrate, max_heartrate, segment, kom_rank, pr_rank, hidden, )
    end
end # type DetailedSegmentEffort

const _property_types_DetailedSegmentEffort = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("activity_id")=>"Int64", Symbol("elapsed_time")=>"Int64", Symbol("start_date")=>"ZonedDateTime", Symbol("start_date_local")=>"ZonedDateTime", Symbol("distance")=>"Float32", Symbol("is_kom")=>"Bool", Symbol("name")=>"String", Symbol("activity")=>"MetaActivity", Symbol("athlete")=>"MetaAthlete", Symbol("moving_time")=>"Int64", Symbol("start_index")=>"Int64", Symbol("end_index")=>"Int64", Symbol("average_cadence")=>"Float32", Symbol("average_watts")=>"Float32", Symbol("device_watts")=>"Bool", Symbol("average_heartrate")=>"Float32", Symbol("max_heartrate")=>"Float32", Symbol("segment")=>"SummarySegment", Symbol("kom_rank")=>"Int64", Symbol("pr_rank")=>"Int64", Symbol("hidden")=>"Bool", )
OpenAPI.property_type(::Type{ DetailedSegmentEffort }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DetailedSegmentEffort[name]))}

function check_required(o::DetailedSegmentEffort)
    true
end

function OpenAPI.validate_property(::Type{ DetailedSegmentEffort }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "DetailedSegmentEffort", :format, val, "int64")
    end
    if name === Symbol("activity_id")
        OpenAPI.validate_param(name, "DetailedSegmentEffort", :format, val, "int64")
    end
    if name === Symbol("start_date")
        OpenAPI.validate_param(name, "DetailedSegmentEffort", :format, val, "date-time")
    end
    if name === Symbol("start_date_local")
        OpenAPI.validate_param(name, "DetailedSegmentEffort", :format, val, "date-time")
    end
    if name === Symbol("distance")
        OpenAPI.validate_param(name, "DetailedSegmentEffort", :format, val, "float")
    end
    if name === Symbol("average_cadence")
        OpenAPI.validate_param(name, "DetailedSegmentEffort", :format, val, "float")
    end
    if name === Symbol("average_watts")
        OpenAPI.validate_param(name, "DetailedSegmentEffort", :format, val, "float")
    end
    if name === Symbol("average_heartrate")
        OpenAPI.validate_param(name, "DetailedSegmentEffort", :format, val, "float")
    end
    if name === Symbol("max_heartrate")
        OpenAPI.validate_param(name, "DetailedSegmentEffort", :format, val, "float")
    end
    if name === Symbol("kom_rank")
        OpenAPI.validate_param(name, "DetailedSegmentEffort", :maximum, val, 10, false)
        OpenAPI.validate_param(name, "DetailedSegmentEffort", :minimum, val, 1, false)
    end
    if name === Symbol("pr_rank")
        OpenAPI.validate_param(name, "DetailedSegmentEffort", :maximum, val, 3, false)
        OpenAPI.validate_param(name, "DetailedSegmentEffort", :minimum, val, 1, false)
    end
end
