# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ActivityTotal
A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.

    ActivityTotal(;
        count=nothing,
        distance=nothing,
        moving_time=nothing,
        elapsed_time=nothing,
        elevation_gain=nothing,
        achievement_count=nothing,
    )

    - count::Int64 : The number of activities considered in this total.
    - distance::Float32 : The total distance covered by the considered activities.
    - moving_time::Int64 : The total moving time of the considered activities.
    - elapsed_time::Int64 : The total elapsed time of the considered activities.
    - elevation_gain::Float32 : The total elevation gain of the considered activities.
    - achievement_count::Int64 : The total number of achievements of the considered activities.
"""
Base.@kwdef mutable struct ActivityTotal <: OpenAPI.APIModel
    count::Union{Nothing, Int64} = nothing
    distance::Union{Nothing, Float32} = nothing
    moving_time::Union{Nothing, Int64} = nothing
    elapsed_time::Union{Nothing, Int64} = nothing
    elevation_gain::Union{Nothing, Float32} = nothing
    achievement_count::Union{Nothing, Int64} = nothing

    function ActivityTotal(count, distance, moving_time, elapsed_time, elevation_gain, achievement_count, )
        OpenAPI.validate_property(ActivityTotal, Symbol("count"), count)
        OpenAPI.validate_property(ActivityTotal, Symbol("distance"), distance)
        OpenAPI.validate_property(ActivityTotal, Symbol("moving_time"), moving_time)
        OpenAPI.validate_property(ActivityTotal, Symbol("elapsed_time"), elapsed_time)
        OpenAPI.validate_property(ActivityTotal, Symbol("elevation_gain"), elevation_gain)
        OpenAPI.validate_property(ActivityTotal, Symbol("achievement_count"), achievement_count)
        return new(count, distance, moving_time, elapsed_time, elevation_gain, achievement_count, )
    end
end # type ActivityTotal

const _property_types_ActivityTotal = Dict{Symbol,String}(Symbol("count")=>"Int64", Symbol("distance")=>"Float32", Symbol("moving_time")=>"Int64", Symbol("elapsed_time")=>"Int64", Symbol("elevation_gain")=>"Float32", Symbol("achievement_count")=>"Int64", )
OpenAPI.property_type(::Type{ ActivityTotal }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ActivityTotal[name]))}

function check_required(o::ActivityTotal)
    true
end

function OpenAPI.validate_property(::Type{ ActivityTotal }, name::Symbol, val)
    if name === Symbol("distance")
        OpenAPI.validate_param(name, "ActivityTotal", :format, val, "float")
    end
    if name === Symbol("elevation_gain")
        OpenAPI.validate_param(name, "ActivityTotal", :format, val, "float")
    end
end
