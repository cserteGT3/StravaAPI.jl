# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ActivityZone

    ActivityZone(;
        score=nothing,
        distribution_buckets=nothing,
        type=nothing,
        sensor_based=nothing,
        points=nothing,
        custom_zones=nothing,
        max=nothing,
    )

    - score::Int64
    - distribution_buckets::Vector{TimedZoneRange} : Stores the exclusive ranges representing zones and the time spent in each.
    - type::String
    - sensor_based::Bool
    - points::Int64
    - custom_zones::Bool
    - max::Int64
"""
Base.@kwdef mutable struct ActivityZone <: OpenAPI.APIModel
    score::Union{Nothing, Int64} = nothing
    distribution_buckets::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TimedZoneRange} }
    type::Union{Nothing, String} = nothing
    sensor_based::Union{Nothing, Bool} = nothing
    points::Union{Nothing, Int64} = nothing
    custom_zones::Union{Nothing, Bool} = nothing
    max::Union{Nothing, Int64} = nothing

    function ActivityZone(score, distribution_buckets, type, sensor_based, points, custom_zones, max, )
        OpenAPI.validate_property(ActivityZone, Symbol("score"), score)
        OpenAPI.validate_property(ActivityZone, Symbol("distribution_buckets"), distribution_buckets)
        OpenAPI.validate_property(ActivityZone, Symbol("type"), type)
        OpenAPI.validate_property(ActivityZone, Symbol("sensor_based"), sensor_based)
        OpenAPI.validate_property(ActivityZone, Symbol("points"), points)
        OpenAPI.validate_property(ActivityZone, Symbol("custom_zones"), custom_zones)
        OpenAPI.validate_property(ActivityZone, Symbol("max"), max)
        return new(score, distribution_buckets, type, sensor_based, points, custom_zones, max, )
    end
end # type ActivityZone

const _property_types_ActivityZone = Dict{Symbol,String}(Symbol("score")=>"Int64", Symbol("distribution_buckets")=>"Vector{TimedZoneRange}", Symbol("type")=>"String", Symbol("sensor_based")=>"Bool", Symbol("points")=>"Int64", Symbol("custom_zones")=>"Bool", Symbol("max")=>"Int64", )
OpenAPI.property_type(::Type{ ActivityZone }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ActivityZone[name]))}

function check_required(o::ActivityZone)
    true
end

function OpenAPI.validate_property(::Type{ ActivityZone }, name::Symbol, val)



    if name === Symbol("type")
        OpenAPI.validate_param(name, "ActivityZone", :enum, val, ["heartrate", "power"])
    end





end
