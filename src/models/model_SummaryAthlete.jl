# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SummaryAthlete

    SummaryAthlete(;
        id=nothing,
        resource_state=nothing,
        firstname=nothing,
        lastname=nothing,
        profile_medium=nothing,
        profile=nothing,
        city=nothing,
        state=nothing,
        country=nothing,
        sex=nothing,
        premium=nothing,
        summit=nothing,
        created_at=nothing,
        updated_at=nothing,
    )

    - id::Int64 : The unique identifier of the athlete
    - resource_state::Int64 : Resource state, indicates level of detail. Possible values: 1 -&gt; \&quot;meta\&quot;, 2 -&gt; \&quot;summary\&quot;, 3 -&gt; \&quot;detail\&quot;
    - firstname::String : The athlete&#39;s first name.
    - lastname::String : The athlete&#39;s last name.
    - profile_medium::String : URL to a 62x62 pixel profile picture.
    - profile::String : URL to a 124x124 pixel profile picture.
    - city::String : The athlete&#39;s city.
    - state::String : The athlete&#39;s state or geographical region.
    - country::String : The athlete&#39;s country.
    - sex::String : The athlete&#39;s sex.
    - premium::Bool : Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.
    - summit::Bool : Whether the athlete has any Summit subscription.
    - created_at::ZonedDateTime : The time at which the athlete was created.
    - updated_at::ZonedDateTime : The time at which the athlete was last updated.
"""
Base.@kwdef mutable struct SummaryAthlete <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    resource_state::Union{Nothing, Int64} = nothing
    firstname::Union{Nothing, String} = nothing
    lastname::Union{Nothing, String} = nothing
    profile_medium::Union{Nothing, String} = nothing
    profile::Union{Nothing, String} = nothing
    city::Union{Nothing, String} = nothing
    state::Union{Nothing, String} = nothing
    country::Union{Nothing, String} = nothing
    sex::Union{Nothing, String} = nothing
    premium::Union{Nothing, Bool} = nothing
    summit::Union{Nothing, Bool} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing
    updated_at::Union{Nothing, ZonedDateTime} = nothing

    function SummaryAthlete(id, resource_state, firstname, lastname, profile_medium, profile, city, state, country, sex, premium, summit, created_at, updated_at, )
        OpenAPI.validate_property(SummaryAthlete, Symbol("id"), id)
        OpenAPI.validate_property(SummaryAthlete, Symbol("resource_state"), resource_state)
        OpenAPI.validate_property(SummaryAthlete, Symbol("firstname"), firstname)
        OpenAPI.validate_property(SummaryAthlete, Symbol("lastname"), lastname)
        OpenAPI.validate_property(SummaryAthlete, Symbol("profile_medium"), profile_medium)
        OpenAPI.validate_property(SummaryAthlete, Symbol("profile"), profile)
        OpenAPI.validate_property(SummaryAthlete, Symbol("city"), city)
        OpenAPI.validate_property(SummaryAthlete, Symbol("state"), state)
        OpenAPI.validate_property(SummaryAthlete, Symbol("country"), country)
        OpenAPI.validate_property(SummaryAthlete, Symbol("sex"), sex)
        OpenAPI.validate_property(SummaryAthlete, Symbol("premium"), premium)
        OpenAPI.validate_property(SummaryAthlete, Symbol("summit"), summit)
        OpenAPI.validate_property(SummaryAthlete, Symbol("created_at"), created_at)
        OpenAPI.validate_property(SummaryAthlete, Symbol("updated_at"), updated_at)
        return new(id, resource_state, firstname, lastname, profile_medium, profile, city, state, country, sex, premium, summit, created_at, updated_at, )
    end
end # type SummaryAthlete

const _property_types_SummaryAthlete = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("resource_state")=>"Int64", Symbol("firstname")=>"String", Symbol("lastname")=>"String", Symbol("profile_medium")=>"String", Symbol("profile")=>"String", Symbol("city")=>"String", Symbol("state")=>"String", Symbol("country")=>"String", Symbol("sex")=>"String", Symbol("premium")=>"Bool", Symbol("summit")=>"Bool", Symbol("created_at")=>"ZonedDateTime", Symbol("updated_at")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ SummaryAthlete }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SummaryAthlete[name]))}

function check_required(o::SummaryAthlete)
    true
end

function OpenAPI.validate_property(::Type{ SummaryAthlete }, name::Symbol, val)

    if name === Symbol("id")
        OpenAPI.validate_param(name, "SummaryAthlete", :format, val, "int64")
    end









    if name === Symbol("sex")
        OpenAPI.validate_param(name, "SummaryAthlete", :enum, val, ["M", "F"])
    end




    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "SummaryAthlete", :format, val, "date-time")
    end

    if name === Symbol("updated_at")
        OpenAPI.validate_param(name, "SummaryAthlete", :format, val, "date-time")
    end
end
