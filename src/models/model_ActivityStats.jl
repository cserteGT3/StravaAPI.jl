# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ActivityStats
A set of rolled-up statistics and totals for an athlete

    ActivityStats(;
        biggest_ride_distance=nothing,
        biggest_climb_elevation_gain=nothing,
        recent_ride_totals=nothing,
        recent_run_totals=nothing,
        recent_swim_totals=nothing,
        ytd_ride_totals=nothing,
        ytd_run_totals=nothing,
        ytd_swim_totals=nothing,
        all_ride_totals=nothing,
        all_run_totals=nothing,
        all_swim_totals=nothing,
    )

    - biggest_ride_distance::Float64 : The longest distance ridden by the athlete.
    - biggest_climb_elevation_gain::Float64 : The highest climb ridden by the athlete.
    - recent_ride_totals::ActivityTotal
    - recent_run_totals::ActivityTotal
    - recent_swim_totals::ActivityTotal
    - ytd_ride_totals::ActivityTotal
    - ytd_run_totals::ActivityTotal
    - ytd_swim_totals::ActivityTotal
    - all_ride_totals::ActivityTotal
    - all_run_totals::ActivityTotal
    - all_swim_totals::ActivityTotal
"""
Base.@kwdef mutable struct ActivityStats <: OpenAPI.APIModel
    biggest_ride_distance::Union{Nothing, Float64} = nothing
    biggest_climb_elevation_gain::Union{Nothing, Float64} = nothing
    recent_ride_totals = nothing # spec type: Union{ Nothing, ActivityTotal }
    recent_run_totals = nothing # spec type: Union{ Nothing, ActivityTotal }
    recent_swim_totals = nothing # spec type: Union{ Nothing, ActivityTotal }
    ytd_ride_totals = nothing # spec type: Union{ Nothing, ActivityTotal }
    ytd_run_totals = nothing # spec type: Union{ Nothing, ActivityTotal }
    ytd_swim_totals = nothing # spec type: Union{ Nothing, ActivityTotal }
    all_ride_totals = nothing # spec type: Union{ Nothing, ActivityTotal }
    all_run_totals = nothing # spec type: Union{ Nothing, ActivityTotal }
    all_swim_totals = nothing # spec type: Union{ Nothing, ActivityTotal }

    function ActivityStats(biggest_ride_distance, biggest_climb_elevation_gain, recent_ride_totals, recent_run_totals, recent_swim_totals, ytd_ride_totals, ytd_run_totals, ytd_swim_totals, all_ride_totals, all_run_totals, all_swim_totals, )
        OpenAPI.validate_property(ActivityStats, Symbol("biggest_ride_distance"), biggest_ride_distance)
        OpenAPI.validate_property(ActivityStats, Symbol("biggest_climb_elevation_gain"), biggest_climb_elevation_gain)
        OpenAPI.validate_property(ActivityStats, Symbol("recent_ride_totals"), recent_ride_totals)
        OpenAPI.validate_property(ActivityStats, Symbol("recent_run_totals"), recent_run_totals)
        OpenAPI.validate_property(ActivityStats, Symbol("recent_swim_totals"), recent_swim_totals)
        OpenAPI.validate_property(ActivityStats, Symbol("ytd_ride_totals"), ytd_ride_totals)
        OpenAPI.validate_property(ActivityStats, Symbol("ytd_run_totals"), ytd_run_totals)
        OpenAPI.validate_property(ActivityStats, Symbol("ytd_swim_totals"), ytd_swim_totals)
        OpenAPI.validate_property(ActivityStats, Symbol("all_ride_totals"), all_ride_totals)
        OpenAPI.validate_property(ActivityStats, Symbol("all_run_totals"), all_run_totals)
        OpenAPI.validate_property(ActivityStats, Symbol("all_swim_totals"), all_swim_totals)
        return new(biggest_ride_distance, biggest_climb_elevation_gain, recent_ride_totals, recent_run_totals, recent_swim_totals, ytd_ride_totals, ytd_run_totals, ytd_swim_totals, all_ride_totals, all_run_totals, all_swim_totals, )
    end
end # type ActivityStats

const _property_types_ActivityStats = Dict{Symbol,String}(Symbol("biggest_ride_distance")=>"Float64", Symbol("biggest_climb_elevation_gain")=>"Float64", Symbol("recent_ride_totals")=>"ActivityTotal", Symbol("recent_run_totals")=>"ActivityTotal", Symbol("recent_swim_totals")=>"ActivityTotal", Symbol("ytd_ride_totals")=>"ActivityTotal", Symbol("ytd_run_totals")=>"ActivityTotal", Symbol("ytd_swim_totals")=>"ActivityTotal", Symbol("all_ride_totals")=>"ActivityTotal", Symbol("all_run_totals")=>"ActivityTotal", Symbol("all_swim_totals")=>"ActivityTotal", )
OpenAPI.property_type(::Type{ ActivityStats }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ActivityStats[name]))}

function check_required(o::ActivityStats)
    true
end

function OpenAPI.validate_property(::Type{ ActivityStats }, name::Symbol, val)

    if name === Symbol("biggest_ride_distance")
        OpenAPI.validate_param(name, "ActivityStats", :format, val, "double")
    end

    if name === Symbol("biggest_climb_elevation_gain")
        OpenAPI.validate_param(name, "ActivityStats", :format, val, "double")
    end









end
