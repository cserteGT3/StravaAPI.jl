# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DetailedActivity

    DetailedActivity(;
        id=nothing,
        external_id=nothing,
        upload_id=nothing,
        athlete=nothing,
        name=nothing,
        distance=nothing,
        moving_time=nothing,
        elapsed_time=nothing,
        total_elevation_gain=nothing,
        elev_high=nothing,
        elev_low=nothing,
        type=nothing,
        sport_type=nothing,
        start_date=nothing,
        start_date_local=nothing,
        timezone=nothing,
        start_latlng=nothing,
        end_latlng=nothing,
        achievement_count=nothing,
        kudos_count=nothing,
        comment_count=nothing,
        athlete_count=nothing,
        photo_count=nothing,
        total_photo_count=nothing,
        map=nothing,
        trainer=nothing,
        commute=nothing,
        manual=nothing,
        private=nothing,
        flagged=nothing,
        workout_type=nothing,
        upload_id_str=nothing,
        average_speed=nothing,
        max_speed=nothing,
        has_kudoed=nothing,
        hide_from_home=nothing,
        gear_id=nothing,
        kilojoules=nothing,
        average_watts=nothing,
        device_watts=nothing,
        max_watts=nothing,
        weighted_average_watts=nothing,
        description=nothing,
        photos=nothing,
        gear=nothing,
        calories=nothing,
        segment_efforts=nothing,
        device_name=nothing,
        embed_token=nothing,
        splits_metric=nothing,
        splits_standard=nothing,
        laps=nothing,
        best_efforts=nothing,
    )

    - id::Int64 : The unique identifier of the activity
    - external_id::String : The identifier provided at upload time
    - upload_id::Int64 : The identifier of the upload that resulted in this activity
    - athlete::MetaAthlete
    - name::String : The name of the activity
    - distance::Float32 : The activity&#39;s distance, in meters
    - moving_time::Int64 : The activity&#39;s moving time, in seconds
    - elapsed_time::Int64 : The activity&#39;s elapsed time, in seconds
    - total_elevation_gain::Float32 : The activity&#39;s total elevation gain.
    - elev_high::Float32 : The activity&#39;s highest elevation, in meters
    - elev_low::Float32 : The activity&#39;s lowest elevation, in meters
    - type::ActivityType
    - sport_type::SportType
    - start_date::ZonedDateTime : The time at which the activity was started.
    - start_date_local::ZonedDateTime : The time at which the activity was started in the local timezone.
    - timezone::String : The timezone of the activity
    - start_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
    - end_latlng::Vector{Float32} : A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
    - achievement_count::Int64 : The number of achievements gained during this activity
    - kudos_count::Int64 : The number of kudos given for this activity
    - comment_count::Int64 : The number of comments for this activity
    - athlete_count::Int64 : The number of athletes for taking part in a group activity
    - photo_count::Int64 : The number of Instagram photos for this activity
    - total_photo_count::Int64 : The number of Instagram and Strava photos for this activity
    - map::PolylineMap
    - trainer::Bool : Whether this activity was recorded on a training machine
    - commute::Bool : Whether this activity is a commute
    - manual::Bool : Whether this activity was created manually
    - private::Bool : Whether this activity is private
    - flagged::Bool : Whether this activity is flagged
    - workout_type::Int64 : The activity&#39;s workout type
    - upload_id_str::String : The unique identifier of the upload in string format
    - average_speed::Float32 : The activity&#39;s average speed, in meters per second
    - max_speed::Float32 : The activity&#39;s max speed, in meters per second
    - has_kudoed::Bool : Whether the logged-in athlete has kudoed this activity
    - hide_from_home::Bool : Whether the activity is muted
    - gear_id::String : The id of the gear for the activity
    - kilojoules::Float32 : The total work done in kilojoules during this activity. Rides only
    - average_watts::Float32 : Average power output in watts during this activity. Rides only
    - device_watts::Bool : Whether the watts are from a power meter, false if estimated
    - max_watts::Int64 : Rides with power meter data only
    - weighted_average_watts::Int64 : Similar to Normalized Power. Rides with power meter data only
    - description::String : The description of the activity
    - photos::PhotosSummary
    - gear::SummaryGear
    - calories::Float32 : The number of kilocalories consumed during this activity
    - segment_efforts::Vector{DetailedSegmentEffort}
    - device_name::String : The name of the device used to record the activity
    - embed_token::String : The token used to embed a Strava activity
    - splits_metric::Vector{Split} : The splits of this activity in metric units (for runs)
    - splits_standard::Vector{Split} : The splits of this activity in imperial units (for runs)
    - laps::Vector{Lap}
    - best_efforts::Vector{DetailedSegmentEffort}
"""
Base.@kwdef mutable struct DetailedActivity <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    external_id::Union{Nothing, String} = nothing
    upload_id::Union{Nothing, Int64} = nothing
    athlete = nothing # spec type: Union{ Nothing, MetaAthlete }
    name::Union{Nothing, String} = nothing
    distance::Union{Nothing, Float32} = nothing
    moving_time::Union{Nothing, Int64} = nothing
    elapsed_time::Union{Nothing, Int64} = nothing
    total_elevation_gain::Union{Nothing, Float32} = nothing
    elev_high::Union{Nothing, Float32} = nothing
    elev_low::Union{Nothing, Float32} = nothing
    type = nothing # spec type: Union{ Nothing, ActivityType }
    sport_type = nothing # spec type: Union{ Nothing, SportType }
    start_date::Union{Nothing, ZonedDateTime} = nothing
    start_date_local::Union{Nothing, ZonedDateTime} = nothing
    timezone::Union{Nothing, String} = nothing
    start_latlng::Union{Nothing, Vector{Float32}} = nothing
    end_latlng::Union{Nothing, Vector{Float32}} = nothing
    achievement_count::Union{Nothing, Int64} = nothing
    kudos_count::Union{Nothing, Int64} = nothing
    comment_count::Union{Nothing, Int64} = nothing
    athlete_count::Union{Nothing, Int64} = nothing
    photo_count::Union{Nothing, Int64} = nothing
    total_photo_count::Union{Nothing, Int64} = nothing
    map = nothing # spec type: Union{ Nothing, PolylineMap }
    trainer::Union{Nothing, Bool} = nothing
    commute::Union{Nothing, Bool} = nothing
    manual::Union{Nothing, Bool} = nothing
    private::Union{Nothing, Bool} = nothing
    flagged::Union{Nothing, Bool} = nothing
    workout_type::Union{Nothing, Int64} = nothing
    upload_id_str::Union{Nothing, String} = nothing
    average_speed::Union{Nothing, Float32} = nothing
    max_speed::Union{Nothing, Float32} = nothing
    has_kudoed::Union{Nothing, Bool} = nothing
    hide_from_home::Union{Nothing, Bool} = nothing
    gear_id::Union{Nothing, String} = nothing
    kilojoules::Union{Nothing, Float32} = nothing
    average_watts::Union{Nothing, Float32} = nothing
    device_watts::Union{Nothing, Bool} = nothing
    max_watts::Union{Nothing, Int64} = nothing
    weighted_average_watts::Union{Nothing, Int64} = nothing
    description::Union{Nothing, String} = nothing
    photos = nothing # spec type: Union{ Nothing, PhotosSummary }
    gear = nothing # spec type: Union{ Nothing, SummaryGear }
    calories::Union{Nothing, Float32} = nothing
    segment_efforts::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DetailedSegmentEffort} }
    device_name::Union{Nothing, String} = nothing
    embed_token::Union{Nothing, String} = nothing
    splits_metric::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Split} }
    splits_standard::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Split} }
    laps::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Lap} }
    best_efforts::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DetailedSegmentEffort} }

    function DetailedActivity(id, external_id, upload_id, athlete, name, distance, moving_time, elapsed_time, total_elevation_gain, elev_high, elev_low, type, sport_type, start_date, start_date_local, timezone, start_latlng, end_latlng, achievement_count, kudos_count, comment_count, athlete_count, photo_count, total_photo_count, map, trainer, commute, manual, private, flagged, workout_type, upload_id_str, average_speed, max_speed, has_kudoed, hide_from_home, gear_id, kilojoules, average_watts, device_watts, max_watts, weighted_average_watts, description, photos, gear, calories, segment_efforts, device_name, embed_token, splits_metric, splits_standard, laps, best_efforts, )
        OpenAPI.validate_property(DetailedActivity, Symbol("id"), id)
        OpenAPI.validate_property(DetailedActivity, Symbol("external_id"), external_id)
        OpenAPI.validate_property(DetailedActivity, Symbol("upload_id"), upload_id)
        OpenAPI.validate_property(DetailedActivity, Symbol("athlete"), athlete)
        OpenAPI.validate_property(DetailedActivity, Symbol("name"), name)
        OpenAPI.validate_property(DetailedActivity, Symbol("distance"), distance)
        OpenAPI.validate_property(DetailedActivity, Symbol("moving_time"), moving_time)
        OpenAPI.validate_property(DetailedActivity, Symbol("elapsed_time"), elapsed_time)
        OpenAPI.validate_property(DetailedActivity, Symbol("total_elevation_gain"), total_elevation_gain)
        OpenAPI.validate_property(DetailedActivity, Symbol("elev_high"), elev_high)
        OpenAPI.validate_property(DetailedActivity, Symbol("elev_low"), elev_low)
        OpenAPI.validate_property(DetailedActivity, Symbol("type"), type)
        OpenAPI.validate_property(DetailedActivity, Symbol("sport_type"), sport_type)
        OpenAPI.validate_property(DetailedActivity, Symbol("start_date"), start_date)
        OpenAPI.validate_property(DetailedActivity, Symbol("start_date_local"), start_date_local)
        OpenAPI.validate_property(DetailedActivity, Symbol("timezone"), timezone)
        OpenAPI.validate_property(DetailedActivity, Symbol("start_latlng"), start_latlng)
        OpenAPI.validate_property(DetailedActivity, Symbol("end_latlng"), end_latlng)
        OpenAPI.validate_property(DetailedActivity, Symbol("achievement_count"), achievement_count)
        OpenAPI.validate_property(DetailedActivity, Symbol("kudos_count"), kudos_count)
        OpenAPI.validate_property(DetailedActivity, Symbol("comment_count"), comment_count)
        OpenAPI.validate_property(DetailedActivity, Symbol("athlete_count"), athlete_count)
        OpenAPI.validate_property(DetailedActivity, Symbol("photo_count"), photo_count)
        OpenAPI.validate_property(DetailedActivity, Symbol("total_photo_count"), total_photo_count)
        OpenAPI.validate_property(DetailedActivity, Symbol("map"), map)
        OpenAPI.validate_property(DetailedActivity, Symbol("trainer"), trainer)
        OpenAPI.validate_property(DetailedActivity, Symbol("commute"), commute)
        OpenAPI.validate_property(DetailedActivity, Symbol("manual"), manual)
        OpenAPI.validate_property(DetailedActivity, Symbol("private"), private)
        OpenAPI.validate_property(DetailedActivity, Symbol("flagged"), flagged)
        OpenAPI.validate_property(DetailedActivity, Symbol("workout_type"), workout_type)
        OpenAPI.validate_property(DetailedActivity, Symbol("upload_id_str"), upload_id_str)
        OpenAPI.validate_property(DetailedActivity, Symbol("average_speed"), average_speed)
        OpenAPI.validate_property(DetailedActivity, Symbol("max_speed"), max_speed)
        OpenAPI.validate_property(DetailedActivity, Symbol("has_kudoed"), has_kudoed)
        OpenAPI.validate_property(DetailedActivity, Symbol("hide_from_home"), hide_from_home)
        OpenAPI.validate_property(DetailedActivity, Symbol("gear_id"), gear_id)
        OpenAPI.validate_property(DetailedActivity, Symbol("kilojoules"), kilojoules)
        OpenAPI.validate_property(DetailedActivity, Symbol("average_watts"), average_watts)
        OpenAPI.validate_property(DetailedActivity, Symbol("device_watts"), device_watts)
        OpenAPI.validate_property(DetailedActivity, Symbol("max_watts"), max_watts)
        OpenAPI.validate_property(DetailedActivity, Symbol("weighted_average_watts"), weighted_average_watts)
        OpenAPI.validate_property(DetailedActivity, Symbol("description"), description)
        OpenAPI.validate_property(DetailedActivity, Symbol("photos"), photos)
        OpenAPI.validate_property(DetailedActivity, Symbol("gear"), gear)
        OpenAPI.validate_property(DetailedActivity, Symbol("calories"), calories)
        OpenAPI.validate_property(DetailedActivity, Symbol("segment_efforts"), segment_efforts)
        OpenAPI.validate_property(DetailedActivity, Symbol("device_name"), device_name)
        OpenAPI.validate_property(DetailedActivity, Symbol("embed_token"), embed_token)
        OpenAPI.validate_property(DetailedActivity, Symbol("splits_metric"), splits_metric)
        OpenAPI.validate_property(DetailedActivity, Symbol("splits_standard"), splits_standard)
        OpenAPI.validate_property(DetailedActivity, Symbol("laps"), laps)
        OpenAPI.validate_property(DetailedActivity, Symbol("best_efforts"), best_efforts)
        return new(id, external_id, upload_id, athlete, name, distance, moving_time, elapsed_time, total_elevation_gain, elev_high, elev_low, type, sport_type, start_date, start_date_local, timezone, start_latlng, end_latlng, achievement_count, kudos_count, comment_count, athlete_count, photo_count, total_photo_count, map, trainer, commute, manual, private, flagged, workout_type, upload_id_str, average_speed, max_speed, has_kudoed, hide_from_home, gear_id, kilojoules, average_watts, device_watts, max_watts, weighted_average_watts, description, photos, gear, calories, segment_efforts, device_name, embed_token, splits_metric, splits_standard, laps, best_efforts, )
    end
end # type DetailedActivity

const _property_types_DetailedActivity = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("external_id")=>"String", Symbol("upload_id")=>"Int64", Symbol("athlete")=>"MetaAthlete", Symbol("name")=>"String", Symbol("distance")=>"Float32", Symbol("moving_time")=>"Int64", Symbol("elapsed_time")=>"Int64", Symbol("total_elevation_gain")=>"Float32", Symbol("elev_high")=>"Float32", Symbol("elev_low")=>"Float32", Symbol("type")=>"ActivityType", Symbol("sport_type")=>"SportType", Symbol("start_date")=>"ZonedDateTime", Symbol("start_date_local")=>"ZonedDateTime", Symbol("timezone")=>"String", Symbol("start_latlng")=>"Vector{Float32}", Symbol("end_latlng")=>"Vector{Float32}", Symbol("achievement_count")=>"Int64", Symbol("kudos_count")=>"Int64", Symbol("comment_count")=>"Int64", Symbol("athlete_count")=>"Int64", Symbol("photo_count")=>"Int64", Symbol("total_photo_count")=>"Int64", Symbol("map")=>"PolylineMap", Symbol("trainer")=>"Bool", Symbol("commute")=>"Bool", Symbol("manual")=>"Bool", Symbol("private")=>"Bool", Symbol("flagged")=>"Bool", Symbol("workout_type")=>"Int64", Symbol("upload_id_str")=>"String", Symbol("average_speed")=>"Float32", Symbol("max_speed")=>"Float32", Symbol("has_kudoed")=>"Bool", Symbol("hide_from_home")=>"Bool", Symbol("gear_id")=>"String", Symbol("kilojoules")=>"Float32", Symbol("average_watts")=>"Float32", Symbol("device_watts")=>"Bool", Symbol("max_watts")=>"Int64", Symbol("weighted_average_watts")=>"Int64", Symbol("description")=>"String", Symbol("photos")=>"PhotosSummary", Symbol("gear")=>"SummaryGear", Symbol("calories")=>"Float32", Symbol("segment_efforts")=>"Vector{DetailedSegmentEffort}", Symbol("device_name")=>"String", Symbol("embed_token")=>"String", Symbol("splits_metric")=>"Vector{Split}", Symbol("splits_standard")=>"Vector{Split}", Symbol("laps")=>"Vector{Lap}", Symbol("best_efforts")=>"Vector{DetailedSegmentEffort}", )
OpenAPI.property_type(::Type{ DetailedActivity }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DetailedActivity[name]))}

function check_required(o::DetailedActivity)
    true
end

function OpenAPI.validate_property(::Type{ DetailedActivity }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "DetailedActivity", :format, val, "int64")
    end
    if name === Symbol("upload_id")
        OpenAPI.validate_param(name, "DetailedActivity", :format, val, "int64")
    end
    if name === Symbol("distance")
        OpenAPI.validate_param(name, "DetailedActivity", :format, val, "float")
    end
    if name === Symbol("total_elevation_gain")
        OpenAPI.validate_param(name, "DetailedActivity", :format, val, "float")
    end
    if name === Symbol("elev_high")
        OpenAPI.validate_param(name, "DetailedActivity", :format, val, "float")
    end
    if name === Symbol("elev_low")
        OpenAPI.validate_param(name, "DetailedActivity", :format, val, "float")
    end
    if name === Symbol("start_date")
        OpenAPI.validate_param(name, "DetailedActivity", :format, val, "date-time")
    end
    if name === Symbol("start_date_local")
        OpenAPI.validate_param(name, "DetailedActivity", :format, val, "date-time")
    end
    if name === Symbol("start_latlng")
        OpenAPI.validate_param(name, "DetailedActivity", :maxItems, val, 2)
        OpenAPI.validate_param(name, "DetailedActivity", :minItems, val, 2)
    end
    if name === Symbol("end_latlng")
        OpenAPI.validate_param(name, "DetailedActivity", :maxItems, val, 2)
        OpenAPI.validate_param(name, "DetailedActivity", :minItems, val, 2)
    end
    if name === Symbol("athlete_count")
        OpenAPI.validate_param(name, "DetailedActivity", :minimum, val, 1, false)
    end
    if name === Symbol("average_speed")
        OpenAPI.validate_param(name, "DetailedActivity", :format, val, "float")
    end
    if name === Symbol("max_speed")
        OpenAPI.validate_param(name, "DetailedActivity", :format, val, "float")
    end
    if name === Symbol("kilojoules")
        OpenAPI.validate_param(name, "DetailedActivity", :format, val, "float")
    end
    if name === Symbol("average_watts")
        OpenAPI.validate_param(name, "DetailedActivity", :format, val, "float")
    end
    if name === Symbol("calories")
        OpenAPI.validate_param(name, "DetailedActivity", :format, val, "float")
    end
end
