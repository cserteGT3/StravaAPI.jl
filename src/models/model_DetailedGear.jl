# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DetailedGear

    DetailedGear(;
        id=nothing,
        resource_state=nothing,
        primary=nothing,
        name=nothing,
        distance=nothing,
        brand_name=nothing,
        model_name=nothing,
        frame_type=nothing,
        description=nothing,
    )

    - id::String : The gear&#39;s unique identifier.
    - resource_state::Int64 : Resource state, indicates level of detail. Possible values: 2 -&gt; \&quot;summary\&quot;, 3 -&gt; \&quot;detail\&quot;
    - primary::Bool : Whether this gear&#39;s is the owner&#39;s default one.
    - name::String : The gear&#39;s name.
    - distance::Float32 : The distance logged with this gear.
    - brand_name::String : The gear&#39;s brand name.
    - model_name::String : The gear&#39;s model name.
    - frame_type::Int64 : The gear&#39;s frame type (bike only).
    - description::String : The gear&#39;s description.
"""
Base.@kwdef mutable struct DetailedGear <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    resource_state::Union{Nothing, Int64} = nothing
    primary::Union{Nothing, Bool} = nothing
    name::Union{Nothing, String} = nothing
    distance::Union{Nothing, Float32} = nothing
    brand_name::Union{Nothing, String} = nothing
    model_name::Union{Nothing, String} = nothing
    frame_type::Union{Nothing, Int64} = nothing
    description::Union{Nothing, String} = nothing

    function DetailedGear(id, resource_state, primary, name, distance, brand_name, model_name, frame_type, description, )
        OpenAPI.validate_property(DetailedGear, Symbol("id"), id)
        OpenAPI.validate_property(DetailedGear, Symbol("resource_state"), resource_state)
        OpenAPI.validate_property(DetailedGear, Symbol("primary"), primary)
        OpenAPI.validate_property(DetailedGear, Symbol("name"), name)
        OpenAPI.validate_property(DetailedGear, Symbol("distance"), distance)
        OpenAPI.validate_property(DetailedGear, Symbol("brand_name"), brand_name)
        OpenAPI.validate_property(DetailedGear, Symbol("model_name"), model_name)
        OpenAPI.validate_property(DetailedGear, Symbol("frame_type"), frame_type)
        OpenAPI.validate_property(DetailedGear, Symbol("description"), description)
        return new(id, resource_state, primary, name, distance, brand_name, model_name, frame_type, description, )
    end
end # type DetailedGear

const _property_types_DetailedGear = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("resource_state")=>"Int64", Symbol("primary")=>"Bool", Symbol("name")=>"String", Symbol("distance")=>"Float32", Symbol("brand_name")=>"String", Symbol("model_name")=>"String", Symbol("frame_type")=>"Int64", Symbol("description")=>"String", )
OpenAPI.property_type(::Type{ DetailedGear }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DetailedGear[name]))}

function check_required(o::DetailedGear)
    true
end

function OpenAPI.validate_property(::Type{ DetailedGear }, name::Symbol, val)
    if name === Symbol("distance")
        OpenAPI.validate_param(name, "DetailedGear", :format, val, "float")
    end
end
