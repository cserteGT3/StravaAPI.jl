# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DetailedClub

    DetailedClub(;
        id=nothing,
        resource_state=nothing,
        name=nothing,
        profile_medium=nothing,
        cover_photo=nothing,
        cover_photo_small=nothing,
        sport_type=nothing,
        activity_types=nothing,
        city=nothing,
        state=nothing,
        country=nothing,
        private=nothing,
        member_count=nothing,
        featured=nothing,
        verified=nothing,
        url=nothing,
        membership=nothing,
        admin=nothing,
        owner=nothing,
        following_count=nothing,
    )

    - id::Int64 : The club&#39;s unique identifier.
    - resource_state::Int64 : Resource state, indicates level of detail. Possible values: 1 -&gt; \&quot;meta\&quot;, 2 -&gt; \&quot;summary\&quot;, 3 -&gt; \&quot;detail\&quot;
    - name::String : The club&#39;s name.
    - profile_medium::String : URL to a 60x60 pixel profile picture.
    - cover_photo::String : URL to a ~1185x580 pixel cover photo.
    - cover_photo_small::String : URL to a ~360x176  pixel cover photo.
    - sport_type::String : Deprecated. Prefer to use activity_types.
    - activity_types::Vector{ActivityType} : The activity types that count for a club. This takes precedence over sport_type.
    - city::String : The club&#39;s city.
    - state::String : The club&#39;s state or geographical region.
    - country::String : The club&#39;s country.
    - private::Bool : Whether the club is private.
    - member_count::Int64 : The club&#39;s member count.
    - featured::Bool : Whether the club is featured or not.
    - verified::Bool : Whether the club is verified or not.
    - url::String : The club&#39;s vanity URL.
    - membership::String : The membership status of the logged-in athlete.
    - admin::Bool : Whether the currently logged-in athlete is an administrator of this club.
    - owner::Bool : Whether the currently logged-in athlete is the owner of this club.
    - following_count::Int64 : The number of athletes in the club that the logged-in athlete follows.
"""
Base.@kwdef mutable struct DetailedClub <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    resource_state::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    profile_medium::Union{Nothing, String} = nothing
    cover_photo::Union{Nothing, String} = nothing
    cover_photo_small::Union{Nothing, String} = nothing
    sport_type::Union{Nothing, String} = nothing
    activity_types::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ActivityType} }
    city::Union{Nothing, String} = nothing
    state::Union{Nothing, String} = nothing
    country::Union{Nothing, String} = nothing
    private::Union{Nothing, Bool} = nothing
    member_count::Union{Nothing, Int64} = nothing
    featured::Union{Nothing, Bool} = nothing
    verified::Union{Nothing, Bool} = nothing
    url::Union{Nothing, String} = nothing
    membership::Union{Nothing, String} = nothing
    admin::Union{Nothing, Bool} = nothing
    owner::Union{Nothing, Bool} = nothing
    following_count::Union{Nothing, Int64} = nothing

    function DetailedClub(id, resource_state, name, profile_medium, cover_photo, cover_photo_small, sport_type, activity_types, city, state, country, private, member_count, featured, verified, url, membership, admin, owner, following_count, )
        OpenAPI.validate_property(DetailedClub, Symbol("id"), id)
        OpenAPI.validate_property(DetailedClub, Symbol("resource_state"), resource_state)
        OpenAPI.validate_property(DetailedClub, Symbol("name"), name)
        OpenAPI.validate_property(DetailedClub, Symbol("profile_medium"), profile_medium)
        OpenAPI.validate_property(DetailedClub, Symbol("cover_photo"), cover_photo)
        OpenAPI.validate_property(DetailedClub, Symbol("cover_photo_small"), cover_photo_small)
        OpenAPI.validate_property(DetailedClub, Symbol("sport_type"), sport_type)
        OpenAPI.validate_property(DetailedClub, Symbol("activity_types"), activity_types)
        OpenAPI.validate_property(DetailedClub, Symbol("city"), city)
        OpenAPI.validate_property(DetailedClub, Symbol("state"), state)
        OpenAPI.validate_property(DetailedClub, Symbol("country"), country)
        OpenAPI.validate_property(DetailedClub, Symbol("private"), private)
        OpenAPI.validate_property(DetailedClub, Symbol("member_count"), member_count)
        OpenAPI.validate_property(DetailedClub, Symbol("featured"), featured)
        OpenAPI.validate_property(DetailedClub, Symbol("verified"), verified)
        OpenAPI.validate_property(DetailedClub, Symbol("url"), url)
        OpenAPI.validate_property(DetailedClub, Symbol("membership"), membership)
        OpenAPI.validate_property(DetailedClub, Symbol("admin"), admin)
        OpenAPI.validate_property(DetailedClub, Symbol("owner"), owner)
        OpenAPI.validate_property(DetailedClub, Symbol("following_count"), following_count)
        return new(id, resource_state, name, profile_medium, cover_photo, cover_photo_small, sport_type, activity_types, city, state, country, private, member_count, featured, verified, url, membership, admin, owner, following_count, )
    end
end # type DetailedClub

const _property_types_DetailedClub = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("resource_state")=>"Int64", Symbol("name")=>"String", Symbol("profile_medium")=>"String", Symbol("cover_photo")=>"String", Symbol("cover_photo_small")=>"String", Symbol("sport_type")=>"String", Symbol("activity_types")=>"Vector{ActivityType}", Symbol("city")=>"String", Symbol("state")=>"String", Symbol("country")=>"String", Symbol("private")=>"Bool", Symbol("member_count")=>"Int64", Symbol("featured")=>"Bool", Symbol("verified")=>"Bool", Symbol("url")=>"String", Symbol("membership")=>"String", Symbol("admin")=>"Bool", Symbol("owner")=>"Bool", Symbol("following_count")=>"Int64", )
OpenAPI.property_type(::Type{ DetailedClub }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DetailedClub[name]))}

function check_required(o::DetailedClub)
    true
end

function OpenAPI.validate_property(::Type{ DetailedClub }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "DetailedClub", :format, val, "int64")
    end
    if name === Symbol("sport_type")
        OpenAPI.validate_param(name, "DetailedClub", :enum, val, ["cycling", "running", "triathlon", "other"])
    end
    if name === Symbol("membership")
        OpenAPI.validate_param(name, "DetailedClub", :enum, val, ["member", "pending"])
    end
end
