# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct SegmentsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `SegmentsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ SegmentsApi }) = "https://www.strava.com/api/v3"

const _returntypes_explore_segments_SegmentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ExplorerResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_explore_segments(_api::SegmentsApi, bounds::Vector{Float32}; activity_type=nothing, min_cat=nothing, max_cat=nothing, _mediaType=nothing)
    OpenAPI.validate_param("bounds", "explore_segments", :maxItems, bounds, 4)
    OpenAPI.validate_param("bounds", "explore_segments", :minItems, bounds, 4)

    OpenAPI.validate_param("min_cat", "explore_segments", :maximum, min_cat, 5, false)
    OpenAPI.validate_param("min_cat", "explore_segments", :minimum, min_cat, 0, false)

    OpenAPI.validate_param("max_cat", "explore_segments", :maximum, max_cat, 5, false)
    OpenAPI.validate_param("max_cat", "explore_segments", :minimum, max_cat, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_explore_segments_SegmentsApi, "/segments/explore", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.query, "bounds", bounds)  # type Vector{Float32}
    OpenAPI.Clients.set_param(_ctx.query, "activity_type", activity_type)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "min_cat", min_cat)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "max_cat", max_cat)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Explore segments

Returns the top 10 segments matching a specified query.

Params:
- bounds::Vector{Float32} (required)
- activity_type::String
- min_cat::Int64
- max_cat::Int64

Return: ExplorerResponse, OpenAPI.Clients.ApiResponse
"""
function explore_segments(_api::SegmentsApi, bounds::Vector{Float32}; activity_type=nothing, min_cat=nothing, max_cat=nothing, _mediaType=nothing)
    _ctx = _oacinternal_explore_segments(_api, bounds; activity_type=activity_type, min_cat=min_cat, max_cat=max_cat, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function explore_segments(_api::SegmentsApi, response_stream::Channel, bounds::Vector{Float32}; activity_type=nothing, min_cat=nothing, max_cat=nothing, _mediaType=nothing)
    _ctx = _oacinternal_explore_segments(_api, bounds; activity_type=activity_type, min_cat=min_cat, max_cat=max_cat, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_logged_in_athlete_starred_segments_SegmentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{SummarySegment},
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_logged_in_athlete_starred_segments(_api::SegmentsApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_logged_in_athlete_starred_segments_SegmentsApi, "/segments/starred", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Starred Segments

List of the authenticated athlete's starred segments. Private segments are filtered out unless requested by a token with read_all scope.

Params:
- page::Int64
- per_page::Int64

Return: Vector{SummarySegment}, OpenAPI.Clients.ApiResponse
"""
function get_logged_in_athlete_starred_segments(_api::SegmentsApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_logged_in_athlete_starred_segments(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_logged_in_athlete_starred_segments(_api::SegmentsApi, response_stream::Channel; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_logged_in_athlete_starred_segments(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_segment_by_id_SegmentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DetailedSegment,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_segment_by_id(_api::SegmentsApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_segment_by_id_SegmentsApi, "/segments/{id}", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Segment

Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.

Params:
- id::Int64 (required)

Return: DetailedSegment, OpenAPI.Clients.ApiResponse
"""
function get_segment_by_id(_api::SegmentsApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_segment_by_id(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_segment_by_id(_api::SegmentsApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_segment_by_id(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_star_segment_SegmentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DetailedSegment,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_star_segment(_api::SegmentsApi, id::Int64, starred::Bool; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_star_segment_SegmentsApi, "/segments/{id}/starred", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.form, "starred", starred)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Star Segment

Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.

Params:
- id::Int64 (required)
- starred::Bool (required)

Return: DetailedSegment, OpenAPI.Clients.ApiResponse
"""
function star_segment(_api::SegmentsApi, id::Int64, starred::Bool; _mediaType=nothing)
    _ctx = _oacinternal_star_segment(_api, id, starred; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function star_segment(_api::SegmentsApi, response_stream::Channel, id::Int64, starred::Bool; _mediaType=nothing)
    _ctx = _oacinternal_star_segment(_api, id, starred; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export explore_segments
export get_logged_in_athlete_starred_segments
export get_segment_by_id
export star_segment
