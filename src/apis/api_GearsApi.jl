# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct GearsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `GearsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ GearsApi }) = "https://www.strava.com/api/v3"

const _returntypes_get_gear_by_id_GearsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DetailedGear,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_gear_by_id(_api::GearsApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_gear_by_id_GearsApi, "/gear/{id}", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Equipment

Returns an equipment using its identifier.

Params:
- id::String (required)

Return: DetailedGear, OpenAPI.Clients.ApiResponse
"""
function get_gear_by_id(_api::GearsApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_gear_by_id(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_gear_by_id(_api::GearsApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_gear_by_id(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_gear_by_id
