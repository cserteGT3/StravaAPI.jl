# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct AthletesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `AthletesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ AthletesApi }) = "https://www.strava.com/api/v3"

const _returntypes_get_logged_in_athlete_AthletesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DetailedAthlete,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_logged_in_athlete(_api::AthletesApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_logged_in_athlete_AthletesApi, "/athlete", ["strava_oauth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Authenticated Athlete

Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.

Params:

Return: DetailedAthlete, OpenAPI.Clients.ApiResponse
"""
function get_logged_in_athlete(_api::AthletesApi; _mediaType=nothing)
    _ctx = _oacinternal_get_logged_in_athlete(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_logged_in_athlete(_api::AthletesApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_logged_in_athlete(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_logged_in_athlete_zones_AthletesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Zones,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_logged_in_athlete_zones(_api::AthletesApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_logged_in_athlete_zones_AthletesApi, "/athlete/zones", ["strava_oauth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Zones

Returns the the authenticated athlete's heart rate and power zones. Requires profile:read_all.

Params:

Return: Zones, OpenAPI.Clients.ApiResponse
"""
function get_logged_in_athlete_zones(_api::AthletesApi; _mediaType=nothing)
    _ctx = _oacinternal_get_logged_in_athlete_zones(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_logged_in_athlete_zones(_api::AthletesApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_logged_in_athlete_zones(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_stats_AthletesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ActivityStats,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_stats(_api::AthletesApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_stats_AthletesApi, "/athletes/{id}/stats", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Athlete Stats

Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.

Params:
- id::Int64 (required)

Return: ActivityStats, OpenAPI.Clients.ApiResponse
"""
function get_stats(_api::AthletesApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_stats(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_stats(_api::AthletesApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_stats(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_logged_in_athlete_AthletesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DetailedAthlete,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_update_logged_in_athlete(_api::AthletesApi, weight::Float32; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_logged_in_athlete_AthletesApi, "/athlete", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "weight", weight)  # type Float32
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Update Athlete

Update the currently authenticated athlete. Requires profile:write scope.

Params:
- weight::Float32 (required)

Return: DetailedAthlete, OpenAPI.Clients.ApiResponse
"""
function update_logged_in_athlete(_api::AthletesApi, weight::Float32; _mediaType=nothing)
    _ctx = _oacinternal_update_logged_in_athlete(_api, weight; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_logged_in_athlete(_api::AthletesApi, response_stream::Channel, weight::Float32; _mediaType=nothing)
    _ctx = _oacinternal_update_logged_in_athlete(_api, weight; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_logged_in_athlete
export get_logged_in_athlete_zones
export get_stats
export update_logged_in_athlete
