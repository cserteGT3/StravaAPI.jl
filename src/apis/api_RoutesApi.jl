# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct RoutesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `RoutesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ RoutesApi }) = "https://www.strava.com/api/v3"

const _returntypes_get_route_as_g_p_x_RoutesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_route_as_g_p_x(_api::RoutesApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_route_as_g_p_x_RoutesApi, "/routes/{id}/export_gpx", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Export Route GPX

Returns a GPX file of the route. Requires read_all scope for private routes.

Params:
- id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_route_as_g_p_x(_api::RoutesApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_route_as_g_p_x(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_route_as_g_p_x(_api::RoutesApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_route_as_g_p_x(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_route_as_t_c_x_RoutesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_route_as_t_c_x(_api::RoutesApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_route_as_t_c_x_RoutesApi, "/routes/{id}/export_tcx", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Export Route TCX

Returns a TCX file of the route. Requires read_all scope for private routes.

Params:
- id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_route_as_t_c_x(_api::RoutesApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_route_as_t_c_x(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_route_as_t_c_x(_api::RoutesApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_route_as_t_c_x(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_route_by_id_RoutesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Route,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_route_by_id(_api::RoutesApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_route_by_id_RoutesApi, "/routes/{id}", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Route

Returns a route using its identifier. Requires read_all scope for private routes.

Params:
- id::Int64 (required)

Return: Route, OpenAPI.Clients.ApiResponse
"""
function get_route_by_id(_api::RoutesApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_route_by_id(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_route_by_id(_api::RoutesApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_route_by_id(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_routes_by_athlete_id_RoutesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Route},
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_routes_by_athlete_id(_api::RoutesApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_routes_by_athlete_id_RoutesApi, "/athletes/{id}/routes", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Athlete Routes

Returns a list of the routes created by the authenticated athlete. Private routes are filtered out unless requested by a token with read_all scope.

Params:
- page::Int64
- per_page::Int64

Return: Vector{Route}, OpenAPI.Clients.ApiResponse
"""
function get_routes_by_athlete_id(_api::RoutesApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_routes_by_athlete_id(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_routes_by_athlete_id(_api::RoutesApi, response_stream::Channel; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_routes_by_athlete_id(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_route_as_g_p_x
export get_route_as_t_c_x
export get_route_by_id
export get_routes_by_athlete_id
