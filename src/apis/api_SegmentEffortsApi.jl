# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct SegmentEffortsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `SegmentEffortsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ SegmentEffortsApi }) = "https://www.strava.com/api/v3"

const _returntypes_get_efforts_by_segment_id_SegmentEffortsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{DetailedSegmentEffort},
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_efforts_by_segment_id(_api::SegmentEffortsApi, segment_id::Int64; start_date_local=nothing, end_date_local=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_efforts_by_segment_id_SegmentEffortsApi, "/segment_efforts", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.query, "segment_id", segment_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "start_date_local", start_date_local)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "end_date_local", end_date_local)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Segment Efforts

Returns a set of the authenticated athlete's segment efforts for a given segment.  Requires subscription.

Params:
- segment_id::Int64 (required)
- start_date_local::ZonedDateTime
- end_date_local::ZonedDateTime
- per_page::Int64

Return: Vector{DetailedSegmentEffort}, OpenAPI.Clients.ApiResponse
"""
function get_efforts_by_segment_id(_api::SegmentEffortsApi, segment_id::Int64; start_date_local=nothing, end_date_local=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_efforts_by_segment_id(_api, segment_id; start_date_local=start_date_local, end_date_local=end_date_local, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_efforts_by_segment_id(_api::SegmentEffortsApi, response_stream::Channel, segment_id::Int64; start_date_local=nothing, end_date_local=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_efforts_by_segment_id(_api, segment_id; start_date_local=start_date_local, end_date_local=end_date_local, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_segment_effort_by_id_SegmentEffortsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DetailedSegmentEffort,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_segment_effort_by_id(_api::SegmentEffortsApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_segment_effort_by_id_SegmentEffortsApi, "/segment_efforts/{id}", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Segment Effort

Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.

Params:
- id::Int64 (required)

Return: DetailedSegmentEffort, OpenAPI.Clients.ApiResponse
"""
function get_segment_effort_by_id(_api::SegmentEffortsApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_segment_effort_by_id(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_segment_effort_by_id(_api::SegmentEffortsApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_segment_effort_by_id(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_efforts_by_segment_id
export get_segment_effort_by_id
