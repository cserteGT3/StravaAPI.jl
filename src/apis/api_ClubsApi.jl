# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ClubsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ClubsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ClubsApi }) = "https://www.strava.com/api/v3"

const _returntypes_get_club_activities_by_id_ClubsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ClubActivity},
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_club_activities_by_id(_api::ClubsApi, id::Int64; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_club_activities_by_id_ClubsApi, "/clubs/{id}/activities", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Club Activities

Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.

Params:
- id::Int64 (required)
- page::Int64
- per_page::Int64

Return: Vector{ClubActivity}, OpenAPI.Clients.ApiResponse
"""
function get_club_activities_by_id(_api::ClubsApi, id::Int64; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_club_activities_by_id(_api, id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_club_activities_by_id(_api::ClubsApi, response_stream::Channel, id::Int64; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_club_activities_by_id(_api, id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_club_admins_by_id_ClubsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{SummaryAthlete},
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_club_admins_by_id(_api::ClubsApi, id::Int64; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_club_admins_by_id_ClubsApi, "/clubs/{id}/admins", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Club Administrators

Returns a list of the administrators of a given club.

Params:
- id::Int64 (required)
- page::Int64
- per_page::Int64

Return: Vector{SummaryAthlete}, OpenAPI.Clients.ApiResponse
"""
function get_club_admins_by_id(_api::ClubsApi, id::Int64; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_club_admins_by_id(_api, id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_club_admins_by_id(_api::ClubsApi, response_stream::Channel, id::Int64; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_club_admins_by_id(_api, id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_club_by_id_ClubsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DetailedClub,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_club_by_id(_api::ClubsApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_club_by_id_ClubsApi, "/clubs/{id}", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Club

Returns a given club using its identifier.

Params:
- id::Int64 (required)

Return: DetailedClub, OpenAPI.Clients.ApiResponse
"""
function get_club_by_id(_api::ClubsApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_club_by_id(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_club_by_id(_api::ClubsApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_club_by_id(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_club_members_by_id_ClubsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ClubAthlete},
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_club_members_by_id(_api::ClubsApi, id::Int64; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_club_members_by_id_ClubsApi, "/clubs/{id}/members", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Club Members

Returns a list of the athletes who are members of a given club.

Params:
- id::Int64 (required)
- page::Int64
- per_page::Int64

Return: Vector{ClubAthlete}, OpenAPI.Clients.ApiResponse
"""
function get_club_members_by_id(_api::ClubsApi, id::Int64; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_club_members_by_id(_api, id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_club_members_by_id(_api::ClubsApi, response_stream::Channel, id::Int64; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_club_members_by_id(_api, id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_logged_in_athlete_clubs_ClubsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{SummaryClub},
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_logged_in_athlete_clubs(_api::ClubsApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_logged_in_athlete_clubs_ClubsApi, "/athlete/clubs", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Athlete Clubs

Returns a list of the clubs whose membership includes the authenticated athlete.

Params:
- page::Int64
- per_page::Int64

Return: Vector{SummaryClub}, OpenAPI.Clients.ApiResponse
"""
function get_logged_in_athlete_clubs(_api::ClubsApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_logged_in_athlete_clubs(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_logged_in_athlete_clubs(_api::ClubsApi, response_stream::Channel; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_logged_in_athlete_clubs(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_club_activities_by_id
export get_club_admins_by_id
export get_club_by_id
export get_club_members_by_id
export get_logged_in_athlete_clubs
