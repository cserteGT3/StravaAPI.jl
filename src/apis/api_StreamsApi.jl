# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct StreamsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `StreamsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ StreamsApi }) = "https://www.strava.com/api/v3"

const _returntypes_get_activity_streams_StreamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StreamSet,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_activity_streams(_api::StreamsApi, id::Int64, keys::Vector{String}, key_by_type::Bool; _mediaType=nothing)
    OpenAPI.validate_param("keys", "get_activity_streams", :minItems, keys, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_activity_streams_StreamsApi, "/activities/{id}/streams", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "keys", keys; style="form", is_explode=false)  # type Vector{String}
    OpenAPI.Clients.set_param(_ctx.query, "key_by_type", key_by_type; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Activity Streams

Returns the given activity's streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.

Params:
- id::Int64 (required)
- keys::Vector{String} (required)
- key_by_type::Bool (required)

Return: StreamSet, OpenAPI.Clients.ApiResponse
"""
function get_activity_streams(_api::StreamsApi, id::Int64, keys::Vector{String}, key_by_type::Bool; _mediaType=nothing)
    _ctx = _oacinternal_get_activity_streams(_api, id, keys, key_by_type; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_activity_streams(_api::StreamsApi, response_stream::Channel, id::Int64, keys::Vector{String}, key_by_type::Bool; _mediaType=nothing)
    _ctx = _oacinternal_get_activity_streams(_api, id, keys, key_by_type; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_route_streams_StreamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StreamSet,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_route_streams(_api::StreamsApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_route_streams_StreamsApi, "/routes/{id}/streams", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Route Streams

Returns the given route's streams. Requires read_all scope for private routes.

Params:
- id::Int64 (required)

Return: StreamSet, OpenAPI.Clients.ApiResponse
"""
function get_route_streams(_api::StreamsApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_route_streams(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_route_streams(_api::StreamsApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_route_streams(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_segment_effort_streams_StreamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StreamSet,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_segment_effort_streams(_api::StreamsApi, id::Int64, keys::Vector{String}, key_by_type::Bool; _mediaType=nothing)
    OpenAPI.validate_param("keys", "get_segment_effort_streams", :minItems, keys, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_segment_effort_streams_StreamsApi, "/segment_efforts/{id}/streams", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "keys", keys; style="form", is_explode=false)  # type Vector{String}
    OpenAPI.Clients.set_param(_ctx.query, "key_by_type", key_by_type; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Segment Effort Streams

Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.

Params:
- id::Int64 (required)
- keys::Vector{String} (required)
- key_by_type::Bool (required)

Return: StreamSet, OpenAPI.Clients.ApiResponse
"""
function get_segment_effort_streams(_api::StreamsApi, id::Int64, keys::Vector{String}, key_by_type::Bool; _mediaType=nothing)
    _ctx = _oacinternal_get_segment_effort_streams(_api, id, keys, key_by_type; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_segment_effort_streams(_api::StreamsApi, response_stream::Channel, id::Int64, keys::Vector{String}, key_by_type::Bool; _mediaType=nothing)
    _ctx = _oacinternal_get_segment_effort_streams(_api, id, keys, key_by_type; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_segment_streams_StreamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StreamSet,
    Regex("^" * replace("0", "x"=>".") * "\$") => Fault,
)

function _oacinternal_get_segment_streams(_api::StreamsApi, id::Int64, keys::Vector{String}, key_by_type::Bool; _mediaType=nothing)
    OpenAPI.validate_param("keys", "get_segment_streams", :minItems, keys, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_segment_streams_StreamsApi, "/segments/{id}/streams", ["strava_oauth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "keys", keys; style="form", is_explode=false)  # type Vector{String}
    OpenAPI.Clients.set_param(_ctx.query, "key_by_type", key_by_type; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Segment Streams

Returns the given segment's streams. Requires read_all scope for private segments.

Params:
- id::Int64 (required)
- keys::Vector{String} (required)
- key_by_type::Bool (required)

Return: StreamSet, OpenAPI.Clients.ApiResponse
"""
function get_segment_streams(_api::StreamsApi, id::Int64, keys::Vector{String}, key_by_type::Bool; _mediaType=nothing)
    _ctx = _oacinternal_get_segment_streams(_api, id, keys, key_by_type; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_segment_streams(_api::StreamsApi, response_stream::Channel, id::Int64, keys::Vector{String}, key_by_type::Bool; _mediaType=nothing)
    _ctx = _oacinternal_get_segment_streams(_api, id, keys, key_by_type; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_activity_streams
export get_route_streams
export get_segment_effort_streams
export get_segment_streams
